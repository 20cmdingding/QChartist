'
' -----------------------------------------------------------------------
' RQPC FB HexToBin and BinToHex Datas Converter    Jacques, jan 27th 2007
' -----------------------------------------------------------------------
Option Explicit
Option ByVal
' -----------------------------------------------------------------------
' -----------------------------------------------------------------------
' In:
' ---
' 1st arg: pointer to the binary datas to convert to hexa
' 2nd arg: size of the binary datas in byte; ex: size of "3F" = 2
' 3rd arg: pointer to a buffer that will receive the Hex data
' 4th arg: 0
'
' Result:
' -------
' 0 = OK NO ERROR
' 1 = ERROR PTRHEX  = 0
' 2 = ERROR PTRBIN  = 0
' 4 = ERROR BINSIZE = 0
' ------------------------------
'
' ''RQEXPORT function BinToHex (ptrBin, binSize, ptrHex)
Function BinToHex (ptrBin As Integer, binSize As Integer, ptrHex As Integer, a4) As Integer
    Dim iResult As Integer
    asm
        pusha
        '
        ' Check Inputs Validity
        ' --------------------
        mov ebx, 2             ' result = error ptr bin = 0
        mov esi, [ptrBin]
        cmp esi, 0
        jz .fini_shed
        '
        mov ebx, 1             ' result = error ptr Hex = 0
        mov edi, [ptrHex]
        cmp edi, 0
        jz .fini_shed

        mov ebx, 4             ' result = error binSize = 0
        mov ecx, [binSize]
        cmp ebx, 0
        jz .fini_shed
        mov ebx, 0
        '
        ' Convert Bin Datas to Hex
        ' ------------------------
        .bin_to_hex:
            mov al, [esi]
            mov ah, al
            ' highHex
            ' -------
            shr ah, 4              ' high byte only
            add ah, 48             ' "0"
            cmp ah, 57             ' "9"
            jle .ok_high_hex
                 add ah, 7
            .ok_high_hex:                   
            mov [edi], ah
            inc edi
            ' lowHex
            ' ------
            and al, &HF        ' get the low byte only
            add al, 48        ' same as for ah
            cmp al, 57
            jle .ok_low_hex
                add al, 7
            .ok_low_hex:
            mov [edi], al
            inc edi
            ' next bin
            inc esi
            dec ecx
        jnz .bin_to_hex
        .fini_shed:
        '
        ' set result
        ' ----------
        mov [iResult], ebx
        popa
    end asm
    Function = iResult
End Function
'
' -----------------------------------------------------------------------
' -----------------------------------------------------------------------
'
' In:
' ---
' 1st arg: pointer to the hexadecimal data
' 2nd arg: size of the hexadecimal data in byte size of "3F" = 2
' 3rd arg: pointer to a buffer that will receive the binarized hex data
' 4th arg: 0
'
' Result:
' -------
' 0 = OK NO ERROR
' 1 = ERROR PTRHEX  = 0
' 2 = ERROR PTRBIN  = 0
' 3 = ERROR HEXSIZE ODD/UNEVEN
' 4 = ERROR HEXSIZE = 0
' 5 = ERROR AT LEAST ONE NON HEX DIGIT FOUND
' ------------------------------------------
' ''RQEXPORT function HexToBin (ptrHex, hexSize, ptrBin)
'
Function HexToBin (ptrHex As Byte ptr, hexSize As Integer, ptrBin As Byte ptr, a4) As Integer
    Dim iResult As Integer
    asm
        pusha
        '
        ' Check Inputs Validity
        ' --------------------
        mov ebx, 1             ' ebx = result = 1 =  error ptrhex = 0
        mov esi, [ptrHex]
        cmp esi, 0
        jz .fini__shed
        '
        inc ebx                ' ebx = result = 2 =  error ptrBin = 0
        mov edi, [ptrBin]
        cmp edi, 0
        jz .fini__shed
        '
        inc ebx                ' ebx = result = 3 = error hexSize odd/uneven
        mov ecx, [hexSize]
        bt ecx, 0
        jc .fini__shed
        '
        inc ebx                ' ebx = result = 4 =  error hexSize = 0
        cmp ecx, 0
        jz .fini__shed
        '
        mov ebx, 0             ' ebx = 0       all ok no error
        mov edx, 0
        '
        ' Convert Hex Datas to Bin
        ' ------------------------
        .hex_to_bin:
           '
           ' high_bin   in ah
           ' --------
           mov ah, [esi]
           sub ah, 48         ' "0"
           cmp ah, 9
           jle .ok_hi_bin
              sub ah, 7
           .ok_hi_bin:
           test ah, &HF0      ' digit no hex
           setnz dl
           shl ah, 4
           '
           ' low_bin
           ' -------
           mov al, [esi+1]
           sub al, 48
           cmp al, 9
           jle .ok_lo_bin   
               sub al, 7
           .ok_lo_bin:
           test al, &HF0      ' digit no hex
           setnz dh
           '
           ' store bin
           ' ---------
           add ebx, edx       ' one digit no hex
           or al, ah
           mov [edi], al
           inc edi
           add esi, 2
           sub ecx, 2
           jc .fini__shed
        jnz .hex_to_bin
        .fini__shed:
        '
        ' set result in iResult
        ' ---------------------
        cmp ebx, 0
        jz .set_result
            mov ebx, 5        ' error non hex digit
        .set_result:
        mov [iResult], ebx
        popa
    end asm  
    Function = iResult
End Function
' -----------------------------------------------------------------------
'
