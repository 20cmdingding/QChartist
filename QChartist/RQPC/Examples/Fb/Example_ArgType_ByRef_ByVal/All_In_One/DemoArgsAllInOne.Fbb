
' ''RQEXPORT function ReplaceCharByRef (InString:String:ByRef, ToReplace:String, ReplaceBy:String)
Function ReplaceCharByRef (ptrStr As byte ptr, ptrTo As byte ptr, ptrBy As byte ptr, a4 As Integer) As Long
    Dim As Integer Count = 0, N = 0

    Print " in FB:       ptrString: ";ptrStr
    Print " in FB:    ptrToReplace: ";ptrTo
    Print " in FB: ptrToBeReplaced: ";ptrBy
    print  
    Print " in FB: ptrString before: ";*Cast(ZString ptr, ptrStr)        
    While ptrStr[N] <> 0
        If ptrStr[N] = ptrTo[0] Then
            ptrStr[N] = ptrBy[0]
            Count += 1
        End If
        N += 1
    Wend
    Print " in FB: ptrString  after: ";*Cast(ZString ptr, ptrStr)
    Function = Count
End Function

' ''RQEXPORT function ReplaceCharByVal (InString:String, ToReplace:String, ReplaceBy:String)
Function ReplaceCharByVal (ptrStr As byte ptr, ptrTo As byte ptr, ptrBy As byte ptr, a4 As Integer) As Long
    Dim As Integer Count = 0, N = 0
    print " in FB:       ptrString: ";ptrStr
    print " in FB:    ptrToReplace: ";ptrTo
    print " in FB: ptrToBeReplaced: ";ptrBy
    print
    Print " in FB: ptrString before: ";*Cast(ZString ptr, ptrStr)        
    While ptrStr[N] <> 0
        If ptrStr[N] = ptrTo[0] Then
            ptrStr[N] = ptrBy[0]
            Count += 1
        End If
        N += 1
    Wend
    Print " in FB: ptrString  after: ";*Cast(ZString ptr, ptrStr)
    function = Count
End Function

' ''RQEXPORT function ReplaceCharAsString:String (InString:String, ToReplace:String, ReplaceBy:String)
Function ReplaceCharAsString (ptrStr As byte ptr, ptrTo As byte ptr, ptrBy As byte ptr, a4 As Integer) As Long
    Dim As Integer Count = 0, N = 0
    print " in FB:       ptrString: ";ptrStr
    Print " in FB:   @ptrString[0]: ";@ptrStr[0]
    print " in FB:    ptrToReplace: ";ptrTo
    print " in FB: ptrToBeReplaced: ";ptrBy
    print
    Print " in FB: ptrString before: ";*Cast(ZString ptr, ptrStr)    
    While ptrStr[N] <> 0
        If ptrStr[N] = ptrTo[0] Then
            ptrStr[N] = ptrBy[0]
            Count += 1
        End If
        N += 1
    Wend
    ptrStr[N-1] = 0
    Print " in FB: Count: ";Count
    Print " in FB: ptrString  after: ";*Cast(ZString ptr, ptrStr)
    function = ptrStr  'Cast(ZString ptr, ptrStr)
End Function

' ''RQEXPORT function SinglePlusDouble_1:Double (sng1:Single, dbl1:Double:ByRef)
Function SinglePlusDouble_1 (sng1 As Single ptr, ByRef dbl1 As Double, a3 As Integer, a4 As Integer) As Double
    Print " in FB:  sng1: ";sng1
    Print " in FB:  dbl1: ";dbl1
    dbl1 = dbl1 + sng1[0]
    Print " in FB:  Double Out: ";dbl1
    Function = dbl1
End function

'
' ''RQEXPORT function SinglePlusDouble_2:Single (sng1:Single:ByRef, dbl1:Double)
Function SinglePlusDouble_2 (ByRef sng1 As Single, dbl1 As Double ptr, a3 As Integer, a4 As Integer) As Single
    Print " in FB:  sng1: ";sng1
    Print " in FB:  dbl1: ";dbl1
    sng1 = dbl1[0] + sng1
    Print " in FB:  Single Out: ";sng1
    Function = sng1
End function

'
' ''RQEXPORT function SinglePlusDouble_3:Single (sng1:Single:ByRef, dbl1:Double:ByRef)
Function SinglePlusDouble_3 (ByRef sng1 As Single, ByRef dbl1 As Double, a3 As Integer, a4 As Integer) As Single
    Print " in FB:  sng1: ";sng1
    Print " in FB:  dbl1: ";dbl1
    sng1 = dbl1 + sng1
    Print " in FB:  Single Out: ";sng1
    Function = sng1
End function

'
' ''RQEXPORT function SinglePlusDouble_4:Double (sng1:Single, dbl1:Double)
Function SinglePlusDouble_4 (sng1 As Single ptr, dbl1 As Double ptr, a3 As Integer, a4 As Integer) As Double
    Print " in FB:  sng1: ";sng1
    Print " in FB:  dbl1: ";dbl1
    dbl1[0] = dbl1[0] + sng1[0]
    Print " in FB:  Single Out: ";dbl1[0]
    Function = dbl1[0]
End function
'
