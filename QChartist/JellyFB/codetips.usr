; JellyFish Pro Custom CodeTips file.
; This file is read by JPro when the program starts. When you press the '(' open parenthesis
; key after typing any one Of these commands, you will get a CodeTip. A CodeTip will display
; the parameters for the function call. Many of the FreeBasic functions are already built
; into JPro and do *Not* need to be added in this file.
;
; To add additional custom CodeTips simply add each to a separate new line in this file. Make
; sure that you type the function or sub name in Mixed Case.
;
SUCCEEDED(BYVAL nStatus AS LONG)
FAILED(BYVAL nStatus AS LONG)
IS_ERROR(BYVAL nStatus AS DWORD)
HRESULT_CODE(BYVAL hr AS LONG)
SCODE_CODE(BYVAL sc AS LONG)
HRESULT_FACILITY(BYVAL hr AS LONG)
SCODE_FACILITY(BYVAL hr AS LONG)
HRESULT_SEVERITY(BYVAL nStatus AS LONG)
SCODE_SEVERITY(BYVAL nStatus AS LONG)
MAKE_HRESULT(BYVAL sev AS DWORD, BYVAL fac AS DWORD, BYVAL code AS DWORD)
MAKE_SCODE(BYVAL sev AS DWORD, BYVAL fac AS DWORD, BYVAL code AS DWORD)
HRESULT_FROM_WIN32(BYVAL x AS LONG)
HRESULT_FROM_NT(BYVAL x AS LONG)
HRESULT_FROM_SETUPAPI(BYVAL x AS LONG)
MAKEROP4(BYVAL dFore AS DWORD, BYVAL dBack AS DWORD)
GetKValue(BYVAL dwCMYK AS DWORD)
GetYValue(BYVAL dwCMYK AS DWORD)
GetMValue(BYVAL dwCMYK AS DWORD)
GetCValue(BYVAL dwCMYK AS DWORD)
CMYK(BYVAL c AS BYTE, BYVAL m AS BYTE, BYVAL y AS BYTE, BYVAL k AS BYTE)
PALETTERGB(BYVAL bRed AS BYTE, BYVAL bGreen AS BYTE, BYVAL bBlue AS BYTE)
PALETTEINDEX(BYVAL ix AS WORD)
GetRValue(BYVAL drgb AS DWORD)
GetGValue(BYVAL drgb AS DWORD)
GetBValue(BYVAL drgb AS DWORD)
AddAtom(lpString AS ASCIIZ)
AllocConsole()
BackupRead(BYVAL hFile AS DWORD, lpBuffer AS BYTE, BYVAL nNumberOfBytesToRead AS LONG, lpNumberOfBytesRead AS LONG, BYVAL bAbort AS LONG, BYVAL bProcessSecurity AS LONG, lpContext AS ANY)
BackupSeek(BYVAL hFile AS DWORD, BYVAL dwLowBytesToSeek AS DWORD, BYVAL dwHighBytesToSeek AS DWORD, lpdwLowByteSeeked AS DWORD, lpdwHighByteSeeked AS LONG, lpContext AS LONG)
BackupWrite(BYVAL hFile AS DWORD, lpBuffer AS BYTE, BYVAL nNumberOfBytesToWrite AS LONG, lpNumberOfBytesWritten AS LONG, BYVAL bAbort AS LONG, BYVAL bProcessSecurity AS LONG, lpContext AS LONG)
WinBeep(BYVAL dwFreq AS DWORD, BYVAL dwDuration AS DWORD)
BeginUpdateResource(pFileName AS ASCIIZ, BYVAL bDeleteExistingResources AS LONG)
BuildCommDCB(lpDef AS ASCIIZ, lpDCB AS DCB)
BuildCommDCBAndTimeouts(lpDef AS ASCIIZ, lpDCB AS DCB, lpCommTimeouts AS COMMTIMEOUTS)
CallNamedPipe(lpNamedPipeName AS ASCIIZ, lpInBuffer AS ANY, BYVAL nInBufferSize AS LONG, lpOutBuffer AS ANY, BYVAL nOutBufferSize AS LONG, lpBytesRead AS LONG, BYVAL nTimeOut AS LONG)
CancelWaitableTimer(BYVAL hTimer AS DWORD)
ClearCommBreak(BYVAL nCid AS LONG)
ClearCommError(BYVAL hFile AS DWORD, lpErrors AS LONG, lpStat AS COMSTAT)
CloseHandle(BYVAL hObject AS DWORD)
CommConfigDialog(lpszName AS ASCIIZ, BYVAL hWnd AS DWORD, lpCC AS COMMCONFIG)
CompareFileTime(lpFileTime1 AS FILETIME, lpFileTime2 AS FILETIME)
CompareString(BYVAL Locale AS LONG, BYVAL dwCmpFlags AS DWORD, lpString1 AS ASCIIZ, BYVAL cchCount1 AS LONG, lpString2 AS ASCIIZ, BYVAL cchCount2 AS LONG)
ConnectNamedPipe(BYVAL hNamedPipe AS DWORD, lpOverlapped AS OVERLAPPED)
ContinueDebugEvent(BYVAL dwProcessId AS DWORD, BYVAL dwThreadId AS DWORD, BYVAL dwContinueStatus AS DWORD)
ConvertDefaultLocale(BYVAL Locale AS LONG)
ConvertThreadToFiber(BYVAL lpParameter AS DWORD)
CopyFile(lpExistingFileName AS ASCIIZ, lpNewFileName AS ASCIIZ, BYVAL bFailIfExists AS LONG)
CopyFileEx(lpExistingFileName AS ASCIIZ, lpNewFileName AS ASCIIZ, BYVAL lpProgressRoutine AS DWORD, BYVAL lpData AS DWORD, pbCancel AS LONG, BYVAL dwCopyFlags AS DWORD)
CreateConsoleScreenBuffer(BYVAL dwDesiredAccess AS DWORD, BYVAL dwShareMode AS DWORD, lpSecurityAttributes AS SECURITY_ATTRIBUTES, BYVAL dwFlags AS DWORD, BYVAL lpScreenBufferData AS LONG)
CreateDirectory(lpPathName AS ASCIIZ, lpSecurityAttributes AS SECURITY_ATTRIBUTES)
CreateDirectoryEx(lpTemplateDirectory AS ASCIIZ, lpNewDirectory AS ASCIIZ, lpSecurityAttributes AS SECURITY_ATTRIBUTES)
CreateEvent(lpEventAttributes AS SECURITY_ATTRIBUTES, BYVAL bManualReset AS LONG, BYVAL bInitialState AS LONG, lpName AS ASCIIZ)
CreateFiber(BYVAL dwStackSize AS DWORD, BYVAL lpStartAddress AS DWORD, BYVAL lpParameter AS DWORD)
CreateFile(lpFileName AS ASCIIZ, BYVAL dwDesiredAccess AS DWORD, BYVAL dwShareMode AS DWORD, lpSecurityAttributes AS SECURITY_ATTRIBUTES, BYVAL dwCreationDisposition AS DWORD, BYVAL dwFlagsAndAttributes AS DWORD, BYVAL hTemplateFile AS DWORD)
CreateFileMapping(BYVAL hFile AS DWORD, lpFileMappigAttributes AS SECURITY_ATTRIBUTES, BYVAL flProtect AS LONG, BYVAL dwMaximumSizeHigh AS DWORD, BYVAL dwMaximumSizeLow AS DWORD, lpName AS ASCIIZ)
CreateHardLink(lpFileName AS ASCIIZ, lpExistingFileName AS ASCIIZ, lpSecurity_Attributes AS SECURITY_ATTRIBUTES)
CreateIoCompletionPort(BYVAL FileHandle AS DWORD, BYVAL ExistingCompletionPort AS DWORD, BYVAL CompletionKey AS DWORD, BYVAL NumberOfConcurrentThreads AS DWORD)
CreateMailslot(lpName AS ASCIIZ, BYVAL nMaxMessageSize AS LONG, BYVAL lReadTimeout AS LONG, lpSecurityAttributes AS SECURITY_ATTRIBUTES)
CreateMutex(lpMutexAttributes AS SECURITY_ATTRIBUTES, BYVAL bInitialOwner AS LONG, lpName AS ASCIIZ)
CreateNamedPipe(lpName AS ASCIIZ, BYVAL dwOpenMode AS DWORD, BYVAL dwPipeMode AS DWORD, BYVAL nMaxInstances AS DWORD, BYVAL nOutBufferSize AS DWORD, BYVAL nInBufferSize AS DWORD, BYVAL nDefaultTimeOut AS DWORD, lpSecurityAttributes AS SECURITY_ATTRIBUTES)
CreatePipe(phReadPipe AS DWORD, phWritePipe AS DWORD, lpPipeAttributes AS SECURITY_ATTRIBUTES, BYVAL nSize AS DWORD)
CreateProcess(lpApplicationName AS ASCIIZ, lpCommandLine AS ASCIIZ, lpProcessAttributes AS SECURITY_ATTRIBUTES, lpThreadAttributes AS SECURITY_ATTRIBUTES, BYVAL bInheritHandles AS LONG, BYVAL dwCreationFlags AS DWORD, lpEnvironment AS ANY, lpCurrentDirectory AS ASCIIZ, lpStartupInfo AS STARTUPINFO, lpProcessInformation AS PROCESS_INFORMATION)
CreateRemoteThread(BYVAL hProcess AS DWORD, lpThreadAttributes AS SECURITY_ATTRIBUTES, BYVAL dwStackSize AS DWORD, BYVAL lpStartAddress AS DWORD, lpParameter AS ANY, BYVAL dwCreationFlags AS DWORD, lpThreadId AS DWORD)
CreateSemaphore(lpSemaphoreAttributes AS SECURITY_ATTRIBUTES, BYVAL lInitialCount AS LONG, BYVAL lMaximumCount AS LONG, lpName AS ASCIIZ)
CreateTapePartition(BYVAL hDevice AS DWORD, BYVAL dwPartitionMethod AS DWORD, BYVAL dwCount AS DWORD, BYVAL dwSize AS DWORD)
CreateThread(lpThreadAttributes AS SECURITY_ATTRIBUTES, BYVAL dwStackSize AS DWORD, BYVAL StartAddress AS DWORD, BYVAL lpParameter AS DWORD, BYVAL dwCreationFlags AS DWORD, lpThreadId AS DWORD)
CreateWaitableTimer(lpTimerAttributes AS SECURITY_ATTRIBUTES, BYVAL bManualReset AS LONG, lpTimerName AS ASCIIZ)
DebugActiveProcess(BYVAL dwProcessId AS DWORD)
DebugBreak()
DefineDosDevice(BYVAL dwFlags AS DWORD, lpDeviceName AS ASCIIZ, lpTargetPath AS ASCIIZ)
DeleteAtom(BYVAL nAtom AS WORD)
DeleteCriticalSection(lpCriticalSection AS CRITICAL_SECTION)
DeleteFiber(BYVAL lpFiber AS DWORD)
DeleteFile(lpFileName AS ASCIIZ)
DeviceIoControl(BYVAL hDevice AS DWORD, BYVAL dwIoControlCode AS DWORD, lpInBuffer AS ANY, BYVAL nInBufferSize AS LONG, lpOutBuffer AS ANY, BYVAL nOutBufferSize AS LONG, lpBytesReturned AS LONG, lpOverlapped AS OVERLAPPED)
DisableThreadLibraryCalls(BYVAL hLibModule AS DWORD)
DisconnectNamedPipe(BYVAL hNamedPipe AS DWORD)
DosDateTimeToFileTime(BYVAL wFatDate AS WORD, BYVAL wFatTime AS WORD, lpFileTime AS FILETIME)
DuplicateHandle(BYVAL hSourceProcessHandle AS DWORD, BYVAL hSourceHandle AS DWORD, BYVAL hTargetProcessHandle AS DWORD, lpTargetHandle AS DWORD, BYVAL dwDesiredAccess AS DWORD, BYVAL bInheritHandle AS LONG, BYVAL dwOptions AS DWORD)
EndUpdateResource(BYVAL hUpdate AS DWORD, BYVAL fDiscard AS LONG)
EnterCriticalSection(lpCriticalSection AS CRITICAL_SECTION)
EnumCalendarInfo(BYVAL lpCalInfoEnumProc AS DWORD, BYVAL Locale AS LONG, BYVAL Calendar AS DWORD, BYVAL CalType AS DWORD)
EnumCalendarInfoEx(BYVAL lpCalInfoEnumProc AS DWORD, BYVAL Locale AS LONG, BYVAL Calendar AS DWORD, BYVAL CalType AS DWORD)
EnumDateFormats(BYVAL lpDateFmtEnumProc AS DWORD, BYVAL Locale AS LONG, BYVAL dwFlags AS DWORD)
EnumDateFormatsEx(BYVAL lpDateFmtEnumProc AS DWORD, BYVAL Locale AS LONG, BYVAL dwFlags AS DWORD)
EnumResourceLanguages(BYVAL hModule AS DWORD, lpType AS ASCIIZ, lpName AS ASCIIZ, BYVAL lpEnumFunc AS LONG, BYVAL lParam AS LONG)
EnumResourceNames(BYVAL hModule AS DWORD, lpType AS ASCIIZ, BYVAL lpEnumFunc AS LONG, BYVAL lParam AS LONG)
EnumResourceTypes(BYVAL hModule AS DWORD, BYVAL lpEnumFunc AS LONG, BYVAL lParam AS LONG)
EnumSystemCodePages(BYVAL lpCodePageEnumProc AS DWORD, BYVAL dwFlags AS DWORD)
EnumSystemGeoID(BYVAL GeoClass AS DWORD, BYVAL ParentGeoId AS LONG, BYVAL lpGeoEnumProc AS DWORD)
EnumSystemLanguageGroups(BYVAL lpLanguageGroupEnumProc AS DWORD, BYVAL dwFlags AS DWORD, BYVAL lParam AS LONG)
EnumSystemLocales(BYVAL lpLocaleEnumProc AS DWORD, BYVAL dwFlags AS DWORD)
EnumUILanguages(BYVAL lpUILanguageEnumProc AS DWORD, BYVAL dwFlags AS DWORD, BYVAL lParam AS LONG)
EnumTimeFormats(BYVAL lpTimeFmtEnumProc AS LONG, BYVAL Locale AS LONG, BYVAL dwFlags AS DWORD)
EraseTape(BYVAL hDevice AS DWORD, BYVAL dwEraseType AS DWORD, BYVAL bimmediate AS LONG)
EscapeCommFunction(BYVAL nCid AS LONG, BYVAL nFunc AS LONG)
ExitProcess(BYVAL uExitCode AS DWORD)
ExitThread(BYVAL dwExitCode AS DWORD)
ExpandEnvironmentStrings(lpSrc AS ASCIIZ, lpDst AS ASCIIZ, BYVAL nSize AS DWORD)
FatalAppExit(BYVAL uAction AS DWORD, lpMessageText AS ASCIIZ)
FatalExit(BYVAL code AS LONG)
FileTimeToDosDateTime(lpFileTime AS FILETIME, lpFatDate AS WORD, lpFatTime AS WORD)
FileTimeToLocalFileTime(lpFileTime AS FILETIME, lpLocalFileTime AS FILETIME)
FileTimeToSystemTime(lpFileTime AS FILETIME, lpSystemTime AS SYSTEMTIME)
FillConsoleOutputAttribute(BYVAL hConsoleOutput AS DWORD, BYVAL dwAttribute AS DWORD, BYVAL nLength AS DWORD, BYVAL dwWriteCoord AS DWORD, lpNumberOfAttrsWritten AS DWORD)
FillConsoleOutputCharacter(BYVAL hConsoleOutput AS DWORD, BYVAL bCharacter AS BYTE, BYVAL nLength AS DWORD, BYVAL dwWriteCoord AS DWORD, lpNumberOfCharsWritten AS DWORD)
FindAtom(lpString AS ASCIIZ)
FindClose(BYVAL hFindFile AS DWORD)
FindCloseChangeNotification(BYVAL hChangeHandle AS DWORD)
FindFirstChangeNotification(lpPathName AS ASCIIZ, BYVAL bWatchSubtree AS LONG, BYVAL dwNotifyFilter AS DWORD)
FindFirstFile(lpFileName AS ASCIIZ, lpFindFileData AS WIN32_FIND_DATA)
FindFirstFileEx(lpFileName AS ASCIIZ, BYVAL fInfoLevelId AS LONG, BYVAL lpFindFileData AS DWORD, BYVAL fSearchOp AS LONG, BYVAL lpSearchFilter AS DWORD, BYVAL dwAdditionalFlags AS DWORD)
FindNextChangeNotification(BYVAL hChangeHandle AS DWORD)
FindNextFile(BYVAL hFindFile AS DWORD, lpFindFileData AS WIN32_FIND_DATA)
FindResource(BYVAL hInstance AS DWORD, lpName AS ASCIIZ, lpType AS ASCIIZ)
FindResourceEx(BYVAL hModule AS DWORD, lpType AS ASCIIZ, lpName AS ASCIIZ, BYVAL wLanguage AS WORD)
FlushConsoleInputBuffer(BYVAL hConsoleInput AS DWORD)
FlushFileBuffers(BYVAL hFile AS DWORD)
FlushInstructionCache(BYVAL hProcess AS DWORD, lpBaseAddress AS ANY, BYVAL dwSize AS DWORD)
FlushViewOfFile(lpBaseAddress AS ANY, BYVAL dwNumberOfBytesToFlush AS DWORD)
FoldString(BYVAL dwMapFlags AS DWORD, lpSrcStr AS ASCIIZ, BYVAL cchSrc AS LONG, lpDestStr AS ASCIIZ, BYVAL cchDest AS LONG)
FormatMessage(BYVAL dwFlags AS DWORD, lpSource AS ANY, BYVAL dwMessageId AS DWORD, BYVAL dwLanguageId AS DWORD, lpBuffer AS ASCIIZ, BYVAL nSize AS DWORD, Arguments AS ANY)
FreeConsole()
FreeEnvironmentStrings(lpsz AS ASCIIZ)
FreeLibrary(BYVAL hLibModule AS DWORD)
FreeLibraryAndExitThread(BYVAL hLibModule AS DWORD, BYVAL dwExitCode AS DWORD)
FreeResource(BYVAL hResData AS DWORD)
GenerateConsoleCtrlEvent(BYVAL dwCtrlEvent AS DWORD, BYVAL dwProcessGroupId AS DWORD)
GetACP()
GetAtomName(BYVAL nAtom AS WORD, lpBuffer AS ASCIIZ, BYVAL nSize AS DWORD)
GetBinaryType(lpApplicationName AS ASCIIZ, lpBinaryType AS LONG)
GetCalendarInfo(BYVAL Locale AS LONG, BYVAL Calendar AS DWORD, BYVAL CalType AS DWORD, lpCalData AS ASCIIZ, BYVAL cchData AS LONG, lpValue AS DWORD)
GetCPInfo(BYVAL CodePage AS DWORD, lpCPInfo AS CPINFO)
GetCPInfoEx(BYVAL CodePage AS DWORD, BYVAL dwFlags AS DWORD, lpCPInfo AS CPINFOEX)
GetCommConfig(BYVAL hCommDev AS DWORD, lpCC AS COMMCONFIG, lpdwSize AS DWORD)
GetCommMask(BYVAL hFile AS DWORD, lpEvtMask AS LONG)
GetCommModemStatus(BYVAL hFile AS DWORD, lpModemStat AS LONG)
GetCommProperties(BYVAL hFile AS DWORD, lpCommProp AS ANY)
GetCommState(BYVAL nCid AS LONG, lpDCB AS DCB)
GetCommTimeouts(BYVAL hFile AS DWORD, lpCommTimeouts AS COMMTIMEOUTS)
GetCommandLine()
GetCompressedFileSize(lpFileName AS ASCIIZ, lpFileSizeHigh AS LONG)
GetComputerName(lpBuffer AS ASCIIZ, nSize AS DWORD)
GetConsoleCP()
GetConsoleCursorInfo(BYVAL hConsoleOutput AS DWORD, lpConsoleCursorInfo AS CONSOLE_CURSOR_INFO)
GetConsoleMode(BYVAL hConsoleHandle AS DWORD, lpMode AS DWORD)
GetConsoleOutputCP()
GetConsoleScreenBufferInfo(BYVAL hConsoleOutput AS DWORD, lpConsoleScreenBufferInfo AS CONSOLE_SCREEN_BUFFER_INFO)
GetConsoleTitle(lpConsoleTitle AS ASCIIZ, BYVAL nSize AS DWORD)
GetCurrencyFormat(BYVAL Locale AS LONG, BYVAL dwFlags AS DWORD, lpValue AS ASCIIZ, lpFormat AS CURRENCYFMT, lpCurrencyStr AS ASCIIZ, BYVAL cchCurrency AS LONG)
GetCurrentDirectory(BYVAL nBufferLength AS LONG, lpBuffer AS ASCIIZ)
GetCurrentProcess()
GetCurrentProcessId()
GetCurrentThread()
GetCurrentThreadId()
GetDateFormat(BYVAL Locale AS LONG, BYVAL dwFlags AS DWORD, lpDate AS SYSTEMTIME, lpFormat AS ASCIIZ, lpDateStr AS ASCIIZ, BYVAL cchDate AS LONG)
GetDefaultCommConfig(lpszName AS ASCIIZ, lpCC AS COMMCONFIG, lpdwSize AS DWORD)
GetDiskFreeSpace(lpRootPathName AS ASCIIZ, lpSectorsPerCluster AS DWORD, lpBytesPerSector AS DWORD, lpNumberOfFreeClusters AS DWORD, lpTotalNumberOfClusters AS DWORD)
GetDiskFreeSpaceEx(lpPathName AS ASCIIZ, lpFreeBytesAvailableToCaller AS QUAD, lpTotalNumberOfBytes AS QUAD, lpTotalNumberOfFreeBytes AS QUAD)
GetDriveType(nDrive AS ASCIIZ)
GetEnvironmentStrings()
GetEnvironmentVariable(lpName AS ASCIIZ, lpBuffer AS ASCIIZ, BYVAL nSize AS DWORD)
GetExitCodeProcess(BYVAL hProcess AS DWORD, lpExitCode AS LONG)
GetExitCodeThread(BYVAL hThread AS DWORD, lpExitCode AS LONG)
GetFileAttributes(lpFileName AS ASCIIZ)
GetFileAttributesEx(lpFileName AS ASCIIZ, BYVAL fInfoLevelId AS LONG, lpFileInformation AS ANY)
GetFileInformationByHandle(BYVAL hFile AS DWORD, lpFileInformation AS BY_HANDLE_FILE_INFORMATION)
GetFileSize(BYVAL hFile AS DWORD, lpFileSizeHigh AS LONG)
GetFileSizeEx(BYVAL hFile AS DWORD, lpFileSizeHigh AS QUAD)
GetFileTime(BYVAL hFile AS DWORD, lpCreationTime AS FILETIME, lpLastAccessTime AS FILETIME, lpLastWriteTime AS FILETIME)
GetFileType(BYVAL hFile AS DWORD)
GetFullPathName(lpFileName AS ASCIIZ, BYVAL nBufferLength AS DWORD, lpBuffer AS ASCIIZ, lpFilePart AS ANY)
GetGeoInfo(BYVAL Location AS LONG, BYVAL GeoType AS DWORD, lpGeoData AS ASCIIZ, BYVAL cchData AS LONG, BYVAL LangId AS LONG)
GetHandleInformation(BYVAL hObject AS DWORD, lpdwFlags AS DWORD)
GetLargestConsoleWindowSize(BYVAL hConsoleOutput AS DWORD)
GetLastError()
GetLocaleInfo(BYVAL Locale AS LONG, BYVAL LCType AS LONG, lpLCData AS ASCIIZ, BYVAL cchData AS LONG)
GetLocalTime(lpSystemTime AS SYSTEMTIME)
GetLogicalDriveStrings(BYVAL nBufferLength AS DWORD, lpBuffer AS ANY)
GetLogicalDrives()
GetLongPathName(lpszShortPath AS ASCIIZ, lpszLongPath AS ASCIIZ, BYVAL cchBuffer AS DWORD)
GetMailslotInfo(BYVAL hMailSlot AS DWORD, lpMaxMessageSize AS LONG, lpNextSize AS LONG, lpMessageCount AS LONG, lpReadTimeout AS LONG)
GetModuleFileName(BYVAL hModule AS DWORD, lpFileName AS ASCIIZ, BYVAL nSize AS DWORD)
GetModuleHandle(lpModuleName AS ASCIIZ)
GethInst()
GetNamedPipeHandleState(BYVAL hNamedPipe AS DWORD, lpState AS DWORD, lpCurInstances AS DWORD, lpMaxCollectionCount AS DWORD, lpCollectDataTimeout AS DWORD, lpUserName AS ASCIIZ, BYVAL nMaxUserNameSize AS DWORD)
GetNamedPipeInfo(BYVAL hNamedPipe AS DWORD, lpFlags AS LONG, lpOutBufferSize AS LONG, lpInBufferSize AS LONG, lpMaxInstances AS LONG)
GetNumberFormat(BYVAL Locale AS LONG, BYVAL dwFlags AS DWORD, lpValue AS ASCIIZ, lpFormat AS NUMBERFMT, lpNumberStr AS ASCIIZ, BYVAL cchNumber AS LONG)
GetNumberOfConsoleInputEvents(BYVAL hConsoleInput AS DWORD, lpNumberOfEvents AS LONG)
GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons AS LONG)
GetOEMCP()
GetOverlappedResult(BYVAL hFile AS DWORD, lpOverlapped AS OVERLAPPED, lpNumberOfBytesTransferred AS LONG, BYVAL bWait AS LONG)
GetPriorityClass(BYVAL hProcess AS DWORD)
GetPrivateProfileInt(lpApplicationName AS ASCIIZ, lpKeyName AS ASCIIZ, BYVAL nDefault AS LONG, lpFileName AS ASCIIZ)
GetPrivateProfileSection(lpAppName AS ASCIIZ, lpReturnedString AS ASCIIZ, BYVAL nSize AS DWORD, lpFileName AS ASCIIZ)
GetPrivateProfileSectionNames(lpszReturnBuffer AS ASCIIZ, BYVAL nSize AS DWORD, lpFileName AS ASCIIZ)
GetPrivateProfileString(lpApplicationName AS ASCIIZ, lpKeyName AS ASCIIZ, lpDefault AS ASCIIZ, lpReturnedString AS ASCIIZ, BYVAL nSize AS DWORD, lpFileName AS ASCIIZ)
GetPrivateProfileStruct(lpApplicationName AS ASCIIZ, lpKeyName AS ASCIIZ, lpStruct AS ANY, BYVAL nSize AS DWORD, lpFileName AS ASCIIZ)
GetProcAddress(BYVAL hModule AS DWORD, lpProcName AS ASCIIZ)
GetProcessAffinityMask(BYVAL hProcess AS DWORD, lpProcessAffinityMask AS DWORD, lpSystemAffinityMask AS DWORD)
GetProcessHeap()
GetProcessHeaps(BYVAL NumberOfHeaps AS LONG, ProcessHeaps AS LONG)
GetProcessPriorityBoost(BYVAL hProcess AS DWORD, pDisablePriorityBoost AS LONG)
GetProcessShutdownParameters(lpdwLevel AS DWORD, lpdwFlags AS DWORD)
GetProcessTimes(BYVAL hProcess AS DWORD, lpCreationTime AS FILETIME, lpExitTime AS FILETIME, lpKernelTime AS FILETIME, lpUserTime AS FILETIME)
GetProcessVersion(BYVAL hProcess AS DWORD)
GetProcessWorkingSetSize(BYVAL hProcess AS DWORD, lpMinimumWorkingSetSize AS LONG, lpMaximumWorkingSetSize AS LONG)
GetProfileInt(lpAppName AS ASCIIZ, lpKeyName AS ASCIIZ, BYVAL nDefault AS LONG)
GetProfileSection(lpAppName AS ASCIIZ, lpReturnedString AS ASCIIZ, BYVAL nSize AS DWORD)
GetProfileString(lpAppName AS ASCIIZ, lpKeyName AS ASCIIZ, lpDefault AS ASCIIZ, lpReturnedString AS ASCIIZ, BYVAL nSize AS DWORD)
GetQueuedCompletionStatus(BYVAL CompletionPort AS LONG, lpNumberOfBytesTransferred AS LONG, lpCompletionKey AS LONG, lpOverlapped AS LONG, BYVAL dwMilliseconds AS DWORD)
GetShortPathName(lpszLongPath AS ASCIIZ, lpszShortPath AS ASCIIZ, BYVAL cchBuffer AS LONG)
GetStartupInfo(lpStartupInfo AS STARTUPINFO)
GetStdHandle(BYVAL nStdHandle AS DWORD)
GetStringTypeA(BYVAL lcid AS DWORD, BYVAL dwInfoType AS DWORD, lpSrcStr AS ASCIIZ, BYVAL cchSrc AS LONG, lpCharType AS WORD)
GetStringTypeEx(BYVAL Locale AS LONG, BYVAL dwInfoType AS DWORD, lpSrcStr AS ASCIIZ, BYVAL cchSrc AS LONG, lpCharType AS WORD)
GetStringTypeW(BYVAL dwInfoType AS DWORD, lpSrcStr AS ASCIIZ, BYVAL cchSrc AS LONG, lpCharType AS WORD)
GetSystemDefaultLCID()
GetSystemDefaultLangID()
GetSystemDefaultUILanguage()
GetSystemDirectory(lpBuffer AS ASCIIZ, BYVAL nSize AS DWORD)
GetSystemInfo(lpSystemInfo AS SYSTEM_INFO)
GetSystemPowerStatus(lpSystemPowerStatus AS SYSTEM_POWER_STATUS)
GetSystemTime(lpSystemTime AS SYSTEMTIME)
GetSystemTimeAdjustment(lpTimeAdjustment AS LONG, lpTimeIncrement AS LONG, lpTimeAdjustmentDisabled AS LONG)
GetSystemTimeAsFileTime(lpFileTime AS FILETIME)
GetTapeParameters(BYVAL hDevice AS DWORD, BYVAL dwOperation AS DWORD, lpdwSize AS DWORD, lpTapeInformation AS ANY)
GetTapePosition(BYVAL hDevice AS DWORD, BYVAL dwPositionType AS DWORD, lpdwPartition AS DWORD, lpdwOffsetLow AS DWORD, lpdwOffsetHigh AS DWORD)
GetTapeStatus(BYVAL hDevice AS DWORD)
GetTempFileName(lpszPath AS ASCIIZ, lpPrefixString AS ASCIIZ, BYVAL dwUnique AS DWORD, lpTempFileName AS ASCIIZ)
GetTempPath(BYVAL nBufferLength AS LONG, lpBuffer AS ASCIIZ)
GetThreadContext(BYVAL hThread AS DWORD, lpContext AS CONTEXT)
GetThreadLocale()
GetThreadPriority(BYVAL hThread AS DWORD)
GetThreadPriorityBoost(BYVAL hThread AS DWORD, pDisablePriorityBoost AS LONG)
GetThreadSelectorEntry(BYVAL hThread AS DWORD, BYVAL dwSelector AS DWORD, lpSelectorEntry AS LDT_ENTRY)
GetThreadTimes(BYVAL hThread AS DWORD, lpCreationTime AS FILETIME, lpExitTime AS FILETIME, lpKernelTime AS FILETIME, lpUserTime AS FILETIME)
GetTickCount()
GetTimeFormat(BYVAL Locale AS LONG, BYVAL dwFlags AS DWORD, lpTime AS SYSTEMTIME, lpFormat AS ASCIIZ, lpTimeStr AS ASCIIZ, BYVAL cchTime AS LONG)
GetTimeZoneInformation(lpTimeZoneInformation AS TIME_ZONE_INFORMATION)
GetUserDefaultLCID()
GetUserDefaultLangID()
GetUserDefaultUILanguage()
GetUserGeoID(BYVAL GeoClass AS DWORD)
GetVersion()
GetVersionEx(lpVersionInformation AS ANY)
GetVolumeInformation(lpRootPathName AS ASCIIZ, lpVolumeNameBuffer AS ASCIIZ, BYVAL nVolumeNameSize AS DWORD, lpVolumeSerialNumber AS DWORD, lpMaximumComponentLength AS DWORD, lpFileSystemFlags AS DWORD, lpFileSystemNameBuffer AS ASCIIZ, BYVAL nFileSystemNameSize AS DWORD)
GetVolumeNameForVolumeMountPoint(lpszVolumeMountPoint AS ASCIIZ, lpszVolumeName AS ASCIIZ, BYVAL cchBufferLength AS DWORD)
GetVolumePathName(lpszFileName AS ASCIIZ, lpszVolumePathName AS ASCIIZ, BYVAL cchBufferLength AS DWORD)
GetVolumePathNamesForVolumeName(lpszVolumeName AS ASCIIZ, lpszVolumePathNames AS ANY, BYVAL cchBufferLength AS DWORD, lpcchReturnLength AS DWORD)
GetWindowsDirectory(lpBuffer AS ASCIIZ, BYVAL nSize AS DWORD)
GlobalAddAtom(lpString AS ASCIIZ)
GlobalAlloc(BYVAL wFlags AS DWORD, BYVAL dwBytes AS DWORD)
GlobalCompact(BYVAL dwMinFree AS DWORD)
GlobalDeleteAtom(BYVAL nAtom AS WORD)
GlobalFindAtom(lpString AS ASCIIZ)
GlobalFix(BYVAL hMem AS DWORD)
GlobalFlags(BYVAL hMem AS DWORD)
GlobalFree(BYVAL hMem AS DWORD)
GlobalGetAtomName(BYVAL nAtom AS WORD, lpBuffer AS ASCIIZ, BYVAL nSize AS DWORD)
GlobalHandle(pMem AS ANY)
GlobalLock(BYVAL hMem AS DWORD)
GlobalMemoryStatus(lpBuffer AS MEMORYSTATUS)
GlobalReAlloc(BYVAL hMem AS DWORD, BYVAL dwBytes AS DWORD, BYVAL uFlags AS DWORD)
GlobalMemoryStatusEx(lpBuffer AS MEMORYSTATUSEX)
GlobalSize(BYVAL hMem AS DWORD)
GlobalUnfix(BYVAL hMem AS DWORD)
GlobalUnlock(BYVAL hMem AS DWORD)
GlobalUnWire(BYVAL hMem AS DWORD)
GlobalWire(BYVAL hMem AS DWORD)
HeapAlloc(BYVAL hHeap AS DWORD, BYVAL dwFlags AS DWORD, BYVAL dwBytes AS DWORD)
HeapCompact(BYVAL hHeap AS DWORD, BYVAL dwFlags AS DWORD)
HeapCreate(BYVAL flOptions AS DWORD, BYVAL dwInitialSize AS DWORD, BYVAL dwMaximumSize AS DWORD)
HeapDestroy(BYVAL hHeap AS DWORD)
HeapFree(BYVAL hHeap AS DWORD, BYVAL dwFlags AS DWORD, BYVAL lpMem AS DWORD)
HeapLock(BYVAL hHeap AS DWORD)
HeapReAlloc(BYVAL hHeap AS DWORD, BYVAL dwFlags AS DWORD, BYVAL lpMem AS DWORD, BYVAL dwBytes AS DWORD)
HeapSize(BYVAL hHeap AS DWORD, BYVAL dwFlags AS DWORD, BYVAL lpMem AS DWORD)
HeapUnlock(BYVAL hHeap AS DWORD)
HeapValidate(BYVAL hHeap AS DWORD, BYVAL dwFlags AS DWORD, BYVAL lpMem AS DWORD)
InitAtomTable(BYVAL nSize AS DWORD)
InitializeCriticalSection(lpCriticalSection AS CRITICAL_SECTION)
InitializeCriticalSectionAndSpinCount(lpCriticalSection AS CRITICAL_SECTION, BYVAL dwSpinCount AS DWORD)
InterlockedDecrement(lpAddend AS LONG)
InterlockedExchange(xTarget AS LONG, BYVAL xValue AS LONG)
InterlockedIncrement(lpAddend AS LONG)
IsBadCodePtr(BYVAL lpfn AS DWORD)
IsBadHugeReadPtr(BYVAL lp AS DWORD, BYVAL ucb AS DWORD)
IsBadHugeWritePtr(BYVAL lp AS DWORD, BYVAL ucb AS DWORD)
IsBadReadPtr(BYVAL lp AS DWORD, BYVAL ucb AS DWORD)
IsBadStringPtr(lpsz AS ASCIIZ, BYVAL ucchMax AS DWORD)
IsBadWritePtr(BYVAL lp AS DWORD, BYVAL ucb AS DWORD)
IsDBCSLeadByte(BYVAL bTestChar AS BYTE)
IsDBCSLeadByteEx(BYVAL CodePage AS DWORD, BYVAL bTestChar AS BYTE)
IsDebuggerPresent()
IsValidCodePage(BYVAL CodePage AS DWORD)
IsValidLanguageGroup(BYVAL LanguageGroup AS DWORD, BYVAL dwFlags AS DWORD)
IsValidLocale(BYVAL Locale AS LONG, BYVAL dwFlags AS DWORD)
LCMapString(BYVAL Locale AS LONG, BYVAL dwMapFlags AS DWORD, lpSrcStr AS ASCIIZ, BYVAL cchSrc AS LONG, lpDestStr AS ASCIIZ, BYVAL cchDest AS LONG)
LeaveCriticalSection(lpCriticalSection AS CRITICAL_SECTION)
LoadLibrary(lpLibFileName AS ASCIIZ)
LoadLibraryEx(lpLibFileName AS ASCIIZ, BYVAL hFile AS DWORD, BYVAL dwFlags AS DWORD)
LoadModule(lpModuleName AS ASCIIZ, lpParameterBlock AS ANY)
LoadResource(BYVAL hInstance AS DWORD, BYVAL hResInfo AS DWORD)
LocalAlloc(BYVAL uFlags AS DWORD, BYVAL lBytes AS LONG)
LocalCompact(BYVAL uMinFree AS DWORD)
LocalFileTimeToFileTime(lpLocalFileTime AS FILETIME, lpFileTime AS FILETIME)
LocalFlags(BYVAL hMem AS DWORD)
LocalFree(BYVAL hMem AS DWORD)
LocalHandle(BYVAL pMem AS DWORD)
LocalLock(BYVAL hMem AS DWORD)
LocalReAlloc(BYVAL hMem AS DWORD, BYVAL lBytes AS LONG, BYVAL uFlags AS DWORD)
LocalShrink(BYVAL hMem AS DWORD, BYVAL cbNewSize AS LONG)
LocalSize(BYVAL hMem AS DWORD)
LocalUnlock(BYVAL hMem AS DWORD)
LockFile(BYVAL hFile AS DWORD, BYVAL dwFileOffsetLow AS DWORD, BYVAL dwFileOffsetHigh AS DWORD, BYVAL nNumberOfBytesToLockLow AS LONG, BYVAL nNumberOfBytesToLockHigh AS LONG)
LockFileEx(BYVAL hFile AS DWORD, BYVAL dwFlags AS DWORD, BYVAL dwReserved AS DWORD, BYVAL nNumberOfBytesToLockLow AS LONG, BYVAL nNumberOfBytesToLockHigh AS LONG, lpOverlapped AS OVERLAPPED)
LockResource(BYVAL hResData AS DWORD)
MapViewOfFile(BYVAL hFileMappingObject AS DWORD, BYVAL dwDesiredAccess AS DWORD, BYVAL dwFileOffsetHigh AS DWORD, BYVAL dwFileOffsetLow AS DWORD, BYVAL dwNumberOfBytesToMap AS DWORD)
MapViewOfFileEx(BYVAL hFileMappingObject AS DWORD, BYVAL dwDesiredAccess AS DWORD, BYVAL dwFileOffsetHigh AS DWORD, BYVAL dwFileOffsetLow AS DWORD, BYVAL dwNumberOfBytesToMap AS DWORD, lpBaseAddress AS DWORD)
MoveFile(lpExistingFileName AS ASCIIZ, lpNewFileName AS ASCIIZ)
MoveFileEx(lpExistingFileName AS ASCIIZ, lpNewFileName AS ASCIIZ, BYVAL dwFlags AS DWORD)
MoveFileWithProgress(lpExistingFileName AS ASCIIZ, lpNewFileName AS ASCIIZ, BYVAL lpProgressRoutine AS DWORD, BYVAL lpData AS BYTE PTR, BYVAL dwFlags AS DWORD)
MulDiv(BYVAL nNumber AS LONG, BYVAL nNumerator AS LONG, BYVAL nDenominator AS LONG)
MultiByteToWideChar(BYVAL CodePage AS DWORD, BYVAL dwFlags AS DWORD, lpMultiByteStr AS ASCIIZ, BYVAL cchMultiByte AS LONG, lpWideCharStr AS DWORD, BYVAL cchWideChar AS LONG)
ObjectOpenAuditAlarm(SubsystemName AS ASCIIZ, HandleId AS ANY, ObjectTypeName AS ASCIIZ, ObjectName AS ASCIIZ, pSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL ClientToken AS LONG, BYVAL DesiredAccess AS LONG, BYVAL GrantedAccess AS LONG, Privileges AS ANY, BYVAL ObjectCreation AS LONG, BYVAL AccessGranted AS LONG, BYVAL GenerateOnClose AS LONG)
OpenEvent(BYVAL dwDesiredAccess AS DWORD, BYVAL bInheritHandle AS LONG, lpName AS ASCIIZ)
OpenFile(lpFileName AS ASCIIZ, lpReOpenBuff AS OFSTRUCT, BYVAL uStyle AS DWORD)
OpenFileMapping(BYVAL dwDesiredAccess AS DWORD, BYVAL bInheritHandle AS LONG, lpName AS ASCIIZ)
OpenMutex(BYVAL dwDesiredAccess AS DWORD, BYVAL bInheritHandle AS LONG, lpName AS ASCIIZ)
OpenProcess(BYVAL dwDesiredAccess AS DWORD, BYVAL bInheritHandle AS LONG, BYVAL dwProcessId AS DWORD)
OpenSemaphore(BYVAL dwDesiredAccess AS DWORD, BYVAL bInheritHandle AS LONG, lpName AS ASCIIZ)
OpenThread(BYVAL dwDesiredAccess AS DWORD, BYVAL bInheritHandle AS DWORD, BYVAL dwThreadId AS DWORD)
OpenWaitableTimer(BYVAL dwDesiredAccess AS DWORD, BYVAL bInheritHandle AS LONG, lpTimerName AS ASCIIZ)
OutputDebugString(lpOutputString AS ASCIIZ)
PeekConsoleInput(BYVAL hConsoleInput AS DWORD, lpBuffer AS INPUT_RECORD, BYVAL nLength AS DWORD, lpNumberOfEventsWritten AS DWORD)
PeekNamedPipe(BYVAL hNamedPipe AS DWORD, lpBuffer AS ANY, BYVAL nBufferSize AS LONG, lpBytesRead AS LONG, lpTotalBytesAvail AS LONG, lpBytesLeftThisMessage AS LONG)
PrepareTape(BYVAL hDevice AS DWORD, BYVAL dwOperation AS DWORD, BYVAL bimmediate AS LONG)
ProcessIdToSessionId(BYVAL dwProcessId AS DWORD, pSessionId AS DWORD)
PulseEvent(BYVAL hEvent AS DWORD)
PurgeComm(BYVAL hFile AS DWORD, BYVAL dwFlags AS DWORD)
QueueUserAPC(BYVAL pfnAPC AS DWORD, BYVAL hThread AS DWORD, BYVAL dwData AS DWORD)
QueryDosDevice(lpDeviceName AS ASCIIZ, lpTargetPath AS ASCIIZ, BYVAL ucchMax AS DWORD)
QueryPerformanceCounter(lpPerformanceCount AS QUAD)
QueryPerformanceFrequency(lpFrequency AS QUAD)
RaiseException(BYVAL dwExceptionCode AS DWORD, BYVAL dwExceptionFlags AS DWORD, BYVAL nNumberOfArguments AS LONG, lpArguments AS LONG)
ReadConsole(BYVAL hConsoleInput AS DWORD, lpBuffer AS ANY, BYVAL nNumberOfCharsToRead AS LONG, lpNumberOfCharsRead AS LONG, lpReserved AS ANY)
ReadConsoleInput(BYVAL hConsoleInput AS DWORD, lpBuffer AS ANY, BYVAL nNumberOfCharsToRead AS LONG, lpNumberOfCharsRead AS LONG)
ReadConsoleOutput(BYVAL hConsoleOutput AS DWORD, BYVAL lpBuffer AS DWORD, BYVAL dwBufferSize AS DWORD, BYVAL dwBufferCoord AS DWORD, lpReadRegion AS SMALL_RECT)
ReadConsoleOutputAttribute(BYVAL hConsoleOutput AS DWORD, lpdwAttribute AS DWORD, BYVAL nLength AS LONG, BYVAL dwReadCoord AS DWORD, lpNumberOfAttrsRead AS LONG)
ReadConsoleOutputCharacter(BYVAL hConsoleOutput AS DWORD, szCharacter AS ASCIIZ, BYVAL nLength AS LONG, BYVAL dwReadCoord AS DWORD, lpNumberOfCharsRead AS LONG)
ReadFile(BYVAL hFile AS DWORD, lpBuffer AS ANY, BYVAL nNumberOfBytesToRead AS LONG, lpNumberOfBytesRead AS LONG, lpOverlapped AS OVERLAPPED)
ReadFileEx(BYVAL hFile AS DWORD, lpBuffer AS ANY, BYVAL nNumberOfBytesToRead AS LONG, lpOverlapped AS OVERLAPPED, BYVAL lpCompletionRoutine AS LONG)
ReadProcessMemory(BYVAL hProcess AS DWORD, BYVAL lpBaseAddress AS LONG, lpBuffer AS ANY, BYVAL nSize AS DWORD, lpNumberOfBytesWritten AS LONG)
ReleaseMutex(BYVAL hMutex AS DWORD)
ReleaseSemaphore(BYVAL hSemaphore AS DWORD, BYVAL lReleaseCount AS LONG, lpPreviousCount AS LONG)
RemoveDirectory(lpPathName AS ASCIIZ)
RequestWakeupLatency(BYVAL latency AS LONG)
ResetEvent(BYVAL hEvent AS DWORD)
ResumeThread(BYVAL hThread AS DWORD)
ScrollConsoleScreenBuffer(BYVAL hConsoleOutput AS DWORD, lpScrollRectangle AS SMALL_RECT, lpClipRectangle AS SMALL_RECT, BYVAL dwDestinationOrigin AS DWORD, lpFill AS CHAR_INFO)
SearchPath(lpPath AS ASCIIZ, lpFileName AS ASCIIZ, lpExtension AS ASCIIZ, BYVAL nBufferLength AS LONG, lpBuffer AS ASCIIZ, lpFilePart AS ASCIIZ)
SetCalendarInfo(BYVAL Locale AS LONG, BYVAL Calendar AS DWORD, BYVAL CalType AS DWORD, lpCalData AS ASCIIZ)
SetCommBreak(BYVAL nCid AS LONG)
SetCommConfig(BYVAL hCommDev AS DWORD, lpCC AS COMMCONFIG, BYVAL dwSize AS DWORD)
SetCommMask(BYVAL hFile AS DWORD, BYVAL dwEventMask AS DWORD)
SetCommState(BYVAL hCommDev AS DWORD, lpDCB AS DCB)
SetCommTimeouts(BYVAL hFile AS DWORD, lpCommTimeouts AS COMMTIMEOUTS)
SetComputerName(lpComputerName AS ASCIIZ)
SetConsoleActiveScreenBuffer(BYVAL hConsoleOutput AS DWORD)
SetConsoleCP(BYVAL dwCodePageID AS DWORD)
SetConsoleCtrlHandler(BYVAL HandlerRoutine AS DWORD, BYVAL nAdd AS LONG)
SetConsoleCursorInfo(BYVAL hConsoleOutput AS DWORD, lpConsoleCursorInfo AS CONSOLE_CURSOR_INFO)
SetConsoleCursorPosition(BYVAL hConsoleOutput AS DWORD, BYVAL dwCursorPosition AS DWORD)
SetConsoleMode(BYVAL hConsoleHandle AS DWORD, BYVAL dwMode AS DWORD)
SetConsoleOutputCP(BYVAL dwCodePageID AS DWORD)
SetConsoleScreenBufferSize(BYVAL hConsoleOutput AS DWORD, BYVAL dwSize AS DWORD)
SetConsoleTextAttribute(BYVAL hConsoleOutput AS DWORD, BYVAL dwAttributes AS DWORD)
SetConsoleTitle(lpConsoleTitle AS ASCIIZ)
SetConsoleWindowInfo(BYVAL hConsoleOutput AS DWORD, BYVAL bAbsolute AS LONG, lpConsoleWindow AS SMALL_RECT)
SetCriticalSectionSpinCount(lpCriticalSection AS CRITICAL_SECTION, BYVAL dwSpinCount AS DWORD)
SetCurrentDirectory(lpPathName AS ASCIIZ)
SetDefaultCommConfig(lpszName AS ASCIIZ, lpCC AS COMMCONFIG, BYVAL dwSize AS DWORD)
SetEndOfFile(BYVAL hFile AS DWORD)
SetEnvironmentVariable(lpName AS ASCIIZ, lpValue AS ASCIIZ)
SetErrorMode(BYVAL uMode AS DWORD)
SetEvent(BYVAL hEvent AS DWORD)
SetFileApisToANSI()
SetFileApisToOEM()
SetFileAttributes(lpFileName AS ASCIIZ, BYVAL dwFileAttributes AS DWORD)
SetFilePointer(BYVAL hFile AS DWORD, BYVAL lDistanceToMove AS LONG, lpDistanceToMoveHigh AS LONG, BYVAL dwMoveMethod AS DWORD)
SetFileTime(BYVAL hFile AS DWORD, lpCreationTime AS FILETIME, lpLastAccessTime AS FILETIME, lpLastWriteTime AS FILETIME)
SetHandleCount(BYVAL uNumber AS DWORD)
SetHandleInformation(BYVAL hObject AS DWORD, BYVAL dwMask AS DWORD, BYVAL dwFlags AS DWORD)
SetLastError(BYVAL dwErrCode AS DWORD)
SetLocalTime(lpSystemTime AS SYSTEMTIME)
SetLocaleInfo(BYVAL Locale AS LONG, BYVAL LCType AS LONG, lpLCData AS ASCIIZ)
SetMailslotInfo(BYVAL hMailslot AS DWORD, BYVAL lReadTimeout AS LONG)
SetNamedPipeHandleState(BYVAL hNamedPipe AS DWORD, lpMode AS DWORD, lpMaxCollectionCount AS DWORD, lpCollectDataTimeout AS DWORD)
SetPriorityClass(BYVAL hProcess AS DWORD, BYVAL dwPriorityClass AS DWORD)
SetProcessAffinityMask(BYVAL hProcess AS DWORD, BYVAL dwProcessAffinityMask AS DWORD)
SetProcessPriorityBoost(BYVAL hProcess AS DWORD, BYVAL bDisablePriorityBoost AS LONG)
SetProcessShutdownParameters(BYVAL dwLevel AS DWORD, BYVAL dwFlags AS DWORD)
SetProcessWorkingSetSize(BYVAL hProcess AS DWORD, BYVAL dwMinimumWorkingSetSize AS DWORD, BYVAL dwMaximumWorkingSetSize AS DWORD)
SetStdHandle(BYVAL nStdHandle AS DWORD, BYVAL nHandle AS DWORD)
SetSystemPowerState(BYVAL fSuspend AS LONG, BYVAL fForce AS LONG)
SetSystemTime(lpSystemTime AS SYSTEMTIME)
SetSystemTimeAdjustment(BYVAL dwTimeAdjustment AS DWORD, BYVAL bTimeAdjustmentDisabled AS LONG)
SetTapeParameters(BYVAL hDevice AS DWORD, BYVAL dwOperation AS DWORD, lpTapeInformation AS ANY)
SetTapePosition(BYVAL hDevice AS DWORD, BYVAL dwPositionMethod AS DWORD, BYVAL dwPartition AS DWORD, BYVAL dwOffsetLow AS DWORD, BYVAL dwOffsetHigh AS DWORD, BYVAL bimmediate AS LONG)
SetThreadAffinityMask(BYVAL hThread AS DWORD, BYVAL dwThreadAffinityMask AS DWORD)
SetThreadContext(BYVAL hThread AS DWORD, lpContext AS CONTEXT)
SetThreadExecutionState(BYVAL esFlags AS DWORD)
SetThreadIdealProcessor(BYVAL hThread AS DWORD, BYVAL dwIdealProcessor AS DWORD)
SetThreadLocale(BYVAL Locale AS LONG)
SetThreadPriority(BYVAL hThread AS DWORD, BYVAL nPriority AS LONG)
SetThreadPriorityBoost(BYVAL hThread AS DWORD, BYVAL bDisablePriorityBoost AS LONG)
SetTimeZoneInformation(lpTimeZoneInformation AS TIME_ZONE_INFORMATION)
SetUnhandledExceptionFilter(BYVAL lpTopLevelExceptionFilter AS DWORD)
SetVolumeLabel(lpRootPathName AS ASCIIZ, lpVolumeName AS ASCIIZ)
SetWaitableTimer(BYVAL hTimer AS DWORD, lpDueTime AS QUAD, BYVAL lPeriod AS LONG, BYVAL pfnCompletionRoutine AS DWORD, BYVAL lpArgToCompletionRoutine AS DWORD, BYVAL fResume AS LONG)
SetupComm(BYVAL hFile AS DWORD, BYVAL dwInQueue AS DWORD, BYVAL dwOutQueue AS DWORD)
SetUserGeoID(BYVAL GeoClass AS DWORD)
SignalObjectAndWait(BYVAL hObjectToSignal AS DWORD, BYVAL hObjectToWaitOn AS DWORD, BYVAL dwMilliseconds AS DWORD, BYVAL bAlertable AS LONG)
SizeofResource(BYVAL hInstance AS DWORD, BYVAL hResInfo AS DWORD)
apiSleep(BYVAL dwMilliseconds AS DWORD)
SleepEx(BYVAL dwMilliseconds AS DWORD, BYVAL bAlertable AS LONG)
SuspendThread(BYVAL hThread AS DWORD)
SwitchToFiber(BYVAL lpFiber AS DWORD)
SwitchToThread()
SystemTimeToFileTime(lpSystemTime AS SYSTEMTIME, lpFileTime AS FILETIME)
SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation AS TIME_ZONE_INFORMATION, lpUniversalTime AS SYSTEMTIME, lpLocalTime AS SYSTEMTIME)
TerminateProcess(BYVAL hProcess AS DWORD, BYVAL uExitCode AS DWORD)
TerminateThread(BYVAL hThread AS DWORD, BYVAL dwExitCode AS DWORD)
TlsAlloc()
TlsFree(BYVAL dwTlsIndex AS DWORD)
TlsGetValue(BYVAL dwTlsIndex AS DWORD)
TlsSetValue(BYVAL dwTlsIndex AS DWORD, lpTlsValue AS ANY)
TransactNamedPipe(BYVAL hNamedPipe AS DWORD, lpInBuffer AS ANY, BYVAL nInBufferSize AS LONG, lpOutBuffer AS ANY, BYVAL nOutBufferSize AS LONG, lpBytesRead AS LONG, lpOverlapped AS OVERLAPPED)
TransmitCommChar(BYVAL nCid AS LONG, BYVAL cChar AS BYTE)
TryEnterCriticalSection(lpCriticalSection AS CRITICAL_SECTION)
UnhandledExceptionFilter(ExceptionInfo AS EXCEPTION_POINTERS)
UnlockFile(BYVAL hFile AS DWORD, BYVAL dwFileOffsetLow AS DWORD, BYVAL dwFileOffsetHigh AS DWORD, BYVAL nNumberOfBytesToUnlockLow AS LONG, BYVAL nNumberOfBytesToUnlockHigh AS LONG)
UnlockFileEx(BYVAL hFile AS DWORD, BYVAL dwReserved AS DWORD, BYVAL nNumberOfBytesToUnlockLow AS LONG, BYVAL nNumberOfBytesToUnlockHigh AS LONG, lpOverlapped AS OVERLAPPED)
UnmapViewOfFile(BYVAL lpBaseAddress AS DWORD)
UpdateResource(BYVAL hUpdate AS DWORD, lpType AS ASCIIZ, lpName AS ASCIIZ, BYVAL wLanguage AS WORD, lpData AS ANY, BYVAL cbData AS DWORD)
VerifyVersionInfo(lpVersionInformation AS OSVERSIONINFOEX, BYVAL dwTypeMask AS DWORD, BYVAL dwlConditionMask AS QUAD)
VerLanguageName(BYVAL dwLang AS DWORD, szLang AS ASCIIZ, BYVAL nSize AS DWORD)
VerSetConditionMask(BYVAL ConditionMask AS QUAD, BYVAL TypeMask AS DWORD, BYVAL Condition AS BYTE)
VirtualAlloc(lpAddress AS ANY, BYVAL dwSize AS DWORD, BYVAL flAllocationType AS LONG, BYVAL flProtect AS LONG)
VirtualAllocEx(BYVAL hProcess AS DWORD, lpAddress AS ANY, BYVAL dwSize AS DWORD, BYVAL flAllocationType AS DWORD, BYVAL flProtect AS DWORD)
VirtualFree(lpAddress AS ANY, BYVAL dwSize AS DWORD, BYVAL dwFreeType AS DWORD)
VirtualFreeEx(BYVAL hProcess AS DWORD, lpAddress AS ANY, BYVAL dwSize AS DWORD, BYVAL dwFreeType AS DWORD)
VirtualLock(lpAddress AS ANY, BYVAL dwSize AS DWORD)
VirtualProtect(lpAddress AS ANY, BYVAL dwSize AS DWORD, BYVAL flNewProtect AS LONG, lpflOldProtect AS LONG)
VirtualProtectEx(BYVAL hProcess AS DWORD, lpAddress AS ANY, BYVAL dwSize AS DWORD, BYVAL flNewProtect AS LONG, lpflOldProtect AS LONG)
VirtualQuery(lpAddress AS ANY, lpBuffer AS MEMORY_BASIC_INFORMATION, BYVAL dwLength AS DWORD)
VirtualQueryEx(BYVAL hProcess AS DWORD, lpAddress AS ANY, lpBuffer AS MEMORY_BASIC_INFORMATION, BYVAL dwLength AS DWORD)
VirtualUnlock(lpAddress AS ANY, BYVAL dwSize AS DWORD)
WaitCommEvent(BYVAL hFile AS DWORD, lpEvtMask AS LONG, lpOverlapped AS OVERLAPPED)
WaitForDebugEvent(lpde AS DEBUG_EVENT, BYVAL dwTimeout AS DWORD)
WaitForMultipleObjects(BYVAL nCount AS DWORD, lpHandles AS DWORD, BYVAL bWaitAll AS LONG, BYVAL dwMilliseconds AS DWORD)
WaitForMultipleObjectsEx(BYVAL nCount AS DWORD, lpHandles AS DWORD, BYVAL bWaitAll AS LONG, BYVAL dwMilliseconds AS DWORD, BYVAL bAlertable AS LONG)
WaitForSingleObject(BYVAL hHandle AS DWORD, BYVAL dwMilliseconds AS DWORD)
WaitForSingleObjectEx(BYVAL hHandle AS DWORD, BYVAL dwMilliseconds AS DWORD, BYVAL bAlertable AS LONG)
WaitNamedPipe(lpNamedPipeName AS ASCIIZ, BYVAL nTimeOut AS DWORD)
WideCharToMultiByte(BYVAL CodePage AS DWORD, BYVAL dwFlags AS DWORD, lpWideCharStr AS ANY, BYVAL cchWideChar AS LONG, lpMultiByteStr AS ANY, BYVAL cchMultiByte AS LONG, lpDefaultChar AS ASCIIZ, lpUsedDefaultChar AS LONG)
WinExec(lpCmdLine AS ASCIIZ, BYVAL nCmdShow AS LONG)
WriteConsole(BYVAL hConsoleOutput AS DWORD, lpBuffer AS ASCIIZ, BYVAL nNumberOfCharsToWrite AS LONG, lpNumberOfCharsWritten AS LONG, BYVAL lpReserved AS LONG)
WriteConsoleInput(BYVAL hConsoleInput AS DWORD, lpBuffer AS INPUT_RECORD, BYVAL nLength AS DWORD, lpNumberOfEventsWritten AS LONG)
WriteConsoleOutput(BYVAL hConsoleOutput AS DWORD, BYVAL lpBuffer AS DWORD, BYVAL dwBufferSize AS DWORD, BYVAL dwBufferCoord AS DWORD, lpWriteRegion AS SMALL_RECT)
WriteConsoleOutputAttribute(BYVAL hConsoleOutput AS DWORD, lpdwAttribute AS DWORD, BYVAL nLength AS LONG, BYVAL dwWriteCoord AS DWORD, lpNumberOfAttrsWritten AS LONG)
WriteConsoleOutputCharacter(BYVAL hConsoleOutput AS DWORD, szCharacter AS ASCIIZ, BYVAL nLength AS LONG, BYVAL dwWriteCoord AS DWORD, lpNumberOfCharsWritten AS LONG)
WriteFile(BYVAL hFile AS DWORD, lpBuffer AS ANY, BYVAL nNumberOfBytesToWrite AS LONG, lpNumberOfBytesWritten AS LONG, lpOverlapped AS OVERLAPPED)
WriteFileEx(BYVAL hFile AS DWORD, lpBuffer AS ANY, BYVAL nNumberOfBytesToWrite AS LONG, lpOverlapped AS OVERLAPPED, BYVAL lpCompletionRoutine AS LONG)
WritePrivateProfileSection(lpAppName AS ASCIIZ, lpString AS ASCIIZ, lpFileName AS ASCIIZ)
WritePrivateProfileString(lpApplicationName AS ASCIIZ, lpKeyName AS ASCIIZ, lpString AS ASCIIZ, lpFileName AS ASCIIZ)
WritePrivateProfileStruct(lpApplicationName AS ASCIIZ, lpKeyName AS ASCIIZ, lpStruct AS ANY, BYVAL uSizeStruct AS DWORD, lpFileName AS ASCIIZ)
WriteProcessMemory(BYVAL hProcess AS DWORD, lpBaseAddress AS ANY, lpBuffer AS ANY, BYVAL nSize AS DWORD, lpNumberOfBytesWritten AS LONG)
WriteProfileSection(lpAppName AS ASCIIZ, lpString AS ASCIIZ)
WriteProfileString(lpszSection AS ASCIIZ, lpszKeyName AS ASCIIZ, lpszString AS ASCIIZ)
WriteTapemark(BYVAL hDevice AS DWORD, BYVAL dwTapeMarkType AS DWORD, BYVAL dwTapeMarkCount AS DWORD, BYVAL bimmediate AS LONG)
hread(BYVAL hFile AS DWORD, lpBuffer AS ANY, BYVAL lBytes AS LONG)
hwrite(BYVAL hFile AS DWORD, lpBuffer AS ASCIIZ, BYVAL lBytes AS LONG)
lclose(BYVAL hFile AS DWORD)
lcreat(lpPathName AS ASCIIZ, BYVAL iAttribute AS LONG)
llseek(BYVAL hFile AS DWORD, BYVAL lOffset AS LONG, BYVAL iOrigin AS LONG)
lopen(lpPathName AS ASCIIZ, BYVAL iReadWrite AS LONG)
lread(BYVAL hFile AS DWORD, lpBuffer AS ANY, BYVAL uBytes AS DWORD)
lstrcat(lpString1 AS ASCIIZ, lpString2 AS ASCIIZ)
lstrcmp(lpString1 AS ASCIIZ, lpString2 AS ASCIIZ)
lstrcmpi(lpString1 AS ASCIIZ, lpString2 AS ASCIIZ)
lstrcpy(lpString1 AS ASCIIZ, lpString2 AS ASCIIZ)
lstrcpyn(lpString1 AS ASCIIZ, lpString2 AS ASCIIZ, BYVAL iMaxLength AS LONG)
lstrlen(lpString AS ASCIIZ)
lstrlenw(lpString AS ANY)
lwrite(BYVAL hFile AS DWORD, lpBuffer AS ASCIIZ, BYVAL uBytes AS DWORD)
AbortSystemShutdown(lpMachineName AS ASCIIZ)
AccessCheck(pSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL ClientToken AS LONG, BYVAL DesiredAccess AS LONG, GenericMapping AS GENERIC_MAPPING, PrivilegeSet AS ANY, PrivilegeSetLength AS LONG, GrantedAccess AS LONG, BYVAL STATUS AS LONG)
AccessCheckAndAuditAlarm(SubsystemName AS ASCIIZ, HandleId AS ANY, ObjectTypeName AS ASCIIZ, ObjectName AS ASCIIZ, SecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL DesiredAccess AS LONG, GenericMapping AS GENERIC_MAPPING, BYVAL ObjectCreation AS LONG, GrantedAccess AS LONG, BYVAL AccessStatus AS LONG, BYVAL pfGenerateOnClose AS LONG)
AccessCheckByType(pSecurityDescriptor AS SECURITY_DESCRIPTOR, PrincipalSelfSid AS ANY, BYVAL ClientToken AS DWORD, BYVAL DesiredAccess AS DWORD, ObjectTypeList AS OBJECT_TYPE_LIST PTR, BYVAL ObjectTypeListLength AS DWORD, GenericMapping AS GENERIC_MAPPING, PrivilegeSet AS ANY, PrivilegeSetLength AS DWORD, GrantedAccess AS DWORD, AccessStatus AS LONG)
AccessCheckByType(pSecurityDescriptor AS SECURITY_DESCRIPTOR, PrincipalSelfSid AS ANY, BYVAL ClientToken AS DWORD, BYVAL DesiredAccess AS DWORD, BYVAL ObjectTypeList AS OBJECT_TYPE_LIST PTR, BYVAL ObjectTypeListLength AS DWORD, GenericMapping AS GENERIC_MAPPING, PrivilegeSet AS ANY, PrivilegeSetLength AS DWORD, GrantedAccess AS DWORD, AccessStatus AS LONG)
AccessCheckByTypeAndAuditAlarm(SubsystemName AS ASCIIZ, HandleId AS DWORD, ObjectTypeName AS ASCIIZ, ObjectName AS ASCIIZ, SecurityDescriptor AS SECURITY_DESCRIPTOR, PrincipalSelfSid AS ANY, BYVAL DesiredAccess AS DWORD, BYVAL AuditType AS LONG, BYVAL Flags AS DWORD, ObjectTypeList AS OBJECT_TYPE_LIST, BYVAL ObjectTypeListLength AS DWORD, GenericMapping AS GENERIC_MAPPING, BYVAL ObjectCreation AS LONG, GrantedAccess AS DWORD, AccessStatus AS LONG, pfGenerateOnClose AS LONG)
AccessCheckByTypeResultList(pSecurityDescriptor AS SECURITY_DESCRIPTOR, PrincipalSelfSid AS ANY, BYVAL ClientToken AS DWORD, BYVAL DesiredAccess AS DWORD, ObjectTypeList AS OBJECT_TYPE_LIST PTR, BYVAL ObjectTypeListLength AS DWORD, GenericMapping AS GENERIC_MAPPING, PrivilegeSet AS ANY, PrivilegeSetLength AS DWORD, GrantedAccess AS DWORD, AccessStatusList AS DWORD)
AccessCheckByTypeResultList(pSecurityDescriptor AS SECURITY_DESCRIPTOR, PrincipalSelfSid AS ANY, BYVAL ClientToken AS DWORD, BYVAL DesiredAccess AS DWORD, BYVAL ObjectTypeList AS OBJECT_TYPE_LIST PTR, BYVAL ObjectTypeListLength AS DWORD, GenericMapping AS GENERIC_MAPPING, PrivilegeSet AS ANY, PrivilegeSetLength AS DWORD, GrantedAccess AS DWORD, AccessStatusList AS DWORD)
AccessCheckByTypeResultListAndAuditAlarm(SubsystemName AS ASCIIZ, HandleId AS DWORD, ObjectTypeName AS ASCIIZ, ObjectName AS ASCIIZ, SecurityDescriptor AS SECURITY_DESCRIPTOR, PrincipalSelfSid AS ANY, BYVAL DesiredAccess AS DWORD, BYVAL AuditType AS LONG, BYVAL Flags AS DWORD, ObjectTypeList AS OBJECT_TYPE_LIST, GenericMapping AS GENERIC_MAPPING, BYVAL ObjectCreation AS LONG, GrantedAccess AS DWORD, AccessStatusList AS DWORD, pfGenerateOnClose AS LONG)
AddAccessAllowedAce(pAcl AS ACL, BYVAL dwAceRevision AS DWORD, BYVAL AccessMask AS LONG, dwFlags AS DWORD)
AddAccessAllowedAceEx(pAcl AS ACL, BYVAL dwAceRevision AS DWORD, BYVAL AceFlags AS DWORD, BYVAL AccessMask AS DWORD, pSid AS ANY)
AddAccessDeniedAce(pAcl AS ACL, BYVAL dwAceRevision AS DWORD, BYVAL AccessMask AS LONG, dwFlags AS DWORD)
AccessDeniedAceEx(pAcl AS ACL, BYVAL dwAceRevision AS DWORD, BYVAL AceFlags AS DWORD, BYVAL AccessMask AS DWORD, pSid AS ANY)
AddAce(pAcl AS ACL, BYVAL dwAceRevision AS DWORD, BYVAL dwStartingAceIndex AS DWORD, pAceList AS ANY, BYVAL nAceListLength AS LONG)
AddAuditAccessAce(pAcl AS ACL, BYVAL dwAceRevision AS DWORD, BYVAL dwAccessMask AS DWORD, pSid AS ANY, BYVAL bAuditSuccess AS LONG, BYVAL bAuditFailure AS LONG)
AddAuditAccessAceEx(pAcl AS ACL, BYVAL dwAceRevision AS DWORD, BYVAL AceFlags AS DWORD, BYVAL dwAccessMask AS DWORD, pSid AS ANY, BYVAL bAuditSuccess AS LONG, BYVAL bAuditFailure AS LONG)
AdjustTokenGroups(BYVAL TokenHandle AS DWORD, BYVAL ResetToDefault AS LONG, NewState AS ANY, BYVAL BufferLength AS DWORD, PreviousState AS ANY, ReturnLength AS DWORD)
AdjustTokenPrivileges(BYVAL TokenHandle AS DWORD, BYVAL DisableAllPrivileges AS LONG, NewState AS ANY, BYVAL BufferLength AS DWORD, PreviousState AS ANY, ReturnLength AS DWORD)
AllocateAndInitializeSid(pIdentifierAuthority AS SID_IDENTIFIER_AUTHORITY, BYVAL nSubAuthorityCount AS BYTE, BYVAL nSubAuthority0 AS LONG, BYVAL nSubAuthority1 AS LONG, BYVAL nSubAuthority2 AS LONG, BYVAL nSubAuthority3 AS LONG, BYVAL nSubAuthority4 AS LONG, BYVAL nSubAuthority5 AS LONG, BYVAL nSubAuthority6 AS LONG, BYVAL nSubAuthority7 AS LONG, lpPSid AS ANY)
AllocateLocallyUniqueId(xLuid AS LUID)
AreAllAccessesGranted(BYVAL GrantedAccess AS LONG, BYVAL DesiredAccess AS LONG)
AreAnyAccessesGranted(BYVAL GrantedAccess AS LONG, BYVAL DesiredAccess AS LONG)
BackupEventLog(BYVAL hEventLog AS DWORD, lpBackupFileName AS ASCIIZ)
ChangeServiceConfig(BYVAL hService AS DWORD, BYVAL dwServiceType AS DWORD, BYVAL dwStartType AS DWORD, BYVAL dwErrorControl AS DWORD, lpBinaryPathName AS ASCIIZ, lpLoadOrderGroup AS ASCIIZ, lpdwTagId AS DWORD, lpDependencies AS ASCIIZ, lpServiceStartName AS ASCIIZ, lpPassword AS ASCIIZ, lpDisplayName AS ASCIIZ)
CheckTokenMembership(BYVAL hToken AS DWORD, SidToCheck AS ANY, IsMember AS LONG)
ClearEventLog(BYVAL hEventLog AS DWORD, lpBackupFileName AS ASCIIZ)
CloseEventLog(BYVAL hEventLog AS DWORD)
CloseServiceHandle(BYVAL hSCObject AS DWORD)
ControlService(BYVAL hService AS DWORD, BYVAL dwControl AS DWORD, lpServiceStatus AS SERVICE_STATUS)
CopySid(BYVAL nDestinationSidLength AS LONG, pDestinationSid AS ANY, pSourceSid AS ANY)
CreatePrivateObjectSecurity(ParentDescriptor AS SECURITY_DESCRIPTOR, CreatorDescriptor AS SECURITY_DESCRIPTOR, NewDescriptor AS SECURITY_DESCRIPTOR, BYVAL IsDirectoryObject AS LONG, BYVAL Token AS LONG, GenericMapping AS GENERIC_MAPPING)
CreateProcessAsUser(BYVAL hToken AS DWORD, lpApplicationName AS ASCIIZ, lpCommandLine AS ASCIIZ, lpProcessAttributes AS SECURITY_ATTRIBUTES, lpThreadAttributes AS SECURITY_ATTRIBUTES, BYVAL bInheritHandles AS LONG, BYVAL dwCreationFlags AS DWORD, lpEnvironment AS ASCIIZ, lpCurrentDirectory AS ASCIIZ, lpStartupInfo AS STARTUPINFO, lpProcessInformation AS PROCESS_INFORMATION)
CreateService(BYVAL hSCManager AS DWORD, lpServiceName AS ASCIIZ, lpDisplayName AS ASCIIZ, BYVAL dwDesiredAccess AS DWORD, BYVAL dwServiceType AS DWORD, BYVAL dwStartType AS DWORD, BYVAL dwErrorControl AS DWORD, lpBinaryPathName AS ASCIIZ, lpLoadOrderGroup AS ASCIIZ, lpdwTagId AS DWORD, lpDependencies AS ASCIIZ, lp AS ASCIIZ, lpPassword AS ASCIIZ)
DeleteAce(pAcl AS ACL, BYVAL dwAceIndex AS DWORD)
DeleteService(BYVAL hService AS DWORD)
DeregisterEventSource(BYVAL hEventLog AS DWORD)
DestroyPrivateObjectSecurity(ObjectDescriptor AS SECURITY_DESCRIPTOR)
DuplicateToken(BYVAL ExistingTokenHandle AS DWORD, ImpersonationLevel AS LONG, DuplicateTokenHandle AS DWORD)
DuplicateTokenEx(BYVAL ExistingTokenHandle AS DWORD, BYVAL dwDesiredAccess AS DWORD, lpTokenAttributes AS SECURITY_ATTRIBUTES, BYVAL ImpersonationLevel AS LONG, BYVAL TokenType AS LONG, phNewToken AS DWORD)
EnumDependentServices(BYVAL hService AS DWORD, BYVAL dwServiceState AS DWORD, lpServices AS ENUM_SERVICE_STATUS, BYVAL cbBufSize AS DWORD, pcbBytesNeeded AS DWORD, lpServicesReturned AS DWORD)
EnumServicesStatus(BYVAL hSCManager AS DWORD, BYVAL dwServiceType AS DWORD, BYVAL dwServiceState AS DWORD, lpServices AS ENUM_SERVICE_STATUS, BYVAL cbBufSize AS DWORD, pcbBytesNeeded AS DWORD, lpServicesReturned AS DWORD, lpResumeHandle AS DWORD)
EqualPrefixSid(pSid1 AS ANY, pSid2 AS ANY)
EqualSid(pSid1 AS ANY, pSid2 AS ANY)
FindFirstFreeAce(pAcl AS ACL, pAce AS LONG)
GetAce(pAcl AS ACL, BYVAL dwAceIndex AS DWORD, pAce AS ANY)
GetAclInformation(pAcl AS ACL, pAclInformation AS ANY, BYVAL nAclInformationLength AS LONG, BYVAL dwAclInformationClass AS DWORD)
GetCurrentHwProfile(lpHwProfileInfo AS HW_PROFILE_INFO)
GetFileSecurity(lpFileName AS ASCIIZ, BYVAL RequestedInformation AS LONG, pSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL nLength AS LONG, lpnLengthNeeded AS LONG)
GetKernelObjectSecurity(BYVAL xHandle AS DWORD, BYVAL RequestedInformation AS DWORD, pSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL nLength AS DWORD, lpnLengthNeeded AS DWORD)
GetLengthSid(pSid AS ANY)
GetNumberOfEventLogRecords(BYVAL hEventLog AS DWORD, NumberOfRecords AS LONG)
GetOldestEventLogRecord(BYVAL hEventLog AS DWORD, OldestRecord AS LONG)
GetPrivateObjectSecurity(ObjectDescriptor AS SECURITY_DESCRIPTOR, BYVAL SecurityInformation AS LONG, ResultantDescriptor AS SECURITY_DESCRIPTOR, BYVAL DescriptorLength AS LONG, ReturnLength AS LONG)
GetSecurityDescriptorControl(pSecurityDescriptor AS SECURITY_DESCRIPTOR, pControl AS LONG, lpdwRevision AS DWORD)
GetSecurityDescriptorDacl(pSecurityDescriptor AS SECURITY_DESCRIPTOR, lpbDaclPresent AS LONG, pDacl AS ACL, lpbDaclDefaulted AS LONG)
GetSecurityDescriptorGroup(pSecurityDescriptor AS SECURITY_DESCRIPTOR, pGroup AS ANY, BYVAL lpbGroupDefaulted AS LONG)
GetSecurityDescriptorLength(pSecurityDescriptor AS SECURITY_DESCRIPTOR)
GetSecurityDescriptorOwner(pSecurityDescriptor AS SECURITY_DESCRIPTOR, pOwner AS ANY, BYVAL lpbOwnerDefaulted AS LONG)
GetSecurityDescriptorSacl(pSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL lpbSaclPresent AS LONG, pSacl AS ACL, lpbSaclDefaulted AS LONG)
GetServiceDisplayName(BYVAL hSCManager AS DWORD, lpServiceName AS ASCIIZ, lpDisplayName AS ASCIIZ, lpcchBuffer AS LONG)
GetServiceKeyName(BYVAL hSCManager AS DWORD, lpDisplayName AS ASCIIZ, lpServiceName AS ASCIIZ, lpcchBuffer AS LONG)
GetSidIdentifierAuthority(dwFlags AS DWORD)
GetSidLengthRequired(BYVAL nSubAuthorityCount AS BYTE)
GetSidSubAuthority(dwFlags AS DWORD, BYVAL nSubAuthority AS LONG)
GetSidSubAuthorityCount(pSid AS ANY)
GetTokenInformation(BYVAL TokenHandle AS DWORD, BYVAL TokenInformationClass AS LONG, TokenInformation AS ANY, BYVAL TokenInformationLength AS DWORD, ReturnLength AS DWORD)
GetUserName(lpBuffer AS ASCIIZ, nSize AS DWORD)
ImpersonateAnonymousToken(BYVAL hToken AS DWORD)
ImpersonateLoggedOnUser(BYVAL hToken AS DWORD)
ImpersonateNamedPipeClient(BYVAL hNamedPipe AS DWORD)
ImpersonateSelf(ImpersonationLevel AS LONG)
InitializeAcl(pAcl AS ACL, BYVAL nAclLength AS DWORD, BYVAL dwAclRevision AS DWORD)
InitializeSecurityDescriptor(pSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL dwRevision AS DWORD)
InitializeSid(pSid AS ANY, pIdentifierAuthority AS SID_IDENTIFIER_AUTHORITY, BYVAL nSubAuthorityCount AS BYTE)
InitiateSystemShutdown(lpMachineName AS ASCIIZ, lpMessage AS ASCIIZ, BYVAL dwTimeout AS DWORD, BYVAL bForceAppsClosed AS LONG, BYVAL bRebootAfterShutdown AS LONG)
InitiateSystemShutdownEx(lpMachineName AS ASCIIZ, lpMessage AS ASCIIZ, BYVAL dwTimeout AS DWORD, BYVAL bForceAppsClosed AS LONG, BYVAL bRebootAfterShutdown AS LONG, BYVAL dwReason AS LONG)
IsTextUnicode(lpBuffer AS ANY, BYVAL cb AS LONG, lpi AS LONG)
IsTokenRestricted(BYVAL hToken AS DWORD)
IsTokenUntrusted(BYVAL hToken AS DWORD)
IsValidAcl(pAcl AS ACL)
IsValidSecurityDescriptor(pSecurityDescriptor AS SECURITY_DESCRIPTOR)
IsValidSid(dwFlags AS DWORD)
LockServiceDatabase(BYVAL hSCManager AS DWORD)
LogonUser(lpszUsername AS ASCIIZ, lpszDomain AS ASCIIZ, lpszPassword AS ASCIIZ, BYVAL dwLogonType AS DWORD, BYVAL dwLogonProvider AS DWORD, phToken AS DWORD)
LookupAccountName(lpSystemName AS ASCIIZ, lpAccountName AS ASCIIZ, pSid AS ANY, cbSid AS LONG, ReferencedDomainName AS ASCIIZ, cbReferencedDomainName AS LONG, peUse AS LONG)
LookupAccountSid(lpSystemName AS ASCIIZ, pSid AS ANY, xName AS ASCIIZ, cbName AS LONG, ReferencedDomainName AS ASCIIZ, cbReferencedDomainName AS LONG, peUse AS LONG)
LookupPrivilegeDisplayName(lpSystemName AS ASCIIZ, lpName AS ASCIIZ, lpDisplayName AS ASCIIZ, cbDisplayName AS LONG, lpLanguageID AS LONG)
LookupPrivilegeName(lpSystemName AS ASCIIZ, lpLuid AS LUID, lpName AS ASCIIZ, cbName AS LONG)
LookupPrivilegeValue(lpSystemName AS ASCIIZ, lpName AS ASCIIZ, lpLuid AS LUID)
MakeAbsoluteSD(pSelfRelativeSecurityDescriptor AS SECURITY_DESCRIPTOR, pAbsoluteSecurityDescriptor AS SECURITY_DESCRIPTOR, lpdwAbsoluteSecurityDescriptorSize AS DWORD, pDacl AS ACL, lpdwDaclSize AS DWORD, pSacl AS ACL, lpdwSaclSize AS DWORD, pOwner AS ANY, lpdwOwnerSize AS DWORD, pPrimaryGroup AS ANY, lpdwPrimaryGroupSize AS DWORD)
MakeSelfRelativeSD(pAbsoluteSecurityDescriptor AS SECURITY_DESCRIPTOR, pSelfRelativeSecurityDescriptor AS SECURITY_DESCRIPTOR, lpdwBufferLength AS DWORD)
NotifyBootConfigStatus(BYVAL BootAcceptable AS LONG)
NotifyChangeEventLog(BYVAL hEventLog AS DWORD, BYVAL hEvent AS DWORD)
ObjectCloseAuditAlarm(SubsystemName AS ASCIIZ, HandleId AS ANY, BYVAL GenerateOnClose AS LONG)
ObjectPrivilegeAuditAlarm(SubsystemName AS ASCIIZ, HandleId AS ANY, BYVAL ClientToken AS LONG, BYVAL DesiredAccess AS LONG, Privileges AS ANY, BYVAL AccessGranted AS LONG)
OpenBackupEventLog(lpUNCServerName AS ASCIIZ, lpFileName AS ASCIIZ)
OpenEventLog(lpUNCServerName AS ASCIIZ, lpSourceName AS ASCIIZ)
OpenProcessToken(BYVAL ProcessHandle AS DWORD, BYVAL DesiredAccess AS DWORD, TokenHandle AS DWORD)
OpenSCManager(lpMachineName AS ASCIIZ, lpDatabaseName AS ASCIIZ, BYVAL dwDesiredAccess AS DWORD)
OpenService(BYVAL hSCManager AS DWORD, lpServiceName AS ASCIIZ, BYVAL dwDesiredAccess AS DWORD)
OpenThreadToken(BYVAL ThreadHandle AS DWORD, BYVAL DesiredAccess AS DWORD, BYVAL OpenAsSelf AS LONG, TokenHandle AS DWORD)
PrivilegeCheck(BYVAL ClientToken AS LONG, RequiredPrivileges AS ANY, BYVAL pfResult AS LONG)
PrivilegedServiceAuditAlarm(SubsystemName AS ASCIIZ, ServiceName AS ASCIIZ, BYVAL ClientToken AS DWORD, Privileges AS ANY, BYVAL AccessGranted AS LONG)
QueryServiceConfig(BYVAL hService AS DWORD, lpServiceConfig AS QUERY_SERVICE_CONFIG, BYVAL cbBufSize AS DWORD, pcbBytesNeeded AS DWORD)
QueryServiceLockStatus(BYVAL hSCManager AS DWORD, lpLockStatus AS QUERY_SERVICE_LOCK_STATUS, BYVAL cbBufSize AS DWORD, pcbBytesNeeded AS DWORD)
QueryServiceObjectSecurity(BYVAL hService AS DWORD, BYVAL dwSecurityInformation AS DWORD, lpSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL cbBufSize AS DWORD, pcbBytesNeeded AS DWORD)
QueryServiceStatus(BYVAL hService AS DWORD, lpServiceStatus AS SERVICE_STATUS)
ReadEventLog(BYVAL hEventLog AS DWORD, BYVAL dwReadFlags AS DWORD, BYVAL dwRecordOffset AS DWORD, lpBuffer AS EVENTLOGRECORD, BYVAL nNumberOfBytesToRead AS LONG, pnBytesRead AS LONG, pnMinNumberOfBytesNeeded AS LONG)
RegCloseKey(BYVAL hKey AS DWORD)
RegConnectRegistry(lpMachineName AS ASCIIZ, BYVAL hKey AS DWORD, phkResult AS DWORD)
RegCreateKey(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ, phkResult AS DWORD)
RegCreateKeyEx(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ, BYVAL Reserved AS LONG, lpClass AS ASCIIZ, BYVAL dwOptions AS DWORD, BYVAL samDesired AS DWORD, lpSecurityAttributes AS SECURITY_ATTRIBUTES, phkResult AS DWORD, lpdwDisposition AS DWORD)
RegDeleteKey(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ)
RegDeleteValue(BYVAL hKey AS DWORD, lpValueName AS ASCIIZ)
RegDisablePredefinedCache()
RegEnumKey(BYVAL hKey AS DWORD, BYVAL dwIndex AS DWORD, lpName AS ASCIIZ, BYVAL cbName AS DWORD)
RegEnumKeyEx(BYVAL hKey AS DWORD, BYVAL dwIndex AS DWORD, lpName AS ASCIIZ, lpcbName AS LONG, BYVAL lpReserved AS LONG, lpClass AS ASCIIZ, lpcbClass AS LONG, lpftLastWriteTime AS FILETIME)
RegEnumValue(BYVAL hKey AS DWORD, BYVAL dwIndex AS DWORD, lpValueName AS ASCIIZ, lpcbValueName AS DWORD, lpReserved AS DWORD, lpType AS DWORD, lpData AS ANY, lpcbData AS DWORD)
RegFlushKey(BYVAL hKey AS DWORD)
RegGetKeySecurity(BYVAL hKey AS DWORD, BYVAL SecurityInformation AS LONG, pSecurityDescriptor AS SECURITY_DESCRIPTOR, lpcbSecurityDescriptor AS LONG)
RegLoadKey(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ, lpFile AS ASCIIZ)
RegNotifyChangeKeyValue(BYVAL hKey AS DWORD, BYVAL bWatchSubtree AS LONG, BYVAL dwNotifyFilter AS DWORD, BYVAL hEvent AS DWORD, BYVAL fAsynchronus AS LONG)
RegOpenCurrentUser(BYVAL samDesired AS DWORD, phkResult AS DWORD)
RegOpenKey(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ, phkResult AS DWORD)
RegOpenKeyEx(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ, BYVAL ulOptions AS DWORD, BYVAL samDesired AS DWORD, phkResult AS DWORD)
RegOpenUserClassesRoot(BYVAL hToken AS DWORD, BYVAL dwOptions AS DWORD, BYVAL samDesired AS DWORD, phkResult AS DWORD)
RegOverridePredefKey(BYVAL hKey AS DWORD, BYVAL hNewHKey AS DWORD)
RegQueryInfoKey(BYVAL hKey AS DWORD, lpClass AS ASCIIZ, lpcbClass AS LONG, lpReserved AS LONG, lpcSubKeys AS LONG, lpcbMaxSubKeyLen AS LONG, lpcbMaxClassLen AS LONG, lpcValues AS LONG, lpcbMaxValueNameLen AS DWORD, lpcbMaxValueLen AS LONG, lpcbSecurityDescriptor AS LONG, lpftLastWriteTime AS FILETIME)
RegQueryMultipleValues(BYVAL hKey AS DWORD, pvallist AS VALENT PTR, BYVAL numvals AS DWORD, lpValueBuf AS ASCIIZ, pdwTotSize AS DWORD)
RegQueryMultipleValues(BYVAL hKey AS DWORD, BYVAL pvallist AS VALENT PTR, BYVAL numvals AS DWORD, lpValueBuf AS ASCIIZ, pdwTotSize AS DWORD)
RegQueryValue(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ, lpValue AS ASCIIZ, lpcbValue AS LONG)
RegQueryValueEx(BYVAL hKey AS DWORD, lpValueName AS ASCIIZ, BYVAL lpReserved AS LONG, lpType AS LONG, lpData AS ANY, lpcbData AS LONG)
RegReplaceKey(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ, lpNewFile AS ASCIIZ, lpOldFile AS ASCIIZ)
RegRestoreKey(BYVAL hKey AS DWORD, lpFile AS ASCIIZ, BYVAL dwFlags AS DWORD)
RegSaveKey(BYVAL hKey AS DWORD, lpFile AS ASCIIZ, lpSecurityAttributes AS SECURITY_ATTRIBUTES)
RegSaveKeyEx(BYVAL hKey AS DWORD, lpFile AS ASCIIZ, lpSecurityAttributes AS SECURITY_ATTRIBUTES, BYVAL dwFlags AS DWORD)
RegSetKeySecurity(BYVAL hKey AS DWORD, BYVAL SecurityInformation AS LONG, pSecurityDescriptor AS SECURITY_DESCRIPTOR)
RegSetValue(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ, BYVAL dwType AS DWORD, lpData AS ASCIIZ, BYVAL cbData AS DWORD)
RegSetValueEx(BYVAL hKey AS DWORD, lpValueName AS ASCIIZ, BYVAL dwReserved AS DWORD, BYVAL dwType AS DWORD, lpData AS ANY, BYVAL cbData AS DWORD)
RegUnLoadKey(BYVAL hKey AS DWORD, lpSubKey AS ASCIIZ)
RegisterEventSource(lpUNCServerName AS ASCIIZ, lpSourceName AS ASCIIZ)
RegisterServiceCtrlHandler(lpServiceName AS ASCIIZ, BYVAL lpHandlerProc AS DWORD)
RegisterServiceCtrlHandlerEx(lpServiceName AS ASCIIZ, BYVAL lpHandlerProc AS DWORD, lpContext AS ANY)
ReportEvent(BYVAL hEventLog AS DWORD, BYVAL wType AS WORD, BYVAL wCategory AS WORD, BYVAL dwEventId AS DWORD, lpUserSid AS ANY, BYVAL wNumStrings AS WORD, BYVAL dwDataSize AS DWORD, lpStrings AS ANY, lpRawData AS ANY)
RevertToSelf()
SetAclInformation(pAcl AS ACL, pAclInformation AS ANY, BYVAL nAclInformationLength AS LONG, BYVAL dwAclInformationClass AS DWORD)
SetFileSecurity(lpFileName AS ASCIIZ, BYVAL SecurityInformation AS LONG, pSecurityDescriptor AS SECURITY_DESCRIPTOR)
SetKernelObjectSecurity(BYVAL xHandle AS DWORD, BYVAL SecurityInformation AS DWORD, SecurityDescriptor AS SECURITY_DESCRIPTOR)
SetPrivateObjectSecurity(BYVAL SecurityInformation AS LONG, ModificationDescriptor AS SECURITY_DESCRIPTOR, ObjectsSecurityDescriptor AS SECURITY_DESCRIPTOR, GenericMapping AS GENERIC_MAPPING, BYVAL Token AS LONG)
SetSecurityDescriptorDacl(pSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL bDaclPresent AS LONG, pDacl AS ACL, BYVAL bDaclDefaulted AS LONG)
SetSecurityDescriptorGroup(pSecurityDescriptor AS SECURITY_DESCRIPTOR, pGroup AS ANY, BYVAL bGroupDefaulted AS LONG)
SetSecurityDescriptorOwner(pSecurityDescriptor AS SECURITY_DESCRIPTOR, pOwner AS ANY, BYVAL bOwnerDefaulted AS LONG)
SetSecurityDescriptorSacl(pSecurityDescriptor AS SECURITY_DESCRIPTOR, BYVAL bSaclPresent AS LONG, pSacl AS ACL, BYVAL bSaclDefaulted AS LONG)
SetServiceBits(BYVAL hServiceStatus AS DWORD, BYVAL dwServiceBits AS DWORD, BYVAL bSetBitsOn AS LONG, BYVAL bUpdateImmediately AS LONG)
SetServiceObjectSecurity(BYVAL hService AS DWORD, BYVAL dwSecurityInformation AS DWORD, lpSecurityDescriptor AS ANY)
SetServiceStatus(BYVAL hServiceStatus AS DWORD, lpServiceStatus AS SERVICE_STATUS)
SetThreadToken(hThread AS DWORD, BYVAL Token AS LONG)
SetTokenInformation(BYVAL TokenHandle AS DWORD, BYVAL TokenInformationClass AS LONG, TokenInformation AS ANY, BYVAL TokenInformationLength AS DWORD)
StartService(BYVAL hService AS DWORD, BYVAL dwNumServiceArgs AS DWORD, BYVAL lpServiceArgVectors AS LONG)
StartServiceCtrlDispatcher(lpServiceStartTable AS SERVICE_TABLE_ENTRY)
UnlockServiceDatabase(ScLock AS ANY)
FreeSid(pSid AS ANY)
MapGenericMask(AccessMask AS LONG, GenericMapping AS GENERIC_MAPPING)
AddFontResource(lpFileName AS ASCIIZ)
AnimatePalette(BYVAL hPalette AS DWORD, BYVAL wStartIndex AS DWORD, BYVAL wNumEntries AS DWORD, lpPaletteColors AS PALETTEENTRY)
Arc(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG, BYVAL X3 AS LONG, BYVAL Y3 AS LONG, BYVAL X4 AS LONG, BYVAL Y4 AS LONG)
BitBlt(BYVAL hDestDC AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL hSrcDC AS DWORD, BYVAL xSrc AS LONG, BYVAL ySrc AS LONG, BYVAL dwRop AS DWORD)
CancelDC(BYVAL hdc AS DWORD)
Chord(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG, BYVAL X3 AS LONG, BYVAL Y3 AS LONG, BYVAL X4 AS LONG, BYVAL Y4 AS LONG)
ChoosePixelFormat(BYVAL hDC AS DWORD, pPixelFormatDescriptor AS PIXELFORMATDESCRIPTOR)
CloseMetaFile(BYVAL hMF AS DWORD)
CombineRgn(BYVAL hDestRgn AS DWORD, BYVAL hSrcRgn1 AS DWORD, BYVAL hSrcRgn2 AS DWORD, BYVAL nCombineMode AS LONG)
CopyMetaFile(BYVAL hMF AS DWORD, lpFileName AS ASCIIZ)
CreateBitmap(BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL nPlanes AS DWORD, BYVAL nBitCount AS DWORD, lpBits AS ANY)
CreateBitmapIndirect(lpBitmap AS BITMAP)
CreateBrushIndirect(lpLogBrush AS LOGBRUSH)
CreateCompatibleBitmap(BYVAL hdc AS DWORD, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG)
CreateDiscardableBitmap(BYVAL hdc AS DWORD, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG)
CreateCompatibleDC(BYVAL hdc AS DWORD)
CreateDC(lpDriverName AS ASCIIZ, lpDeviceName AS ASCIIZ, lpOutput AS ASCIIZ, lpInitData AS DEVMODE)
CreateDIBitmap(BYVAL hdc AS DWORD, lpInfoHeader AS BITMAPINFOHEADER, BYVAL dwUsage AS DWORD, lpInitBits AS ANY, lpInitInfo AS BITMAPINFO, BYVAL wUsage AS DWORD)
CreateDIBPatternBrush(BYVAL hPackedDIB AS DWORD, BYVAL wUsage AS DWORD)
CreateDIBPatternBrushPt(lpPackedDIB AS ANY, BYVAL iUsage AS DWORD)
CreateEllipticRgn(BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG)
CreateEllipticRgnIndirect(lpRect AS RECT)
CreateFontIndirect(lpLogFont AS LOGFONT)
CreateFont(BYVAL nHeight AS LONG, BYVAL nWidth AS LONG, BYVAL nEscapement AS LONG, BYVAL nOrientation AS LONG, BYVAL fnWeight AS LONG, BYVAL fdwItalic AS DWORD, BYVAL fdwUnderline AS DWORD, BYVAL fdwStrikeOut AS DWORD, BYVAL fdwCharSet AS DWORD, BYVAL fdwOutputPrecision AS DWORD, BYVAL fdwClipPrecision AS DWORD, BYVAL fdwQuality AS DWORD, BYVAL fdwPitchAndFamily AS DWORD, lpszFace AS ASCIIZ)
CreateHatchBrush(BYVAL nIndex AS LONG, BYVAL crColor AS DWORD)
CreateIC(lpDriverName AS ASCIIZ, lpDeviceName AS ASCIIZ, lpOutput AS ASCIIZ, lpInitData AS DEVMODE)
CreateMetaFile(lpString AS ASCIIZ)
CreatePalette(lpLogPalette AS ANY)
CreatePen(BYVAL nPenStyle AS LONG, BYVAL nWidth AS LONG, BYVAL crColor AS DWORD)
CreatePenIndirect(lpLogPen AS LOGPEN)
CreatePolyPolygonRgn(lpPoint AS POINTAPI, lpPolyCounts AS LONG, BYVAL nCount AS LONG, BYVAL nPolyFillMode AS LONG)
CreatePatternBrush(BYVAL hBitmap AS DWORD)
CreateRectRgn(BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG)
CreateRectRgnIndirect(lpRect AS RECT)
CreateRoundRectRgn(BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG, BYVAL X3 AS LONG, BYVAL Y3 AS LONG)
CreateScalableFontResource(BYVAL fHidden AS DWORD, lpszResourceFile AS ASCIIZ, lpszFontFile AS ASCIIZ, lpszCurrentPath AS ASCIIZ)
CreateSolidBrush(BYVAL crColor AS DWORD)
DeleteDC(BYVAL hdc AS DWORD)
DeleteMetaFile(BYVAL hMF AS DWORD)
DeleteObject(BYVAL hObject AS DWORD)
DescribePixelFormat(BYVAL hDC AS DWORD, BYVAL iPixelFormat AS LONG, BYVAL nBytes AS DWORD, ppfd AS PIXELFORMATDESCRIPTOR)
DeviceCapabilities(lpDeviceName AS ASCIIZ, lpPort AS ASCIIZ, BYVAL iIndex AS WORD, lpOutput AS ASCIIZ, lpDevMode AS DEVMODE)
DrawEscape(BYVAL hdc AS DWORD, BYVAL nEscape AS LONG, BYVAL cbInput AS LONG, lpszInData AS ASCIIZ)
Ellipse(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG)
EnumFontFamiliesEx(BYVAL hdc AS DWORD, lpLogFont AS LOGFONT, BYVAL lpEnumFontProc AS DWORD, BYVAL lParam AS LONG, BYVAL dw AS DWORD)
EnumFontFamilies(BYVAL hdc AS DWORD, lpszFamily AS ASCIIZ, BYVAL lpEnumFontFamProc AS DWORD, BYVAL lParam AS LONG)
EnumFonts(BYVAL hDC AS DWORD, lpsz AS ASCIIZ, BYVAL lpFontEnumProc AS DWORD, BYVAL lParam AS LONG)
EnumObjects(BYVAL hDC AS DWORD, BYVAL n AS LONG, BYVAL lpGOBJEnumProc AS DWORD, lpVoid AS ANY)
EqualRgn(BYVAL hSrcRgn1 AS DWORD, BYVAL hSrcRgn2 AS DWORD)
Escape(BYVAL hdc AS DWORD, BYVAL nEscape AS LONG, BYVAL nCount AS LONG, lpInData AS ASCIIZ, lpOutData AS ANY)
ExtEscape(BYVAL hdc AS DWORD, BYVAL nEscape AS LONG, BYVAL cbInput AS LONG, lpszInData AS ASCIIZ, BYVAL cbOutput AS LONG, lpszOutData AS ASCIIZ)
ExcludeClipRect(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG)
ExtCreateRegion(lpXform AS xform, BYVAL nCount AS DWORD, lpRgnData AS ANY)
ExtFloodFill(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL crColor AS DWORD, BYVAL wFillType AS DWORD)
FillRgn(BYVAL hdc AS DWORD, BYVAL hRgn AS DWORD, BYVAL hBrush AS DWORD)
FloodFill(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL crColor AS DWORD)
FrameRgn(BYVAL hdc AS DWORD, BYVAL hRgn AS DWORD, BYVAL hBrush AS DWORD, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG)
GetROP2(BYVAL hdc AS DWORD)
GetAspectRatioFilterEx(BYVAL hdc AS DWORD, lpAspectRatio AS SIZEL)
GetBkColor(BYVAL hdc AS DWORD)
GetDCBrushColor(BYVAL hdc AS DWORD)
GetDCPenColor(BYVAL hdc AS DWORD)
GetBkMode(BYVAL hdc AS DWORD)
GetBitmapBits(BYVAL hBitmap AS DWORD, BYVAL cbBuffer AS LONG, lpBits AS ANY)
GetBitmapDimensionEx(BYVAL hBitmap AS DWORD, lpDimension AS SIZEL)
GetBoundsRect(BYVAL hdc AS DWORD, lprcBounds AS RECT, BYVAL flags AS DWORD)
GetBrushOrgEx(BYVAL hDC AS DWORD, lpPoint AS POINTAPI)
GetCharWidth(BYVAL hdc AS DWORD, BYVAL dFirstChar AS DWORD, BYVAL dLastChar AS DWORD, lpBuffer AS LONG)
GetCharWidth32(BYVAL hdc AS DWORD, BYVAL dFirstChar AS DWORD, BYVAL dLastChar AS DWORD, lpBuffer AS LONG)
GetCharWidthFloat(BYVAL hdc AS DWORD, BYVAL dFirstChar AS DWORD, BYVAL dLastChar AS DWORD, pxBuffer AS ANY)
GetCharABCWidths(BYVAL hdc AS DWORD, BYVAL dFirstChar AS DWORD, BYVAL dLastChar AS DWORD, lpabc AS ABC)
GetCharABCWidthsFloat(BYVAL hdc AS DWORD, BYVAL dFirstChar AS DWORD, BYVAL dLastChar AS DWORD, lpABCF AS ABCFLOAT)
GetClipBox(BYVAL hdc AS DWORD, lpRect AS RECT)
GetClipRgn(BYVAL hdc AS DWORD, BYVAL hRgn AS DWORD)
GetMetaRgn(BYVAL hdc AS DWORD, BYVAL hRgn AS DWORD)
GetCurrentObject(BYVAL hdc AS DWORD, BYVAL uObjectType AS DWORD)
GetCurrentPositionEx(BYVAL hdc AS DWORD, lpPoint AS POINTAPI)
GetDeviceCaps(BYVAL hdc AS DWORD, BYVAL nIndex AS LONG)
GetDIBits(BYVAL hdc AS DWORD, BYVAL hBitmap AS DWORD, BYVAL nStartScan AS DWORD, BYVAL nNumScans AS DWORD, lpBits AS ANY, lpBI AS BITMAPINFO, BYVAL wUsage AS DWORD)
GetFontData(BYVAL hdc AS DWORD, BYVAL dwTable AS DWORD, BYVAL dwOffset AS DWORD, lpvBuffer AS ANY, BYVAL cbData AS DWORD)
GetGlyphOutline(BYVAL hdc AS DWORD, BYVAL uChar AS DWORD, BYVAL ufFormat AS DWORD, lpgm AS GLYPHMETRICS, BYVAL cbBuffer AS DWORD, lpBuffer AS ANY, lpmat2 AS MAT2)
GetGraphicsMode(BYVAL hdc AS DWORD)
GetMapMode(BYVAL hdc AS DWORD)
GetMetaFileBitsEx(BYVAL hMF AS DWORD, BYVAL nSize AS DWORD, lpvData AS ANY)
GetMetaFile(lpFileName AS ASCIIZ)
GetNearestColor(BYVAL hdc AS DWORD, BYVAL crColor AS DWORD)
GetNearestPaletteIndex(BYVAL hPalette AS DWORD, BYVAL crColor AS DWORD)
GetObjectType(BYVAL hgdiobj AS DWORD)
GetOutlineTextMetrics(BYVAL hdc AS DWORD, BYVAL cbData AS DWORD, lpotm AS OUTLINETEXTMETRIC)
GetPaletteEntries(BYVAL hPalette AS DWORD, BYVAL wStartIndex AS DWORD, BYVAL wNumEntries AS DWORD, lpPaletteEntries AS PALETTEENTRY)
GetPixel(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
GetPixelFormat(BYVAL hDC AS DWORD)
GetPolyFillMode(BYVAL hdc AS DWORD)
GetRasterizerCaps(lpraststat AS RASTERIZER_STATUS, BYVAL cb AS DWORD)
GetRegionData(BYVAL hRgn AS DWORD, BYVAL dwCount AS DWORD, lpRgnData AS RgnData)
GetRgnBox(BYVAL hRgn AS DWORD, lpRect AS RECT)
GetStockObject(BYVAL nIndex AS LONG)
GetStretchBltMode(BYVAL hdc AS DWORD)
GetSystemPaletteEntries(BYVAL hdc AS DWORD, BYVAL wStartIndex AS DWORD, BYVAL wNumEntries AS DWORD, lpPaletteEntries AS PALETTEENTRY)
GetSystemPaletteUse(BYVAL hdc AS DWORD)
GetTextCharacterExtra(BYVAL hdc AS DWORD)
GetTextAlign(BYVAL hdc AS DWORD)
GetTextColor(BYVAL hdc AS DWORD)
GetTextExtentPoint(BYVAL hdc AS DWORD, lpszString AS ASCIIZ, BYVAL cbString AS LONG, lpSize AS SIZEL)
GetTextExtentPoint32(BYVAL hdc AS DWORD, lpsz AS ASCIIZ, BYVAL cbString AS LONG, lpSize AS SIZEL)
GetTextExtentExPoint(BYVAL hdc AS DWORD, lpszStr AS ASCIIZ, BYVAL cchString AS LONG, BYVAL nMaxExtent AS LONG, lpnFit AS LONG, alpDx AS LONG, lpSize AS SIZEL)
GetTextCharset(BYVAL hdc AS DWORD)
GetTextCharsetInfo(BYVAL hdc AS DWORD, lpSig AS FONTSIGNATURE, BYVAL dwFlags AS DWORD)
TranslateCharsetInfo(lpSrc AS DWORD, lpcs AS CHARSETINFO, BYVAL dwFlags AS DWORD)
GetFontLanguageInfo(BYVAL hdc AS DWORD)
GetCharacterPlacement(BYVAL hdc AS DWORD, lpsz AS ASCIIZ, BYVAL n1 AS LONG, BYVAL n2 AS LONG, lpGcpResults AS GCP_RESULTS, BYVAL dw AS DWORD)
GetGlyphIndices(BYVAL hdc AS DWORD, lpstr AS ASCIIZ, BYVAL c AS LONG, pgi AS WORD, BYVAL fl AS DWORD)
GetTextExtentPointI(BYVAL hdc AS DWORD, pgiIn AS WORD, BYVAL cgi AS LONG, lpSize AS SIZEL)
GetTextExtentExPointI(BYVAL hdc AS DWORD, pgiIn AS WORD, BYVAL cgi AS LONG, BYVAL nMaxExtent AS LONG, lpnFit AS LONG, alpDx AS LONG, lpSize AS SIZEL)
GetCharWidthI(BYVAL hdc AS DWORD, BYVAL giFirst AS DWORD, BYVAL cgi AS DWORD, pgi AS ANY, lpBuffer AS ANY)
GetCharABCWidthsI(BYVAL hdc AS DWORD, BYVAL giFirst AS DWORD, BYVAL cgi AS DWORD, pgi AS ANY, lpabc AS ANY)
AddFontResourceEx(lpszFileName AS ASCIIZ, BYVAL fl AS DWORD, BYVAL pdv AS DWORD)
RemoveFontResourceEx(lpFileName AS ASCIIZ, BYVAL fl AS DWORD, BYVAL pdv AS DWORD)
AddFontMemResourceEx(BYVAL pbFont AS DWORD, BYVAL cbFont AS DWORD, BYVAL pdv AS DWORD, pcFonts AS DWORD)
RemoveFontMemResourceEx(BYVAL fh AS DWORD)
CreateFontIndirectEx(penumlfex AS ENUMLOGFONTEXDV)
GetViewportExtEx(BYVAL hdc AS DWORD, lpSize AS SIZEL)
GetViewportOrgEx(BYVAL hdc AS DWORD, lpPoint AS POINTAPI)
GetWindowExtEx(BYVAL hdc AS DWORD, lpSize AS SIZEL)
GetWindowOrgEx(BYVAL hdc AS DWORD, lpPoint AS POINTAPI)
IntersectClipRect(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG)
InvertRgn(BYVAL hdc AS DWORD, BYVAL hRgn AS DWORD)
LineDDA(BYVAL n1 AS LONG, BYVAL n2 AS LONG, BYVAL n3 AS LONG, BYVAL n4 AS LONG, BYVAL lpLineDDAProc AS DWORD, BYVAL lParam AS LONG)
LineTo(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
MaskBlt(BYVAL hdcDest AS DWORD, BYVAL nXDest AS LONG, BYVAL nYDest AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL hdcSrc AS DWORD, BYVAL nXSrc AS LONG, BYVAL nYSrc AS LONG, BYVAL hbmMask AS DWORD, BYVAL xMask AS LONG, BYVAL yMask AS LONG, BYVAL dwRop AS DWORD)
PlgBlt(BYVAL hdcDest AS DWORD, lpPoint AS POINTAPI, BYVAL hdcSrc AS DWORD, BYVAL nXSrc AS LONG, BYVAL nYSrc AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL hbmMask AS DWORD, BYVAL xMask AS LONG, BYVAL yMask AS LONG)
OffsetClipRgn(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
OffsetRgn(BYVAL hRgn AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
PatBlt(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL dwRop AS DWORD)
Pie(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG, BYVAL X3 AS LONG, BYVAL Y3 AS LONG, BYVAL X4 AS LONG, BYVAL Y4 AS LONG)
PlayMetaFile(BYVAL hdc AS DWORD, BYVAL hMF AS DWORD)
PaintRgn(BYVAL hdc AS DWORD, BYVAL hRgn AS DWORD)
PolyPolygon(BYVAL hdc AS DWORD, lpPoint AS POINTAPI, lpPolyCounts AS LONG, BYVAL nCount AS LONG)
PtInRegion(BYVAL hRgn AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
PtVisible(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
RectInRegion(BYVAL hRgn AS DWORD, lpRect AS RECT)
RectVisible(BYVAL hdc AS DWORD, lpRect AS RECT)
Rectangle(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG)
RestoreDC(BYVAL hdc AS DWORD, BYVAL nSavedDC AS LONG)
ResetDC(BYVAL hdc AS DWORD, lpInitData AS DEVMODE)
RealizePalette(BYVAL hdc AS DWORD)
RemoveFontResource(lpFileName AS ASCIIZ)
RoundRect(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG, BYVAL X3 AS LONG, BYVAL Y3 AS LONG)
ResizePalette(BYVAL hPalette AS DWORD, BYVAL nNumEntries AS DWORD)
SaveDC(BYVAL hdc AS DWORD)
SelectClipRgn(BYVAL hdc AS DWORD, BYVAL hRgn AS DWORD)
ExtSelectClipRgn(BYVAL hdc AS DWORD, BYVAL hRgn AS DWORD, BYVAL fnMode AS LONG)
SetMetaRgn(BYVAL hdc AS DWORD)
SelectObject(BYVAL hdc AS DWORD, BYVAL hObject AS DWORD)
SelectPalette(BYVAL hdc AS DWORD, BYVAL hPalette AS DWORD, BYVAL bForceBackground AS LONG)
SetBkColor(BYVAL hdc AS DWORD, BYVAL crColor AS DWORD)
SetDCBrushColor(BYVAL hdc AS DWORD, BYVAL crColor AS DWORD)
SetDCPenColor(BYVAL hdc AS DWORD, BYVAL crColor AS DWORD)
SetBkMode(BYVAL hdc AS DWORD, BYVAL nBkMode AS LONG)
SetBitmapBits(BYVAL hBitmap AS DWORD, BYVAL dwCount AS DWORD, lpBits AS ANY)
SetBoundsRect(BYVAL hdc AS DWORD, lprcBounds AS RECT, BYVAL flags AS DWORD)
SetDIBits(BYVAL hdc AS DWORD, BYVAL hBitmap AS DWORD, BYVAL nStartScan AS DWORD, BYVAL nNumScans AS DWORD, lpBits AS ANY, lpBI AS BITMAPINFO, BYVAL wUsage AS DWORD)
SetDIBitsToDevice(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL dx AS DWORD, BYVAL dy AS DWORD, BYVAL SrcX AS LONG, BYVAL SrcY AS LONG, BYVAL xScan AS DWORD, BYVAL NumScans AS DWORD, xBits AS ANY, BitsInfo AS BITMAPINFO, BYVAL wUsage AS DWORD)
SetMapperFlags(BYVAL hdc AS DWORD, BYVAL dwFlag AS DWORD)
SetGraphicsMode(BYVAL hdc AS DWORD, BYVAL iMode AS LONG)
SetMapMode(BYVAL hdc AS DWORD, BYVAL nMapMode AS LONG)
SetMetaFileBitsEx(BYVAL nSize AS DWORD, lpData AS BYTE)
SetPaletteEntries(BYVAL hPalette AS DWORD, BYVAL wStartIndex AS DWORD, BYVAL wNumEntries AS DWORD, lpPaletteEntries AS PALETTEENTRY)
SetPixel(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL crColor AS DWORD)
SetPixelV(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL crColor AS DWORD)
SetPixelFormat(BYVAL hDC AS DWORD, BYVAL n AS LONG, pcPixelFormatDescriptor AS PIXELFORMATDESCRIPTOR)
SetPolyFillMode(BYVAL hdc AS DWORD, BYVAL nPolyFillMode AS LONG)
StretchBlt(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL hSrcDC AS DWORD, BYVAL xSrc AS LONG, BYVAL ySrc AS LONG, BYVAL nSrcWidth AS LONG, BYVAL nSrcHeight AS LONG, BYVAL dwRop AS DWORD)
SetRectRgn(BYVAL hRgn AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG)
StretchDIBits(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL dx AS LONG, BYVAL dy AS LONG, BYVAL SrcX AS LONG, BYVAL SrcY AS LONG, BYVAL nSrcWidth AS LONG, BYVAL nSrcHeight AS LONG, lpBits AS ANY, lpBitsInfo AS BITMAPINFO, BYVAL uUsage AS DWORD, BYVAL dwRop AS DWORD)
SetROP2(BYVAL hdc AS DWORD, BYVAL nDrawMode AS LONG)
SetStretchBltMode(BYVAL hdc AS DWORD, BYVAL nStretchMode AS LONG)
SetSystemPaletteUse(BYVAL hdc AS DWORD, BYVAL uUsage AS DWORD)
SetTextCharacterExtra(BYVAL hdc AS DWORD, BYVAL nCharExtra AS LONG)
SetTextColor(BYVAL hdc AS DWORD, BYVAL crColor AS DWORD)
SetTextAlign(BYVAL hdc AS DWORD, BYVAL dwFlags AS DWORD)
SetTextJustification(BYVAL hdc AS DWORD, BYVAL nBreakExtra AS LONG, BYVAL nBreakCount AS LONG)
UpdateColors(BYVAL hdc AS DWORD)
AlphaBlend(BYVAL hdcDest AS DWORD, BYVAL nXOriginDest AS LONG, BYVAL nYOriginDest AS LONG, BYVAL nWidthDest AS LONG, BYVAL nHeightDest AS LONG, BYVAL hdcSrc AS DWORD, BYVAL nXOriginSrc AS LONG, BYVAL nYOriginSrc AS LONG, BYVAL nWidthSrc AS LONG, BYVAL nHeightSrc AS LONG, BYVAL bf AS DWORD)
TransparentBlt(BYVAL hdcDest AS DWORD, BYVAL nXOriginDest AS LONG, BYVAL nYOriginDest AS LONG, BYVAL nWidthDest AS LONG, BYVAL hHeightDest AS DWORD, BYVAL hdcSrc AS DWORD, BYVAL nXOriginSrc AS LONG, BYVAL nYOriginSrc AS LONG, BYVAL nWidthSrc AS LONG, BYVAL nHeightSrc AS LONG, BYVAL crTransparent AS DWORD)
GradientFill(BYVAL hdc AS DWORD, pVertex AS TRIVERTEX, BYVAL dwNumVertex AS DWORD, pMesh AS ANY, BYVAL dwNumMesh AS DWORD, BYVAL dwMode AS DWORD)
PlayMetaFileRecord(BYVAL hdc AS DWORD, lpHandletable AS HANDLETABLE, lpMetaRecord AS METARECORD, BYVAL nHandles AS DWORD)
EnumMetaFile(BYVAL hDC AS DWORD, BYVAL hMetafile AS DWORD, BYVAL lpMFEnumProc AS DWORD, BYVAL lParam AS LONG)
CloseEnhMetaFile(BYVAL hdc AS DWORD)
CopyEnhMetaFile(BYVAL hemfSrc AS DWORD, lpszFile AS ASCIIZ)
CreateEnhMetaFile(BYVAL hdcRef AS DWORD, lpFileName AS ASCIIZ, lpRect AS RECT, lpDescription AS ASCIIZ)
DeleteEnhMetaFile(BYVAL hemf AS DWORD)
EnumEnhMetaFile(BYVAL hdc AS DWORD, BYVAL hemf AS DWORD, BYVAL lpEnhMetaFunc AS DWORD, lpData AS ANY, lpRect AS RECT)
GetEnhMetaFile(lpszMetaFile AS ASCIIZ)
GetEnhMetaFileBits(BYVAL hemf AS DWORD, BYVAL cbBuffer AS DWORD, lpbBuffer AS BYTE)
GetEnhMetaFileDescription(BYVAL hemf AS DWORD, BYVAL cchBuffer AS DWORD, lpszDescription AS ASCIIZ)
GetEnhMetaFileHeader(BYVAL hemf AS DWORD, BYVAL cbBuffer AS DWORD, lpemh AS ENHMETAHEADER)
GetEnhMetaFilePaletteEntries(BYVAL hemf AS DWORD, BYVAL cEntries AS DWORD, lppe AS PALETTEENTRY)
GetEnhMetaFilePixelFormat(BYVAL hemf AS DWORD, BYVAL cbBuffer AS DWORD, ppfd AS PIXELFORMATDESCRIPTOR)
GetWinMetaFileBits(BYVAL hemf AS DWORD, BYVAL cbBuffer AS DWORD, lpbBuffer AS BYTE, BYVAL fnMapMode AS LONG, BYVAL hdcRef AS DWORD)
PlayEnhMetaFile(BYVAL hdc AS DWORD, BYVAL hemf AS DWORD, lpRect AS RECT)
PlayEnhMetaFileRecord(BYVAL hdc AS DWORD, lpHandletable AS HANDLETABLE, lpEnhMetaRecord AS ENHMETARECORD, BYVAL nHandles AS DWORD)
SetEnhMetaFileBits(BYVAL cbBuffer AS DWORD, lpData AS BYTE)
SetWinMetaFileBits(BYVAL cbBuffer AS DWORD, lpbBuffer AS BYTE, BYVAL hdcRef AS DWORD, lpmfp AS METAFILEPICT)
GdiComment(BYVAL hdc AS DWORD, BYVAL cbSize AS DWORD, lpData AS BYTE)
GetTextMetrics(BYVAL hdc AS DWORD, lpMetrics AS TEXTMETRIC)
AngleArc(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL dwRadius AS DWORD, BYVAL eStartAngle AS SINGLE, BYVAL eSweepAngle AS SINGLE)
PolyPolyline(BYVAL hdc AS DWORD, lppt AS POINTAPI, lpdwPolyPoints AS DWORD, BYVAL cCount AS DWORD)
GetWorldTransform(BYVAL hdc AS DWORD, lpXform AS XFORM)
SetWorldTransform(BYVAL hdc AS DWORD, lpXform AS XFORM)
ModifyWorldTransform(BYVAL hdc AS DWORD, lpXform AS xform, BYVAL dwMode AS DWORD)
CombineTransform(lpXFORMResult AS XFORM, lpXFORM1 AS XFORM, lpXFORM2 AS XFORM)
CreateDIBSection(BYVAL hdc AS DWORD, pbmi AS BITMAPINFO, BYVAL dwUsage AS DWORD, BYVAL ppvBits AS DWORD, BYVAL hSection AS DWORD, BYVAL dwOffset AS DWORD)
GetDIBColorTable(BYVAL hDC AS DWORD, BYVAL uStartIndex AS DWORD, BYVAL cEntries AS DWORD, pRGBQuad AS RGBQUAD)
SetDIBColorTable(BYVAL hDC AS DWORD, BYVAL uStartIndex AS DWORD, BYVAL cEntries AS DWORD, pcRGBQuad AS RGBQUAD)
SetColorAdjustment(BYVAL hdc AS DWORD, lpca AS COLORADJUSTMENT)
GetColorAdjustment(BYVAL hdc AS DWORD, lpca AS COLORADJUSTMENT)
CreateHalftonePalette(BYVAL hdc AS DWORD)
StartDoc(BYVAL hdc AS DWORD, lpdi AS DOCINFO)
EndDoc(BYVAL hdc AS DWORD)
StartPage(BYVAL hdc AS DWORD)
EndPage(BYVAL hdc AS DWORD)
AbortDoc(BYVAL hdc AS DWORD)
SetAbortProc(BYVAL hDC AS DWORD, BYVAL lpAbortProc AS DWORD)
AbortPath(BYVAL hdc AS DWORD)
ArcTo(BYVAL hdc AS DWORD, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG, BYVAL X3 AS LONG, BYVAL Y3 AS LONG, BYVAL X4 AS LONG, BYVAL Y4 AS LONG)
BeginPath(BYVAL hdc AS DWORD)
CloseFigure(BYVAL hdc AS DWORD)
EndPath(BYVAL hdc AS DWORD)
FillPath(BYVAL hdc AS DWORD)
FlattenPath(BYVAL hdc AS DWORD)
GetPath(BYVAL hdc AS DWORD, lpPoint AS POINTAPI, lpTypes AS BYTE, BYVAL nSize AS DWORD)
PathToRegion(BYVAL hdc AS DWORD)
PolyDraw(BYVAL hdc AS DWORD, lppt AS POINTAPI, lpbTypes AS BYTE, BYVAL cCount AS LONG)
SelectClipPath(BYVAL hdc AS DWORD, BYVAL iMode AS LONG)
SetArcDirection(BYVAL hdc AS DWORD, BYVAL ArcDirection AS LONG)
SetMiterLimit(BYVAL hdc AS DWORD, BYVAL eNewLimit AS SINGLE, peOldLimit AS SINGLE)
StrokeAndFillPath(BYVAL hdc AS DWORD)
StrokePath(BYVAL hdc AS DWORD)
WidenPath(BYVAL hdc AS DWORD)
ExtCreatePen(BYVAL dwPenStyle AS DWORD, BYVAL dwWidth AS DWORD, lplb AS LOGBRUSH, BYVAL dwStyleCount AS DWORD, lpStyle AS DWORD)
GetMiterLimit(BYVAL hdc AS DWORD, peLimit AS SINGLE)
GetArcDirection(BYVAL hdc AS DWORD)
GetObject(BYVAL hObject AS DWORD, BYVAL nCount AS LONG, lpObject AS ANY)
MoveToEx(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, lpPoint AS POINTAPI)
MoveTo(BYVAL hDC AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
TextOut(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, lpString AS ASCIIZ, BYVAL nCount AS LONG)
ExtTextOut(BYVAL hdc AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL dwOptions AS DWORD, lpRect AS RECT, lpString AS ASCIIZ, BYVAL nCount AS DWORD, lpDx AS LONG)
PolyTextOut(BYVAL hdc AS DWORD, pptxt AS POLYTEXT, cStrings AS LONG)
CreatePolygonRgn(lpPoint AS POINTAPI, BYVAL nCount AS LONG, BYVAL nPolyFillMode AS LONG)
DPtoLP(BYVAL hdc AS DWORD, lpPoint AS POINTAPI, BYVAL nCount AS LONG)
LPtoDP(BYVAL hdc AS DWORD, lpPoint AS POINTAPI, BYVAL nCount AS LONG)
Polygon(BYVAL hdc AS DWORD, lpPoint AS POINTAPI, BYVAL nCount AS LONG)
Polyline(BYVAL hdc AS DWORD, lpPoint AS POINTAPI, BYVAL nCount AS LONG)
PolyBezier(BYVAL hdc AS DWORD, lppt AS POINTAPI, BYVAL cPoints AS DWORD)
PolyBezierTo(BYVAL hdc AS DWORD, lppt AS POINTAPI, BYVAL cCount AS DWORD)
PolylineTo(BYVAL hdc AS DWORD, lppt AS POINTAPI, BYVAL cCount AS DWORD)
SetViewportExtEx(BYVAL hdc AS DWORD, BYVAL nX AS LONG, BYVAL nY AS LONG, lpSize AS SIZEL)
SetViewportOrgEx(BYVAL hdc AS DWORD, BYVAL nX AS LONG, BYVAL nY AS LONG, lpPoint AS POINTAPI)
SetWindowExtEx(BYVAL hdc AS DWORD, BYVAL nX AS LONG, BYVAL nY AS LONG, lpSize AS SIZEL)
SetWindowOrgEx(BYVAL hdc AS DWORD, BYVAL nX AS LONG, BYVAL nY AS LONG, lpPoint AS POINTAPI)
OffsetViewportOrgEx(BYVAL hdc AS DWORD, BYVAL nX AS LONG, BYVAL nY AS LONG, lpPoint AS POINTAPI)
OffsetWindowOrgEx(BYVAL hdc AS DWORD, BYVAL nX AS LONG, BYVAL nY AS LONG, lpPoint AS POINTAPI)
ScaleViewportExtEx(BYVAL hdc AS DWORD, BYVAL nXnum AS LONG, BYVAL nXdenom AS LONG, BYVAL nYnum AS LONG, BYVAL nYdenom AS LONG, lpSize AS SIZEL)
ScaleWindowExtEx(BYVAL hdc AS DWORD, BYVAL nXnum AS LONG, BYVAL nXdenom AS LONG, BYVAL nYnum AS LONG, BYVAL nYdenom AS LONG, lpSize AS SIZEL)
SetBitmapDimensionEx(BYVAL hbm AS DWORD, BYVAL nX AS LONG, BYVAL nY AS LONG, lpSize AS SIZEL)
SetBrushOrgEx(BYVAL hdc AS DWORD, BYVAL nXOrg AS LONG, BYVAL nYOrg AS LONG, lppt AS POINTAPI)
GetTextFace(BYVAL hdc AS DWORD, BYVAL nCount AS LONG, lpFacename AS ASCIIZ)
GetKerningPairs(BYVAL hdc AS DWORD, BYVAL cPairs AS DWORD, lpkrnpair AS KERNINGPAIR)
GetDCOrgEx(BYVAL hdc AS DWORD, lpPoint AS POINTAPI)
FixBrushOrgEx(BYVAL hDC AS DWORD, BYVAL n1 AS LONG, BYVAL n2 AS LONG, lpPoint AS POINTAPI)
UnrealizeObject(BYVAL hObject AS DWORD)
GdiFlush()
GdiSetBatchLimit(BYVAL dwLimit AS DWORD)
GdiGetBatchLimit()
SetICMMode(BYVAL hdc AS DWORD, BYVAL n AS LONG)
CheckColorsInGamut(BYVAL hDC AS DWORD, lpRGBTriples AS ANY, lpBuffer AS ANY, BYVAL nCount AS DWORD)
GetColorSpace(BYVAL hdc AS DWORD)
GetLogColorSpace(BYVAL hColorSpace AS DWORD, lpBuffer AS LOGCOLORSPACE, BYVAL nSize AS DWORD)
CreateColorSpace(lpLogColorSpace AS LOGCOLORSPACE)
SetColorSpace(BYVAL hdc AS DWORD, BYVAL hColorSpace AS DWORD)
DeleteColorSpace(BYVAL hColorSpace AS DWORD)
GetICMProfile(BYVAL hDC AS DWORD, BYVAL lpcbName AS DWORD, lpszFilename AS ASCIIZ)
SetICMProfile(BYVAL hDC AS DWORD, lpFileName AS ASCIIZ)
GetDeviceGammaRamp(BYVAL hDC AS DWORD, lpRamp AS ANY)
SetDeviceGammaRamp(BYVAL hDC AS DWORD, lpRamp AS ANY)
ColorMatchToTarget(BYVAL hDC AS DWORD, BYVAL hdcTarget AS DWORD, BYVAL uiAction AS DWORD)
EnumICMProfiles(BYVAL hdc AS DWORD, BYVAL icmEnumProc AS DWORD, BYVAL lParam AS LONG)
UpdateICMRegKey(BYVAL dwReserved AS DWORD, lpszCMID AS ASCIIZ, lpszFileName AS ASCIIZ, BYVAL nCommand AS DWORD)
ColorCorrectPalette(BYVAL hDC AS DWORD, BYVAL hPalette AS DWORD, BYVAL dwFirstEntry AS DWORD, BYVAL dwNumOfEntries AS DWORD)
SwapBuffers(BYVAL hDC AS DWORD)
wglCopyContext(BYVAL hglrcSrc AS DWORD, BYVAL hlglrcDst AS DWORD, BYVAL dMask AS DWORD)
wglCreateContext(BYVAL hdc AS DWORD)
wglCreateLayerContext(BYVAL hdc AS DWORD, BYVAL iLayerPlane AS LONG)
wglDeleteContext(BYVAL hglrc AS DWORD)
wglGetCurrentContext()
wglGetCurrentDC()
wglGetProcAddress(lpszProc AS ASCIIZ)
wglMakeCurrent(BYVAL hdc AS DWORD, BYVAL hglrc AS DWORD)
wglShareLists(BYVAL hglrc1 AS DWORD, BYVAL hglrc2 AS DWORD)
wglUseFontBitmaps(BYVAL hdc AS DWORD, BYVAL dFirst AS DWORD, BYVAL dCount AS DWORD, BYVAL dListBase AS DWORD)
wglUseFontOutlines(BYVAL hdc AS DWORD, BYVAL dFirst AS DWORD, BYVAL dCount AS DWORD, BYVAL dListBase AS DWORD, BYVAL deviation AS SINGLE, BYVAL extrusion AS SINGLE, BYVAL iFormat AS LONG, BYVAL lpgmf AS DWORD)
wglDescribeLayerPlane(BYVAL hdc AS DWORD, BYVAL iPixelFormat AS LONG, BYVAL iLayerPlane AS LONG, BYVAL nBytes AS DWORD, plpd AS LAYERPLANEDESCRIPTOR)
wglSetLayerPaletteEntries(BYVAL hdc AS DWORD, BYVAL iLayerPlane AS LONG, BYVAL iStart AS LONG, BYVAL cEntries AS LONG, pcr AS DWORD)
wglGetLayerPaletteEntries(BYVAL hdc AS DWORD, BYVAL iLayerPlane AS LONG, BYVAL iStart AS LONG, BYVAL cEntries AS LONG, pcr AS DWORD)
wglRealizeLayerPalette(BYVAL hdc AS DWORD, BYVAL iLayerPlane AS LONG, BYVAL fRealize AS LONG)
wglSwapLayerBuffers(BYVAL hdc AS DWORD, BYVAL dfPlanes AS DWORD)
IsDestinationReachable(lpszDestination AS ASCIIZ, lpQOCInfo AS QOCINFO)
IsNetworkAlive(lpdwFlags AS DWORD)
ChangeDisplaySettings(lpDevMode AS DEVMODE, BYVAL dwFlags AS DWORD)
ChangeDisplaySettingsEx(lpszDeviceName AS ASCIIZ, lpDevMode AS DEVMODE, BYVAL hwnd AS DWORD, BYVAL dwFlags AS DWORD, lParam AS VIDEOPARAMETERS)
CreateDesktop(lpszDesktop AS ASCIIZ, lpszDevice AS ASCIIZ, pDevmode AS DEVMODE, BYVAL dwFlags AS DWORD, BYVAL dwDesiredAccess AS DWORD, lpsa AS SECURITY_ATTRIBUTES)
EnumDisplaySettings(lpszDeviceName AS ASCIIZ, BYVAL iModeNum AS DWORD, lpDevMode AS DEVMODE)
EnumDisplaySettingsEx(lpszDeviceName AS ASCIIZ, BYVAL iModeNum AS DWORD, lpDevMode AS DEVMODE, BYVAL dwFlags AS DWORD)
UpdateLayeredWindow(BYVAL hWnd AS DWORD, BYVAL hdcDst AS DWORD, pptDst AS POINTAPI, psize AS SIZEL, BYVAL hdcSrc AS DWORD, pptSrc AS POINTAPI, BYVAL crKey AS DWORD, pblend AS BLENDFUNCTION, BYVAL dwFlags AS DWORD)
ActivateKeyboardLayout(BYVAL HKL AS DWORD, BYVAL flags AS DWORD)
AdjustWindowRect(lpRect AS RECT, BYVAL dwStyle AS DWORD, BYVAL bMenu AS LONG)
AdjustWindowRectEx(lpRect AS RECT, BYVAL dsStyle AS LONG, BYVAL bMenu AS LONG, BYVAL dwEsStyle AS DWORD)
AllowSetForegroundWindow(BYVAL dwProcessId AS DWORD)
AnimateWindow(BYVAL hWnd AS DWORD, BYVAL dwTime AS DWORD, BYVAL dwFlags AS DWORD)
AnyPopup()
AppendMenu(BYVAL hMenu AS DWORD, BYVAL uFlags AS DWORD, BYVAL uIDNewItem AS DWORD, lpNewItem AS ASCIIZ)
ArrangeIconicWindows(BYVAL hWnd AS DWORD)
AttachThreadInput(BYVAL idAttach AS DWORD, BYVAL idAttachTo AS DWORD, BYVAL fAttach AS LONG)
BeginDeferWindowPos(BYVAL nNumWindows AS LONG)
BeginPaint(BYVAL hWnd AS DWORD, lpPaint AS PAINTSTRUCT)
BringWindowToTop(BYVAL hWnd AS DWORD)
BroadcastSystemMessage(BYVAL dwFlags AS DWORD, pdwRecipients AS DWORD, BYVAL uiMessage AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
BroadcastSystemMessageA(BYVAL dwFlags AS DWORD, pdwRecipients AS DWORD, BYVAL uiMessage AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
BroadcastSystemMessageEx(BYVAL dwFlags AS DWORD, pdwRecipients AS DWORD, BYVAL uiMessage AS DWORD, BYVAL wParam AS DWORD, BYVAL wParam AS LONG, BYVAL lParam AS LONG, pBSMInfo AS BSMINFO)
CallMsgFilter(lpMsg AS tagMSG, BYVAL ncode AS LONG)
CallNextHookEx(BYVAL hHook AS DWORD, BYVAL ncode AS LONG, BYVAL wParam AS DWORD, lParam AS ANY)
CallWindowProc(BYVAL lpPrevWndFunc AS DWORD, BYVAL hWnd AS DWORD, BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
CascadeWindows(BYVAL hwndParent AS DWORD, BYVAL uHow AS DWORD, lpRect AS RECT, BYVAL cKids AS DWORD, lpkids AS DWORD)
ChangeClipboardChain(BYVAL hWnd AS DWORD, BYVAL hWndNext AS DWORD)
ChangeMenu(BYVAL hMenu AS DWORD, BYVAL cmd AS LONG, lpszNewItem AS ASCIIZ, BYVAL cmdInsert AS LONG, BYVAL flags AS LONG)
CharLower(lpsz AS ASCIIZ)
CharLowerBuff(lpsz AS ASCIIZ, BYVAL cchLength AS LONG)
CharNext(lpsz AS ASCIIZ)
CharNextEx(BYVAL CodePage AS WORD, lpCurrentChar AS ASCIIZ, BYVAL dwFlags AS DWORD)
CharPrev(lpszStart AS ASCIIZ, lpszCurrent AS ASCIIZ)
CharPrevEx(BYVAL CodePage AS WORD, lpStart AS ASCIIZ, lpCurrentChar AS ASCIIZ, BYVAL dwFlags AS DWORD)
CharToOem(lpszSrc AS ASCIIZ, lpszDst AS ASCIIZ)
CharToOemBuff(lpszSrc AS ASCIIZ, lpszDst AS ASCIIZ, BYVAL cchDstLength AS LONG)
CharUpper(lpsz AS ASCIIZ)
CharUpperBuff(lpsz AS ASCIIZ, BYVAL cchLength AS LONG)
CheckDlgButton(BYVAL hDlg AS DWORD, BYVAL nIDButton AS LONG, BYVAL uCheck AS DWORD)
CheckMenuItem(BYVAL hMenu AS DWORD, BYVAL uIDCheckItem AS DWORD, BYVAL uCheck AS DWORD)
CheckMenuRadioItem(BYVAL hMenu AS DWORD, BYVAL idFirst AS DWORD, BYVAL idLast AS DWORD, BYVAL idCheck AS DWORD, BYVAL uFlags AS DWORD)
CheckRadioButton(BYVAL hDlg AS DWORD, BYVAL nIDFirstButton AS LONG, BYVAL nIDLastButton AS LONG, BYVAL nIDCheckButton AS LONG)
ChildWindowFromPoint(BYVAL hwndParent AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
ChildWindowFromPointEx(BYVAL hWnd AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL uFlags AS DWORD)
ClientToScreen(BYVAL hWnd AS DWORD, lpPoint AS POINTAPI)
ClipCursor(lpRect AS ANY)
CloseClipboard()
CloseDesktop(BYVAL hDesktop AS DWORD)
CloseWindow(BYVAL hWnd AS DWORD)
CloseWindowStation(BYVAL hWinSta AS DWORD)
CopyAcceleratorTable(BYVAL hAccelSrc AS DWORD, lpAccelDst AS ACCELAPI, BYVAL cAccelEntries AS LONG)
CopyCursor(BYVAL hcur AS DWORD)
CopyIcon(BYVAL hIcon AS DWORD)
CopyImage(BYVAL hImage AS DWORD, BYVAL uType AS DWORD, BYVAL cxDesired AS LONG, BYVAL cyDesired AS LONG, BYVAL fuFlags AS DWORD)
CopyRect(lpDestRect AS RECT, lpSourceRect AS RECT)
CountClipboardFormats()
CreateAcceleratorTable(lpaccl AS ACCELAPI, BYVAL cEntries AS LONG)
CreateCaret(BYVAL hWnd AS DWORD, BYVAL hBitmap AS DWORD, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG)
CreateCursor(BYVAL hInstance AS DWORD, BYVAL nXhotspot AS LONG, BYVAL nYhotspot AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, lpANDbitPlane AS ANY, lpXORbitPlane AS ANY)
CreateDialogIndirectParam(BYVAL hInstance AS DWORD, lpTemplate AS DLGTEMPLATE, BYVAL hWndParent AS DWORD, BYVAL lpDialogFunc AS LONG, BYVAL dwInitParam AS DWORD)
CreateDialogIndirect(BYVAL hInstance AS DWORD, lpTemplate AS DLGTEMPLATE, BYVAL hWndParent AS DWORD, BYVAL lpDialogFunc AS LONG)
CreateDialogParam(BYVAL hInstance AS DWORD, lpName AS ASCIIZ, BYVAL hwndParent AS DWORD, BYVAL lpDialogFunc AS LONG, BYVAL lParamInit AS LONG)
CreateDialog(BYVAL hInstance AS DWORD, lpName AS ASCIIZ, BYVAL hwndParent AS DWORD, BYVAL lpDialogFunc AS LONG)
CreateIcon(BYVAL hInstance AS DWORD, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL nPlanes AS BYTE, BYVAL nBitsPixel AS BYTE, lpANDbits AS BYTE, lpXORbits AS BYTE)
CreateIconFromResource(presbits AS BYTE PTR, BYVAL dwResSize AS DWORD, BYVAL fIcon AS LONG, BYVAL dwVer AS DWORD)
CreateIconFromResourceEx(presbits AS BYTE PTR, BYVAL dwResSize AS DWORD, BYVAL fIcon AS LONG, BYVAL dwVer AS DWORD, BYVAL cxDesired AS LONG, BYVAL cyDesired AS LONG, BYVAL uFlags AS DWORD)
CreateIconFromResource(BYVAL presbits AS BYTE PTR, BYVAL dwResSize AS DWORD, BYVAL fIcon AS LONG, BYVAL dwVer AS DWORD)
CreateIconFromResourceEx(BYVAL presbits AS BYTE PTR, BYVAL dwResSize AS DWORD, BYVAL fIcon AS LONG, BYVAL dwVer AS DWORD, BYVAL cxDesired AS LONG, BYVAL cyDesired AS LONG, BYVAL uFlags AS DWORD)
CreateIconIndirect(piconinfo AS ICONINFO)
CreateMDIWindow(lpClassName AS ASCIIZ, lpWindowName AS ASCIIZ, BYVAL dwStyle AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL hwndParent AS DWORD, BYVAL hInstance AS DWORD, BYVAL lParam AS LONG)
CreateMenu()
CreatePopupMenu()
CreateWindowStation(lpszwinsta AS ASCIIZ, BYVAL dwReserved AS DWORD, BYVAL dwDesiredAccess AS DWORD, lpsa AS SECURITY_ATTRIBUTES)
CreateWindowEx(BYVAL dwExStyle AS DWORD, lpClassName AS ASCIIZ, lpWindowName AS ASCIIZ, BYVAL dwStyle AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL hWndParent AS DWORD, BYVAL hMenu AS DWORD, BYVAL hInstance AS DWORD, lpParam AS ANY)
CreateWindow(lpClassName AS ASCIIZ, lpWindowName AS ASCIIZ, BYVAL dwStyle AS DWORD, BYVAL xx AS LONG, BYVAL yy AS LONG, BYVAL nWidth AS LONG,BYVAL nHeight AS LONG, BYVAL hwndParent AS DWORD, BYVAL hMenu AS DWORD, BYVAL hInstance AS DWORD, BYVAL lpParam AS DWORD)
DdeAbandonTransaction(BYVAL idInst AS DWORD, BYVAL hConv AS DWORD, BYVAL idTransaction AS DWORD)
DdeAccessData(BYVAL hData AS DWORD, pcbDataSize AS DWORD)
DdeAddData(BYVAL hData AS DWORD, pSrc AS ANY, BYVAL cb AS DWORD, BYVAL cbOff AS DWORD)
DdeClientTransaction(pData AS ANY, BYVAL cbData AS DWORD, BYVAL hConv AS DWORD, BYVAL hszItem AS DWORD, BYVAL uFmt AS DWORD, BYVAL uType AS DWORD, BYVAL dwTimeout AS DWORD, pdwResult AS DWORD)
DdeCmpStringHandles(BYVAL hsz1 AS DWORD, BYVAL hsz2 AS DWORD)
DdeConnect(BYVAL idInst AS DWORD, BYVAL hszService AS DWORD, BYVAL hszTopic AS DWORD, pCC AS CONVCONTEXT)
DdeConnectList(BYVAL idInst AS DWORD, BYVAL hszService AS DWORD, BYVAL hszTopic AS DWORD, BYVAL hConvList AS DWORD, pCC AS CONVCONTEXT)
DdeCreateDataHandle(BYVAL idInst AS DWORD, pSrc AS ANY, BYVAL cb AS DWORD, BYVAL cbOff AS DWORD, BYVAL hszItem AS DWORD, BYVAL wFmt AS DWORD, BYVAL afCmd AS DWORD)
DdeCreateStringHandle(BYVAL idInst AS DWORD, psz AS ASCIIZ, BYVAL iCodePage AS DWORD)
DdeDisconnect(BYVAL hConv AS DWORD)
DdeDisconnectList(BYVAL hConvList AS DWORD)
DdeEnableCallback(BYVAL idInst AS DWORD, BYVAL hConv AS DWORD, BYVAL wCmd AS DWORD)
DdeFreeDataHandle(BYVAL hData AS DWORD)
DdeFreeStringHandle(BYVAL idInst AS DWORD, BYVAL hsz AS DWORD)
DdeGetData(BYVAL hData AS DWORD, pDst AS ANY, BYVAL cbMax AS DWORD, BYVAL cbOff AS DWORD)
DdeGetLastError(BYVAL idInst AS DWORD)
DdeImpersonateClient(BYVAL hConv AS DWORD)
DdeInitialize(pidInst AS DWORD, BYVAL pfnCallback AS DWORD, BYVAL afCmd AS DWORD, BYVAL ulRes AS DWORD)
DdeKeepStringHandle(BYVAL idInst AS DWORD, BYVAL hsz AS DWORD)
DdeNameService(BYVAL idInst AS DWORD, BYVAL hsz1 AS DWORD, BYVAL hsz2 AS DWORD, BYVAL afCmd AS LONG)
DdePostAdvise(BYVAL idInst AS DWORD, BYVAL hszTopic AS DWORD, BYVAL hszItem AS DWORD)
DdeQueryConvInfo(BYVAL hConv AS DWORD, BYVAL idTransaction AS DWORD, pConvInfo AS CONVINFO)
DdeQueryNextServer(BYVAL hConvList AS DWORD, BYVAL hConvPrev AS DWORD)
DdeQueryString(BYVAL idInst AS DWORD, BYVAL hsz AS DWORD, psz AS ASCIIZ, BYVAL cchMax AS LONG, BYVAL iCodePage AS DWORD)
DdeReconnect(BYVAL hConv AS DWORD)
DdeSetQualityOfService(BYVAL hWndClient AS DWORD, pqosNew AS SECURITY_QUALITY_OF_SERVICE, pqosPrev AS SECURITY_QUALITY_OF_SERVICE)
DdeSetUserHandle(BYVAL hConv AS DWORD, BYVAL id AS DWORD, BYVAL hUser AS DWORD)
DdeUnaccessData(BYVAL hData AS DWORD)
DdeUninitialize(BYVAL idInst AS DWORD)
DefDlgProc(BYVAL hDlg AS DWORD, BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
DefFrameProc(BYVAL hWnd AS DWORD, BYVAL hWndMDIClient AS DWORD, BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
DefMDIChildProc(BYVAL hWnd AS DWORD, BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
DefWindowProc(BYVAL hWnd AS DWORD, BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
DeferWindowPos(BYVAL hWinPosInfo AS DWORD, BYVAL hWnd AS DWORD, BYVAL hWndInsertAfter AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL cx AS LONG, BYVAL cy AS LONG, BYVAL wFlags AS DWORD)
DeleteMenu(BYVAL hMenu AS DWORD, BYVAL nPosition AS LONG, BYVAL wFlags AS DWORD)
DestroyAcceleratorTable(BYVAL hAccel AS DWORD)
DestroyCaret()
DestroyCursor(BYVAL hCursor AS DWORD)
DestroyIcon(BYVAL hIcon AS DWORD)
DestroyMenu(BYVAL hMenu AS DWORD)
DestroyWindow(BYVAL hWnd AS DWORD)
DialogBoxParam(BYVAL hInstance AS DWORD, lpTemplateName AS ASCIIZ, BYVAL hwndParent AS DWORD, BYVAL lpDialogFunc AS LONG, BYVAL dwInitParam AS DWORD)
DialogBox(BYVAL hInstance AS DWORD, lpTemplateName AS ASCIIZ, BYVAL hwndParent AS DWORD, BYVAL lpDialogFunc AS LONG)
DialogBoxIndirectParam(BYVAL hInstance AS DWORD, hDialogTemplate AS DLGTEMPLATE, BYVAL hwndParent AS DWORD, BYVAL lpDialogFunc AS LONG, BYVAL dwInitParam AS DWORD)
DialogBoxIndirect(BYVAL hInstance AS DWORD, hDialogTemplate AS DLGTEMPLATE, BYVAL hWndParent AS DWORD, BYVAL lpDialogFunc AS LONG)
DispatchMessage(lpMsg AS tagMSG)
DlgDirList(BYVAL hDlg AS DWORD, lpPathSpec AS ASCIIZ, BYVAL nIDListBox AS LONG, BYVAL nIDStaticPath AS LONG, BYVAL uFileType AS DWORD)
DlgDirListComboBox(BYVAL hDlg AS DWORD, lpPathSpec AS ASCIIZ, BYVAL nIDComboBox AS LONG, BYVAL nIDStaticPath AS LONG, BYVAL uFileType AS DWORD)
DlgDirSelectComboBoxEx(BYVAL hWndDlg AS DWORD, lpszPath AS ASCIIZ, BYVAL cbPath AS LONG, BYVAL idComboBox AS LONG)
DlgDirSelectEx(BYVAL hWndDlg AS DWORD, lpszPath AS ASCIIZ, BYVAL cbPath AS LONG, BYVAL idListBox AS LONG)
DefRawInputProc(paRawInput AS ANY, BYVAL nInput AS LONG, BYVAL cbSizeHeader AS DWORD)
DragDetect(BYVAL hWnd AS DWORD, pt AS POINTAPI)
DragObject(BYVAL hwnd1 AS DWORD, BYVAL hwnd2 AS DWORD, BYVAL ui AS DWORD, BYVAL ui2 AS DWORD, BYVAL hCursor AS DWORD)
DrawAnimatedRects(BYVAL hWnd AS DWORD, BYVAL idAni AS LONG, lprcFrom AS RECT, lprcTo AS RECT)
DrawCaption(BYVAL hWnd AS DWORD, BYVAL hDC AS DWORD, pcRect AS RECT, BYVAL uFlags AS DWORD)
DrawEdge(BYVAL hDC AS DWORD, qrc AS RECT, BYVAL edge AS LONG, BYVAL grfFlags AS LONG)
DrawFocusRect(BYVAL hDC AS DWORD, lpRect AS RECT)
DrawFrameControl(BYVAL hDC AS DWORD, lpRect AS RECT, BYVAL un1 AS LONG, BYVAL un2 AS LONG)
DrawIcon(BYVAL hDC AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL hIcon AS DWORD)
DrawIconEx(BYVAL hDC AS DWORD, BYVAL xLeft AS LONG, BYVAL yTop AS LONG, BYVAL hIcon AS DWORD, BYVAL cxWidth AS LONG, BYVAL cyWidth AS LONG, BYVAL istepIfAniCur AS LONG, BYVAL hbrFlickerFreeDraw AS DWORD, BYVAL diFlags AS LONG)
DrawMenuBar(BYVAL hWnd AS DWORD)
DrawState(BYVAL hDC AS DWORD, BYVAL hBrush AS DWORD, BYVAL lpDrawStateProc AS DWORD, BYVAL lParam AS LONG, BYVAL wParam AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL cx AS LONG, BYVAL cy AS LONG, BYVAL fuFlags AS DWORD)
DrawText(BYVAL hDC AS DWORD, lpStr AS ASCIIZ, BYVAL nCount AS LONG, lpRect AS RECT, BYVAL uFormat AS DWORD)
DrawTextEx(BYVAL hDC AS DWORD, lpsz AS ASCIIZ, BYVAL n AS LONG, lpRect AS RECT, BYVAL dwDTFormat AS DWORD, lpDrawTextParams AS DRAWTEXTPARAMS)
EmptyClipboard()
EnableMenuItem(BYVAL hMenu AS DWORD, BYVAL uIDEnableItem AS DWORD, BYVAL uEnable AS DWORD)
EnableScrollBar(BYVAL hWnd AS DWORD, BYVAL uSBflags AS DWORD, BYVAL uArrows AS DWORD)
EnableWindow(BYVAL hWnd AS DWORD, BYVAL fEnable AS LONG)
EndDeferWindowPos(BYVAL hWinPosInfo AS DWORD)
EndDialog(BYVAL hDlg AS DWORD, BYVAL nResult AS LONG)
EndMenu()
EndPaint(BYVAL hWnd AS DWORD, lpPaint AS PAINTSTRUCT)
EnumChildWindows(BYVAL hwndParent AS DWORD, BYVAL lpEnumFunc AS LONG, BYVAL lParam AS LONG)
EnumClipboardFormats(BYVAL uFormat AS DWORD)
EnumDesktopWindows(BYVAL hDesktop AS DWORD, BYVAL lpfn AS LONG, BYVAL lParam AS LONG)
EnumDesktops(BYVAL hWinSta AS DWORD, BYVAL lpEnumFunc AS LONG, BYVAL lParam AS LONG)
EnumDisplayDevices(lpszDevice AS ASCIIZ, BYVAL iDevNum AS DWORD, lpDisplayDevice AS DISPLAY_DEVICE, BYVAL dwFlags AS DWORD)
EnumDisplayMonitors(BYVAL hdc AS DWORD, lprcClip AS RECT, lpfnEnum AS DWORD, BYVAL dwData AS LONG)
EnumProps(BYVAL hWnd AS DWORD, BYVAL lpEnumFunc AS LONG)
EnumPropsEx(BYVAL hWnd AS DWORD, BYVAL lpEnumFunc AS LONG, BYVAL lParam AS LONG)
EnumThreadWindows(BYVAL dwThreadId AS DWORD, BYVAL lpfn AS LONG, BYVAL lParam AS LONG)
EnumWindows(BYVAL lpEnumFunc AS LONG, BYVAL lParam AS LONG)
EnumWindowStations(BYVAL lpEnumFunc AS LONG, BYVAL lParam AS LONG)
EqualRect(lpRect1 AS RECT, lpRect2 AS RECT)
ExcludeUpdateRgn(BYVAL hDC AS DWORD, BYVAL hWnd AS DWORD)
ExitWindows(BYVAL dwReserved AS DWORD, BYVAL uReturnCode AS DWORD)
ExitWindowsEx(BYVAL uFlags AS DWORD, BYVAL dwReserved AS DWORD)
FillRect(BYVAL hDC AS DWORD, lpRect AS RECT, BYVAL hBrush AS DWORD)
FindWindow(lpClassName AS ASCIIZ, lpWindowName AS ASCIIZ)
FindWindowEx(BYVAL hWnd1 AS LONG, BYVAL hWnd2 AS LONG, lpsz1 AS ASCIIZ, lpsz2 AS ASCIIZ)
FlashWindow(BYVAL hWnd AS DWORD, BYVAL bInvert AS LONG)
FlashWindowEx(pfwi AS FLASHWINDOWAPI)
FrameRect(BYVAL hDC AS DWORD, lpRect AS RECT, BYVAL hBrush AS DWORD)
FreeDDElParam(BYVAL msg AS LONG, BYVAL lParam AS LONG)
GetActiveWindow()
GetAltTabInfo(BYVAL hwnd AS DWORD, BYVAL iItem AS LONG, pati AS ALTTABINFO, pszItemText AS ASCIIZ, BYVAL cchItemText AS DWORD)
GetAncestor(BYVAL hwnd AS DWORD, BYVAL gaFlags AS DWORD)
GetAsyncKeyState(BYVAL vKey AS LONG)
GetCapture()
GetCaretBlinkTime()
GetCaretPos(lpPoint AS POINTAPI)
GetClassInfo(BYVAL hInstance AS DWORD, lpClassName AS ASCIIZ, lpWndClass AS WNDCLASS)
GetClassInfoEx(BYVAL hInst AS DWORD, lpszClass AS ASCIIZ, lpWndClass AS WNDCLASSEX)
GetClassLong(BYVAL hwnd AS DWORD, BYVAL nIndex AS LONG)
GetClassName(BYVAL hwnd AS DWORD, lpClassName AS ASCIIZ, BYVAL nMaxCount AS LONG)
GetClassWord(BYVAL hwnd AS DWORD, BYVAL nIndex AS LONG)
GetClientRect(BYVAL hwnd AS DWORD, lpRect AS RECT)
GetClipCursor(lprc AS RECT)
GetClipboardData(BYVAL uFormat AS DWORD)
GetClipboardFormatName(BYVAL uFormat AS DWORD, lpString AS ASCIIZ, BYVAL nMaxCount AS LONG)
GetClipboardOwner()
GetClipboardSequenceNumber()
GetClipboardViewer()
GetComboBoxInfo(BYVAL hwndCombo AS DWORD, pbci AS COMBOBOXINFO)
GetCursor()
GetCursorInfo(pci AS CURSORINFO)
GetCursorPos(lpPoint AS POINTAPI)
GetDC(BYVAL hWnd AS DWORD)
GetDCEx(BYVAL hWnd AS DWORD, BYVAL hRgnClip AS DWORD, BYVAL fdwOptions AS DWORD)
GetDesktopWindow()
GetDialogBaseUnits()
GetDlgCtrlID(BYVAL hWnd AS DWORD)
GetDlgItem(BYVAL hDlg AS DWORD, BYVAL nIDDlgItem AS LONG)
GetDlgItemInt(BYVAL hDlg AS DWORD, BYVAL nIDDlgItem AS LONG, BYVAL lpTranslated AS LONG, BYVAL bSigned AS LONG)
GetDlgItemText(BYVAL hDlg AS DWORD, BYVAL nIDDlgItem AS LONG, lpString AS ASCIIZ, BYVAL nMaxCount AS LONG)
GetDoubleClickTime()
GetFocus()
GetForegroundWindow()
GetGuiResources(BYVAL hProcess AS DWORD, BYVAL uiFlags AS DWORD)
GetGUIThreadInfo(BYVAL idThread AS DWORD, pgui AS GUITHREADINFO)
GetIconInfo(BYVAL hIcon AS DWORD, piconinfo AS ICONINFO)
GetInputState()
GetKBCodePage()
GetKeyNameText(BYVAL lParam AS LONG, lpBuffer AS ASCIIZ, BYVAL nSize AS DWORD)
GetKeyState(BYVAL nVirtKey AS LONG)
GetKeyboardLayout(BYVAL dwLayout AS DWORD)
GetKeyboardLayoutList(BYVAL nBuff AS LONG, lpList AS ANY)
GetKeyboardLayoutName(pwszKLID AS ASCIIZ)
GetKeyboardState(pbKeyState AS BYTE)
GetKeyboardType(BYVAL nTypeFlag AS LONG)
GetLastActivePopup(BYVAL hWndOwner AS DWORD)
GetLastInputInfo(plii AS LASTINPUTINFO)
GetLayeredWindowAttributes(BYVAL hwnd AS DWORD, pcrKey AS DWORD, pbAlpha AS BYTE, pdwFlags AS DWORD)
GetListBoxInfo(BYVAL hwnd AS DWORD)
GetMenu(BYVAL hWnd AS DWORD)
GetMenuBarInfo(BYVAL hwnd AS DWORD, BYVAL idObject AS LONG, BYVAL idItem AS LONG, pmbi AS MENUBARINFO)
GetMenuCheckMarkDimensions()
GetMenuContextHelpId(BYVAL hMenu AS DWORD)
GetMenuDefaultItem(BYVAL hMenu AS DWORD, BYVAL fByPos AS LONG, BYVAL gmdiFlags AS LONG)
GetMenuInfo(BYVAL hmenu AS DWORD, lpcmi AS MENUINFO)
GetMenuItemCount(BYVAL hMenu AS DWORD)
GetMenuItemID(BYVAL hMenu AS DWORD, BYVAL nPos AS LONG)
GetMenuItemInfo(BYVAL hMenu AS DWORD, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG, lpMenuItemInfo AS MENUITEMINFO)
GetMenuItemRect(BYVAL hWnd AS DWORD, BYVAL hMenu AS DWORD, BYVAL uItem AS DWORD, lprcItem AS RECT)
GetMenuState(BYVAL hMenu AS DWORD, BYVAL dwID AS DWORD, BYVAL dwFlags AS DWORD)
GetMenuString(BYVAL hMenu AS DWORD, BYVAL uIDItem AS DWORD, lpString AS ASCIIZ, BYVAL nMaxCount AS LONG, BYVAL uFlag AS DWORD)
GetMessage(lpMsg AS tagMSG, BYVAL hWnd AS DWORD, BYVAL uMsgFilterMin AS DWORD, BYVAL uMsgFilterMax AS DWORD)
GetMessageExtraInfo()
GetMessagePos()
GetMessageTime()
GetMonitorInfo(BYVAL hMonitor AS DWORD, lpmi AS MONITORINFO)
GetMouseMovePointsEx(BYVAL cbSize AS DWORD, lppt AS MOUSEMOVEPOINT, lpptBuf AS ANY, BYVAL nBufPoints AS LONG, BYVAL resolution AS DWORD)
GetNextDlgGroupItem(BYVAL hDlg AS DWORD, BYVAL hCtl AS DWORD, BYVAL bPrevious AS LONG)
GetNextDlgTabItem(BYVAL hDlg AS DWORD, BYVAL hCtl AS DWORD, BYVAL bPrevious AS LONG)
GetOpenClipboardWindow()
GetParent(BYVAL hWnd AS DWORD)
GetPriorityClipboardFormat(lpPriorityList AS LONG, BYVAL nCount AS LONG)
GetProcessDefaultLayout(pdwDefaultLayout AS DWORD)
GetProcessWindowStation()
GetProp(BYVAL hWnd AS DWORD, lpString AS ASCIIZ)
GetQueueStatus(BYVAL fuFlags AS LONG)
GetRawInputBuffer(pData AS ANY, pcbSize AS DWORD, BYVAL cbSizeHeader AS DWORD)
GetRawInputData(BYVAL hRawInput AS DWORD, BYVAL uiCommand AS DWORD, BYVAL pData AS DWORD, pcbSize AS DWORD, BYVAL cbSizeHeader AS DWORD)
GetRawInputDeviceInfo(BYVAL hDevice AS DWORD, BYVAL uiCommand AS DWORD, BYVAL pData AS DWORD, pcbSize AS DWORD)
GetRawInputDeviceList(pRawInputDeviceList AS ANY, puiNumDevices AS DWORD, BYVAL cbSize AS DWORD)
GetRegisteredRawInputDevices(pRawInputDevices AS ANY, puiNumDevices AS DWORD, BYVAL cbSize AS DWORD)
GetScrollBarInfo(BYVAL hwnd AS DWORD, BYVAL idObject AS LONG, psbi AS SCROLLBARINFO)
GetScrollInfo(BYVAL hWnd AS DWORD, BYVAL n AS LONG, lpScrollInfo AS SCROLLINFO)
GetScrollPos(BYVAL hWnd AS DWORD, BYVAL nBar AS LONG)
GetScrollRange(BYVAL hWnd AS DWORD, BYVAL nBar AS LONG, lpMinPos AS LONG, lpMaxPos AS LONG)
GetShellWindow()
GetSubMenu(BYVAL hMenu AS DWORD, BYVAL nPos AS LONG)
GetSysColor(BYVAL nIndex AS LONG)
GetSysColorBrush(BYVAL nIndex AS LONG)
GetSystemMenu(BYVAL hWnd AS DWORD, BYVAL bRevert AS LONG)
GetSystemMetrics(BYVAL nIndex AS LONG)
GetTabbedTextExtent(BYVAL hDC AS DWORD, lpString AS ASCIIZ, BYVAL nCount AS LONG, BYVAL nTabPositions AS LONG, lpnTabStopPositions AS LONG)
GetThreadDesktop(BYVAL dwThread AS DWORD)
GetTitleBarInfo(BYVAL hwnd AS DWORD, pti AS TITLEBARINFO)
GetTopWindow(BYVAL hWnd AS DWORD)
GetUpdateRect(BYVAL hWnd AS DWORD, lpRect AS RECT, BYVAL bErase AS LONG)
GetUpdateRgn(BYVAL hWnd AS DWORD, BYVAL hRgn AS DWORD, BYVAL fErase AS LONG)
GetUserObjectInformation(BYVAL hObj AS DWORD, BYVAL nIndex AS LONG, pvInfo AS ANY, BYVAL nLength AS LONG, lpnLengthNeeded AS LONG)
GetUserObjectSecurity(BYVAL hObj AS DWORD, pSIRequested AS LONG, pSd AS SECURITY_DESCRIPTOR, BYVAL nLength AS LONG, lpnLengthNeeded AS LONG)
GetWindow(BYVAL hWnd AS DWORD, BYVAL wCmd AS DWORD)
GetNextWindow(BYVAL hWnd AS DWORD, BYVAL uCmd AS DWORD)
GetWindowContextHelpId(BYVAL hWnd AS DWORD)
GetWindowDC(BYVAL hWnd AS DWORD)
GetWindowInfo(BYVAL hwnd AS DWORD, pwi AS WINDOWINFO)
GetWindowLong(BYVAL hWnd AS DWORD, BYVAL nIndex AS LONG)
GetWindowModuleFileName(BYVAL hWnd AS DWORD, lpFileName AS ASCIIZ, BYVAL nSize AS DWORD)
GetWindowPlacement(BYVAL hWnd AS DWORD, lpwndpl AS WINDOWPLACEMENT)
GetWindowRect(BYVAL hWnd AS DWORD, lpRect AS RECT)
GetWindowRgn(BYVAL hWnd AS DWORD, BYVAL hRgn AS DWORD)
GetWindowRgnBox(BYVAL hWnd AS DWORD, lprc AS RECT)
GetWindowText(BYVAL hWnd AS DWORD, lpString AS ASCIIZ, BYVAL cch AS LONG)
GetWindowTextLength(BYVAL hWnd AS DWORD)
GetWindowThreadProcessId(BYVAL hWnd AS DWORD, lpdwProcessId AS DWORD)
GetWindowWord(BYVAL hWnd AS DWORD, BYVAL nIndex AS LONG)
GrayString(BYVAL hDC AS DWORD, BYVAL hBrush AS DWORD, BYVAL lpOutputFunc AS LONG, BYVAL lpData AS LONG, BYVAL nCount AS LONG, BYVAL X AS LONG, BYVAL Y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG)
HideCaret(BYVAL hWnd AS DWORD)
HiliteMenuItem(BYVAL hWnd AS DWORD, BYVAL hMenu AS DWORD, BYVAL dwIDHiliteItem AS DWORD, BYVAL dwHilite AS DWORD)
ImpersonateDdeClientWindow(BYVAL hWndClient AS DWORD, BYVAL hWndServer AS DWORD)
InSendMessage()
InSendMessageEx(BYVAL lpReserved AS DWORD)
InflateRect(lpRect AS RECT, BYVAL x AS LONG, BYVAL y AS LONG)
InsertMenu(BYVAL hMenu AS DWORD, BYVAL dwPosition AS DWORD, BYVAL dwFlags AS DWORD, BYVAL dwIDNewItem AS DWORD, lpNewItem AS ASCIIZ)
InsertMenuItem(BYVAL hMenu AS DWORD, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG, lpcMenuItemInfo AS MENUITEMINFO)
IntersectRect(lpDestRect AS RECT, lpSrc1Rect AS RECT, lpSrc2Rect AS RECT)
InvalidateRect(BYVAL hWnd AS DWORD, lpRect AS RECT, BYVAL bErase AS LONG)
InvalidateRgn(BYVAL hWnd AS DWORD, BYVAL hRgn AS DWORD, BYVAL bErase AS LONG)
InvertRect(BYVAL hDC AS DWORD, lpRect AS RECT)
IsCharAlpha(BYVAL cChar AS BYTE)
IsCharAlphaNumeric(BYVAL cChar AS BYTE)
IsCharLower(BYVAL cChar AS BYTE)
IsCharUpper(BYVAL cChar AS BYTE)
IsChild(BYVAL hwndParent AS DWORD, BYVAL hWnd AS DWORD)
IsClipboardFormatAvailable(BYVAL dwFormat AS DWORD)
IsDialogMessage(BYVAL hDlg AS DWORD, lpMsg AS tagMSG)
IsDlgButtonChecked(BYVAL hDlg AS DWORD, BYVAL nIDButton AS LONG)
IsGUIThread(BYVAL bConvert AS LONG)
IsIconic(BYVAL hWnd AS DWORD)
IsMenu(BYVAL hMenu AS DWORD)
IsRectEmpty(lpRect AS RECT)
IsWindow(BYVAL hWnd AS DWORD)
IsWindowEnabled(BYVAL hWnd AS DWORD)
IsWinEventHookInstalled(BYVAL dEvent AS DWORD)
IsWindowUnicode(BYVAL hWnd AS DWORD)
IsWindowVisible(BYVAL hWnd AS DWORD)
IsZoomed(BYVAL hWnd AS DWORD)
KillTimer(BYVAL hWnd AS DWORD, BYVAL nIDEvent AS LONG)
LoadAccelerators(BYVAL hInstance AS DWORD, lpTableName AS ASCIIZ)
LoadBitmap(BYVAL hInstance AS DWORD, lpBitmapName AS ASCIIZ)
LoadCursor(BYVAL hInstance AS DWORD, lpCursorName AS ASCIIZ)
LoadCursorFromFile(lpFileName AS ASCIIZ)
LoadIcon(BYVAL hInstance AS DWORD, lpIconName AS ASCIIZ)
LoadImage(BYVAL hInst AS DWORD, lpsz AS ASCIIZ, BYVAL uType AS DWORD, BYVAL cxDesired AS LONG, BYVAL cyDesired AS LONG, BYVAL fuLoad AS DWORD)
LoadKeyboardLayout(pwszKLID AS ASCIIZ, BYVAL flags AS DWORD)
LoadMenu(BYVAL hInstance AS DWORD, lpString AS ASCIIZ)
LoadMenuIndirect(BYVAL lpMenuTemplate AS LONG)
LoadString(BYVAL hInstance AS DWORD, BYVAL uID AS DWORD, lpBuffer AS ASCIIZ, BYVAL nBufferMax AS LONG)
LockSetForegroundWindow(BYVAL uLockCode AS DWORD)
LockWindowUpdate(BYVAL hWndLock AS DWORD)
LockWorkStation()
LookupIconIdFromDirectory(presbits AS BYTE, BYVAL fIcon AS LONG)
LookupIconIdFromDirectoryEx(presbits AS BYTE, BYVAL fIcon AS LONG, BYVAL cxDesired AS LONG, BYVAL cyDesired AS LONG, BYVAL Flags AS DWORD)
MapDialogRect(BYVAL hDlg AS DWORD, lpRect AS RECT)
MapVirtualKey(BYVAL dwCode AS DWORD, BYVAL dwMapType AS DWORD)
MapVirtualKeyEx(BYVAL uCode AS DWORD, BYVAL uMapType AS DWORD, BYVAL dwHKL AS DWORD)
MapWindowPoints(BYVAL hWndFrom AS DWORD, BYVAL hWndTo AS DWORD, lppt AS ANY, BYVAL cPoints AS LONG)
MenuItemFromPoint(BYVAL hWnd AS DWORD, BYVAL hMenu AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
MessageBeep(BYVAL dwType AS DWORD)
MessageBox(BYVAL hWnd AS DWORD, lpText AS ASCIIZ, lpCaption AS ASCIIZ, BYVAL dwType AS DWORD)
MessageBoxEx(BYVAL hWnd AS DWORD, lpText AS ASCIIZ, lpCaption AS ASCIIZ, BYVAL uType AS DWORD, BYVAL wLanguageId AS DWORD)
MessageBoxIndirect(lpMsgBoxParams AS MSGBOXPARAMS)
ModifyMenu(BYVAL hMenu AS DWORD, BYVAL dwPosition AS DWORD, BYVAL dwFlags AS DWORD, BYVAL dwIDNewItem AS DWORD, lpString AS ASCIIZ)
MonitorFromPoint(BYVAL x AS LONG, BYVAL y AS LONG, BYVAL dwFlags AS DWORD)
MonitorFromRect(lprc AS RECT, BYVAL dwFlags AS DWORD)
MonitorFromWindow(BYVAL hwnd AS DWORD, BYVAL dwFlags AS DWORD)
MoveWindow(BYVAL hWnd AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL bRepaint AS LONG)
MsgWaitForMultipleObjects(BYVAL nCount AS DWORD, pHandles AS DWORD, BYVAL fWaitAll AS LONG, BYVAL dwMilliseconds AS DWORD, BYVAL dwWakeMask AS DWORD)
NotifyWinEvent(BYVAL dEvent AS DWORD, BYVAL hwnd AS DWORD, BYVAL idObject AS LONG, BYVAL idChild AS LONG)
OemKeyScan(BYVAL wOemChar AS WORD)
OemToChar(lpszSrc AS ASCIIZ, lpszDst AS ASCIIZ)
OemToCharBuff(lpszSrc AS ASCIIZ, lpszDst AS ASCIIZ, BYVAL cchDstLength AS LONG)
OffsetRect(lpRect AS RECT, BYVAL x AS LONG, BYVAL y AS LONG)
OpenClipboard(BYVAL hWnd AS DWORD)
OpenDesktop(lpszDesktop AS ASCIIZ, BYVAL dwFlags AS DWORD, BYVAL fInherit AS LONG, BYVAL dwDesiredAccess AS DWORD)
OpenIcon(BYVAL hWnd AS DWORD)
OpenInputDesktop(BYVAL dwFlags AS DWORD, BYVAL fInherit AS LONG, BYVAL dwDesiredAccess AS DWORD)
OpenWindowStation(lpszWinSta AS ASCIIZ, BYVAL fInherit AS LONG, BYVAL dwDesiredAccess AS DWORD)
PackDDElParam(BYVAL msg AS LONG, BYVAL uiLo AS DWORD, BYVAL uiHi AS DWORD)
PaintDesktop(BYVAL hDC AS DWORD)
PeekMessage(lpMsg AS tagMSG, BYVAL hWnd AS DWORD, BYVAL dwMsgFilterMin AS DWORD, BYVAL dwMsgFilterMax AS DWORD, BYVAL dwRemoveMsg AS DWORD)
PostMessage(BYVAL hWnd AS DWORD, BYVAL dwMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
PostThreadMessage(BYVAL idThread AS DWORD, BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
PrintWindow(BYVAL hwnd AS DWORD, BYVAL hdcBlt AS DWORD, BYVAL nFlags AS DWORD)
PtInRect(lpRect AS RECT, BYVAL ptx AS LONG, BYVAL pty AS LONG)
RealChildWindowFromPoint(BYVAL hwndParent AS DWORD, BYVAL ptX AS LONG, BYVAL ptY AS LONG)
RealGetWindowClass(BYVAL hwnd AS DWORD, pszType AS ASCIIZ, BYVAL cchType AS DWORD)
RedrawWindow(BYVAL hWnd AS DWORD, lprcUpdate AS RECT, BYVAL hRgnUpdate AS DWORD, BYVAL fuRedraw AS LONG)
RegisterClass(pcWndClass AS WNDCLASS)
RegisterClassEx(pcWndClassEx AS WNDCLASSEX)
RegisterClipboardFormat(lpString AS ASCIIZ)
RegisterDeviceNotification(BYVAL hRecipient AS DWORD, BYVAL NotificationFilter AS DWORD, BYVAL Flags AS DWORD)
RegisterHotKey(BYVAL hWnd AS DWORD, BYVAL id AS LONG, BYVAL fsModifiers AS LONG, BYVAL vk AS LONG)
RegisterRawInputDevices(pRawInputDevices AS ANY, BYVAL uiNumDevices AS DWORD, BYVAL cbSize AS DWORD)
RegisterWindowMessage(lpString AS ASCIIZ)
ReleaseCapture()
ReleaseDC(BYVAL hWnd AS DWORD, BYVAL hDC AS DWORD)
RemoveMenu(BYVAL hMenu AS DWORD, BYVAL nPosition AS LONG, BYVAL wFlags AS DWORD)
RemoveProp(BYVAL hWnd AS DWORD, lpString AS ASCIIZ)
ReplyMessage(BYVAL lReply AS LONG)
ReuseDDElParam(BYVAL lParam AS LONG, BYVAL msgIn AS LONG, BYVAL msgOut AS LONG, BYVAL uiLo AS DWORD, BYVAL uiHi AS DWORD)
ScreenToClient(BYVAL hWnd AS DWORD, lpPoint AS POINTAPI)
ScrollDC(BYVAL hDC AS DWORD, BYVAL dx AS LONG, BYVAL dy AS LONG, lprcScroll AS RECT, lprcClip AS RECT, BYVAL hRgnUpdate AS DWORD, lprcUpdate AS RECT)
ScrollWindow(BYVAL hWnd AS DWORD, BYVAL XAmount AS LONG, BYVAL YAmount AS LONG, lpRect AS RECT, lpClipRect AS RECT)
ScrollWindowEx(BYVAL hWnd AS DWORD, BYVAL dx AS LONG, BYVAL dy AS LONG, lprcScroll AS RECT, lprcClip AS RECT, BYVAL hRgnUpdate AS DWORD, lprcUpdate AS RECT, BYVAL fuScroll AS LONG)
SendDlgItemMessage(BYVAL hDlg AS DWORD, BYVAL nIDDlgItem AS LONG, BYVAL wMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
SendInput(BYVAL cInputs AS DWORD, pInputs AS ANY, BYVAL cbSize AS LONG)
SendMessage(BYVAL hWnd AS DWORD, BYVAL dwMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
SendMessageCallback(BYVAL hWnd AS DWORD, BYVAL dwMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG, BYVAL lpResultCallBack AS LONG, BYVAL dwData AS DWORD)
SendMessageTimeout(BYVAL hWnd AS DWORD, BYVAL dwMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG, BYVAL fuFlags AS LONG, BYVAL uTimeout AS DWORD, lpdwResult AS DWORD)
SendNotifyMessage(BYVAL hWnd AS DWORD, BYVAL dwMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG)
SetActiveWindow(BYVAL hWnd AS DWORD)
SetCapture(BYVAL hWnd AS DWORD)
SetCaretBlinkTime(BYVAL dwMillieconds AS DWORD)
SetCaretPos(BYVAL x AS LONG, BYVAL y AS LONG)
SetClassLong(BYVAL hWnd AS DWORD, BYVAL nIndex AS LONG, BYVAL dwNewLong AS DWORD)
SetClassWord(BYVAL hWnd AS DWORD, BYVAL nIndex AS LONG, BYVAL wNewWord AS WORD)
SetClipboardData(BYVAL dwFormat AS DWORD, BYVAL hMem AS DWORD)
SetClipboardViewer(BYVAL hWnd AS DWORD)
SetCursor(BYVAL hCursor AS DWORD)
SetCursorPos(BYVAL x AS LONG, BYVAL y AS LONG)
SetDlgItemInt(BYVAL hDlg AS DWORD, BYVAL nIDDlgItem AS LONG, BYVAL dwValue AS DWORD, BYVAL bSigned AS LONG)
SetDlgItemText(BYVAL hDlg AS DWORD, BYVAL nIDDlgItem AS LONG, lpString AS ASCIIZ)
SetDoubleClickTime(BYVAL uInterval AS DWORD)
SetFocus(BYVAL hWnd AS DWORD)
SetForegroundWindow(BYVAL hWnd AS DWORD)
SetKeyboardState(lppbKeyState AS BYTE)
SetLayeredWindowAttributes(BYVAL hwnd AS DWORD, BYVAL crKey AS DWORD, BYVAL bAlpha AS BYTE, BYVAL dwFlags AS DWORD)
SetMenu(BYVAL hWnd AS DWORD, BYVAL hMenu AS DWORD)
SetMenuContextHelpId(BYVAL hMenu AS DWORD, BYVAL dw AS DWORD)
SetMenuDefaultItem(BYVAL hMenu AS DWORD, BYVAL uItem AS DWORD, BYVAL fByPos AS LONG)
SetMenuInfo(BYVAL hmenu AS DWORD, lpcmi AS MENUINFO)
SetMenuItemBitmaps(BYVAL hMenu AS DWORD, BYVAL nPosition AS LONG, BYVAL wFlags AS DWORD, BYVAL hBitmapUnchecked AS DWORD, BYVAL hBitmapChecked AS DWORD)
SetMenuItemInfo(BYVAL hMenu AS DWORD, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG, lpcMenuItemInfo AS MENUITEMINFO)
SetMessageExtraInfo(BYVAL lParam AS LONG)
SetMessageQueue(BYVAL cMessagesMax AS LONG)
SetParent(BYVAL hWndChild AS DWORD, BYVAL hWndNewParent AS DWORD)
SetProcessDefaultLayout(BYVAL dwDefaultLayout AS DWORD)
SetProcessWindowStation(BYVAL hWinSta AS DWORD)
SetProp(BYVAL hWnd AS DWORD, lpString AS ASCIIZ, BYVAL hData AS DWORD)
SetRect(lpRect AS RECT, BYVAL X1 AS LONG, BYVAL Y1 AS LONG, BYVAL X2 AS LONG, BYVAL Y2 AS LONG)
SetRectEmpty(lpRect AS RECT)
SetScrollInfo(BYVAL hWnd AS DWORD, BYVAL fnBar AS LONG, lpcScrollInfo AS SCROLLINFO, BYVAL fRedraw AS LONG)
SetScrollPos(BYVAL hWnd AS DWORD, BYVAL nBar AS LONG, BYVAL nPos AS LONG, BYVAL bRedraw AS LONG)
SetScrollRange(BYVAL hWnd AS DWORD, BYVAL nBar AS LONG, BYVAL nMinPos AS LONG, BYVAL nMaxPos AS LONG, BYVAL bRedraw AS LONG)
SetSysColors(BYVAL nChanges AS LONG, lpSysColor AS LONG, lpColorValues AS LONG)
SetSystemCursor(BYVAL hCur AS DWORD, BYVAL id AS LONG)
SetThreadDesktop(BYVAL hDesktop AS DWORD)
SetTimer(BYVAL hWnd AS DWORD, BYVAL nIDEvent AS LONG, BYVAL uElapse AS DWORD, BYVAL lpTimerFunc AS LONG)
SetUserObjectInformation(BYVAL hObj AS DWORD, BYVAL nIndex AS LONG, pvInfo AS ANY, BYVAL nLength AS LONG)
SetUserObjectSecurity(BYVAL hObj AS DWORD, pSIRequested AS LONG, pSd AS SECURITY_DESCRIPTOR)
SetWindowContextHelpId(BYVAL hWnd AS DWORD, BYVAL dwContextHelpId AS DWORD)
SetWindowLong(BYVAL hWnd AS DWORD, BYVAL nIndex AS LONG, BYVAL lNewLong AS LONG)
SetWindowPlacement(BYVAL hWnd AS DWORD, lpwndpl AS WINDOWPLACEMENT)
SetWindowPos(BYVAL hWnd AS DWORD, BYVAL hWndInsertAfter AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL cx AS LONG, BYVAL cy AS LONG, BYVAL wFlags AS DWORD)
SetWindowRgn(BYVAL hWnd AS DWORD, BYVAL hRgn AS DWORD, BYVAL bRedraw AS LONG)
SetWindowText(BYVAL hWnd AS DWORD, lpString AS ASCIIZ)
SetWindowWord(BYVAL hWnd AS DWORD, BYVAL nIndex AS LONG, BYVAL wNewWord AS WORD)
SetWindowsHook(BYVAL nFilterType AS LONG, BYVAL pfnFilterProc AS DWORD)
SetWindowsHookEx(BYVAL idHook AS LONG, BYVAL lpfn AS DWORD, BYVAL hMod AS DWORD, BYVAL dwThreadId AS DWORD)
SetWinEventHook(BYVAL eventMin AS DWORD, BYVAL eventMax AS DWORD, BYVAL hmodWinEventProc AS DWORD, BYVAL pfnWinEventProc AS DWORD, BYVAL idProcess AS DWORD, BYVAL idThread AS DWORD, BYVAL dwFlags AS DWORD)
ShowCaret(BYVAL hWnd AS DWORD)
ShowCursor(BYVAL bShow AS LONG)
ShowOwnedPopups(BYVAL hWnd AS DWORD, BYVAL fShow AS LONG)
ShowScrollBar(BYVAL hWnd AS DWORD, BYVAL iBar AS LONG, BYVAL bShow AS LONG)
ShowWindow(BYVAL hWnd AS DWORD, BYVAL nCmdShow AS LONG)
ShowWindowAsync(BYVAL hWnd AS DWORD, BYVAL nCmdShow AS LONG)
SubtractRect(lprcDst AS RECT, lprcSrc1 AS RECT, lprcSrc2 AS RECT)
SwapMouseButton(BYVAL bSwap AS LONG)
SwitchDesktop(BYVAL hDesktop AS DWORD)
SystemParametersInfo(BYVAL uAction AS DWORD, BYVAL uParam AS DWORD, lpvParam AS ANY, BYVAL fuWinIni AS DWORD)
TabbedTextOut(BYVAL hDC AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, lpString AS ASCIIZ, BYVAL nCount AS LONG, BYVAL nTabPositions AS LONG, lpnTabStopPositions AS LONG, BYVAL nTabOrigin AS LONG)
TileWindows(BYVAL hwndParent AS DWORD, BYVAL dwHow AS DWORD, lpRect AS RECT, BYVAL cKids AS DWORD, lpKids AS DWORD)
ToAscii(BYVAL uVirtKey AS DWORD, BYVAL uScanCode AS DWORD, lpbKeyState AS BYTE, lpwTransKey AS LONG, BYVAL fuState AS DWORD)
ToAsciiEx(BYVAL uVirtKey AS DWORD, BYVAL uScanCode AS DWORD, lpKeyState AS ANY, lpChar AS LONG, BYVAL uFlags AS DWORD, BYVAL dwHKL AS DWORD)
ToUnicode(BYVAL uVirtKey AS DWORD, BYVAL uScanCode AS DWORD, lpKeyState AS ANY, pwszBuff AS ANY, BYVAL cchBuff AS LONG, BYVAL uFlags AS DWORD)
ToUnicodeEx(BYVAL uVirtKey AS DWORD, BYVAL uScanCode AS DWORD, lpKeyState AS ANY, pwszBuff AS ANY, BYVAL cchBuff AS LONG, BYVAL uFlags AS DWORD, BYVAL dwhkl AS DWORD)
TrackMouseEvent(lpEventTrack AS TRACKMOUSEEVENTAPI)
TrackPopupMenu(BYVAL hMenu AS DWORD, BYVAL uFlags AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nReserved AS LONG, BYVAL hWnd AS DWORD, lprc AS RECT)
TrackPopupMenuEx(BYVAL hMenu AS DWORD, BYVAL uFlags AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL hWnd AS DWORD, lpTPMParams AS TPMPARAMS)
TranslateAccelerator(BYVAL hWnd AS DWORD, BYVAL hAccTable AS DWORD, lpMsg AS tagMSG)
TranslateMDISysAccel(BYVAL hWndClient AS DWORD, lpMsg AS tagMSG)
TranslateMessage(lpMsg AS tagMSG)
UnhookWindowsHook(BYVAL nCode AS LONG, BYVAL pfnFilterProc AS DWORD)
UnhookWindowsHookEx(BYVAL hHook AS DWORD)
UnhookWinEvent(BYVAL hWinEventHook AS DWORD)
UnionRect(lpDestRect AS RECT, lpSrc1Rect AS RECT, lpSrc2Rect AS RECT)
UnloadKeyboardLayout(BYVAL HKL AS DWORD)
UnpackDDElParam(BYVAL msg AS LONG, BYVAL lParam AS LONG, puiLo AS DWORD, puiHi AS DWORD)
UnregisterClass(lpClassName AS ASCIIZ, BYVAL hInstance AS DWORD)
UnregisterDeviceNotification(BYVAL hHandle AS DWORD)
UnregisterHotKey(BYVAL hWnd AS DWORD, BYVAL id AS LONG)
UpdateWindow(BYVAL hWnd AS DWORD)
UserHandleGrantAccess(BYVAL hUserHandle AS DWORD, BYVAL hJob AS DWORD, BYVAL bGrant AS LONG)
ValidateRect(BYVAL hWnd AS DWORD, lpRect AS RECT)
ValidateRgn(BYVAL hWnd AS DWORD, BYVAL hRgn AS DWORD)
VkKeyScan(BYVAL cChar AS BYTE)
VkKeyScanEx(BYVAL ch AS BYTE, BYVAL dwHKL AS DWORD)
WaitForInputIdle(BYVAL hProcess AS DWORD, BYVAL dwMilliseconds AS DWORD)
WaitMessage()
WinHelp(BYVAL hWnd AS DWORD, lpHelpFile AS ASCIIZ, BYVAL uCommand AS DWORD, BYVAL dwData AS DWORD)
WindowFromDC(BYVAL hDC AS DWORD)
WindowFromPoint(BYVAL xPoint AS LONG, BYVAL yPoint AS LONG)
PostQuitMessage(BYVAL nExitCode AS LONG)
keybd_event(BYVAL bVk AS BYTE, BYVAL bScan AS BYTE, BYVAL dwFlags AS DWORD, BYVAL dwExtraInfo AS DWORD)
mouse_event(BYVAL dwFlags AS DWORD, BYVAL dx AS DWORD, BYVAL dy AS DWORD, BYVAL cButtons AS DWORD, BYVAL dwExtraInfo AS DWORD)
SetDebugErrorLevel(BYVAL dwLevel AS DWORD)
SetLastErrorEx(BYVAL dwErrCode AS DWORD, BYVAL dwType AS DWORD)
wsprintf CDECL(lpOutput AS ASCIIZ, lpFormat AS ASCIIZ, x AS ANY[, x1 AS ANY, x2 AS ANY, x3 AS ANY, x4 AS ANY, x5 AS ANY, x6 AS ANY, x7 AS ANY, x8 AS ANY, x9 AS ANY, x10 AS ANY, x11 AS ANY, x12 AS ANY])
wsprintf CDECL(lpOutput AS ASCIIZ, lpFormat AS ASCIIZ, x AS ANY, OPTIONAL x1 AS ANY, OPTIONAL x2 AS ANY, OPTIONAL x3 AS ANY, OPTIONAL x4 AS ANY, OPTIONAL x5 AS ANY, OPTIONAL x6 AS ANY, OPTIONAL x7 AS ANY, OPTIONAL x8 AS ANY, OPTIONAL x9 AS ANY, OPTIONAL x10 AS ANY, OPTIONAL x11 AS ANY, OPTIONAL x12 AS ANY)
CloseDriver(BYVAL hDriver AS DWORD, BYVAL lParam1 AS LONG, BYVAL lParam2 AS LONG)
DefDriverProc(BYVAL dwDriverIdentifier AS DWORD, BYVAL hDriver AS DWORD, BYVAL uMsg AS DWORD, BYVAL lParam1 AS LONG, BYVAL lParam2 AS LONG)
DrvGetModuleHandle(BYVAL hDriver AS DWORD)
GetDriverModuleHandle(BYVAL hDriver AS DWORD)
OpenDriver(szDriverName AS ASCIIZ, szSectionName AS ASCIIZ, BYVAL lParam2 AS LONG)
PlaySound(lpszName AS ASCIIZ, BYVAL hModule AS DWORD, BYVAL dwFlags AS DWORD)
SendDriverMessage(BYVAL hDriver AS DWORD, BYVAL message AS LONG, BYVAL lParam1 AS LONG, BYVAL lParam2 AS LONG)
auxGetDevCaps(BYVAL uDeviceID AS DWORD, lpCaps AS AUXCAPS, BYVAL uSize AS DWORD)
auxGetNumDevs()
auxGetVolume(BYVAL uDeviceID AS DWORD, lpdwVolume AS DWORD)
auxOutMessage(BYVAL uDeviceID AS DWORD, BYVAL uMsg AS DWORD, BYVAL dwParam1 AS DWORD, BYVAL dwParam2 AS DWORD)
auxSetVolume(BYVAL uDeviceID AS DWORD, BYVAL dwVolume AS DWORD)
joyGetDevCaps(BYVAL id AS LONG, lpCaps AS JOYCAPS, BYVAL uSize AS DWORD)
joyGetNumDevs()
joyGetPos(BYVAL uJoyId AS DWORD, pji AS JOYINFO)
joyGetPosEx(BYVAL uJoyId AS DWORD, pji AS JOYINFOEX)
joyGetThreshold(BYVAL id AS LONG, lpuThreshold AS DWORD)
joyReleaseCapture(BYVAL id AS LONG)
joySetCapture(BYVAL hWnd AS DWORD, BYVAL uId AS DWORD, BYVAL uPeriod AS DWORD, BYVAL bChanged AS LONG)
joySetThreshold(BYVAL id AS LONG, BYVAL uThreshold AS DWORD)
mciExecute(lpstrCommand AS ASCIIZ)
mciGetCreatorTask(BYVAL wDeviceId AS DWORD)
mciGetDeviceID(lpstrName AS ASCIIZ)
mciGetDeviceIDFromElementID(BYVAL dwElementId AS DWORD, lpstrType AS ASCIIZ)
mciGetErrorString(BYVAL dwError AS DWORD, lpstrBuffer AS ASCIIZ, BYVAL uLength AS DWORD)
mciGetYieldProc(BYVAL mciId AS LONG, pdwYieldData AS DWORD)
mciSendCommand(BYVAL wDeviceId AS DWORD, BYVAL uMessage AS DWORD, BYVAL dwParam1 AS DWORD, BYVAL dwParam2 AS DWORD)
mciSendString(lpstrCommand AS ASCIIZ, lpstrReturnString AS ASCIIZ, BYVAL uReturnLength AS DWORD, BYVAL hwndCallback AS DWORD)
mciSetYieldProc(BYVAL mciId AS LONG, BYVAL fpYieldProc AS LONG, BYVAL dwYieldData AS DWORD)
midiConnect(BYVAL hmi AS DWORD, BYVAL hmo AS DWORD, pReserved AS ANY)
midiDisconnect(BYVAL hmi AS DWORD, BYVAL hmo AS DWORD, pReserved AS ANY)
midiInAddBuffer(BYVAL hMidiIn AS DWORD, lpMidiInHdr AS MIDIHDR, BYVAL uSize AS DWORD)
midiInClose(BYVAL hMidiIn AS DWORD)
midiInGetDevCaps(BYVAL uDeviceID AS DWORD, lpCaps AS MIDIINCAPS, BYVAL uSize AS DWORD)
midiInGetErrorText(BYVAL xerr AS LONG, lpText AS ASCIIZ, BYVAL uSize AS DWORD)
midiInGetID(BYVAL hMidiIn AS DWORD, lpuDeviceId AS DWORD)
midiInGetNumDevs()
midiInMessage(BYVAL hMidiIn AS DWORD, BYVAL msg AS LONG, BYVAL dw1 AS DWORD, BYVAL dw2 AS DWORD)
midiInOpen(lphMidiIn AS DWORD, BYVAL uDeviceID AS DWORD, BYVAL dwCallback AS DWORD, BYVAL dwInstance AS DWORD, BYVAL dwFlags AS DWORD)
midiInPrepareHeader(BYVAL hMidiIn AS DWORD, lpMidiInHdr AS MIDIHDR, BYVAL uSize AS DWORD)
midiInReset(BYVAL hMidiIn AS DWORD)
midiInStart(BYVAL hMidiIn AS DWORD)
midiInStop(BYVAL hMidiIn AS DWORD)
midiInUnprepareHeader(BYVAL hMidiIn AS DWORD, lpMidiInHdr AS MIDIHDR, BYVAL uSize AS DWORD)
midiOutCacheDrumPatches(BYVAL hMidiOut AS DWORD, BYVAL uPatch AS DWORD, lpKeyArray AS LONG, BYVAL uFlags AS DWORD)
midiOutCachePatches(BYVAL hMidiOut AS DWORD, BYVAL uBank AS DWORD, lpPatchArray AS LONG, BYVAL uFlags AS DWORD)
midiOutClose(BYVAL hMidiOut AS DWORD)
midiOutGetDevCaps(BYVAL uDeviceID AS DWORD, lpCaps AS MIDIOUTCAPS, BYVAL uSize AS DWORD)
midiOutGetErrorText(BYVAL xerr AS LONG, lpText AS ASCIIZ, BYVAL uSize AS DWORD)
midiOutGetID(BYVAL hMidiOut AS DWORD, lpuDeviceId AS DWORD)
midiOutGetNumDevs()
midiOutGetVolume(BYVAL uDeviceID AS DWORD, lpdwVolume AS DWORD)
midiOutLongMsg(BYVAL hMidiOut AS DWORD, lpMidiOutHdr AS MIDIHDR, BYVAL uSize AS DWORD)
midiOutMessage(BYVAL hMidiOut AS DWORD, BYVAL msg AS LONG, BYVAL dw1 AS DWORD, BYVAL dw2 AS DWORD)
midiOutOpen(lphMidiOut AS DWORD, BYVAL uDeviceID AS DWORD, BYVAL dwCallback AS DWORD, BYVAL dwInstance AS DWORD, BYVAL dwFlags AS DWORD)
midiOutPrepareHeader(BYVAL hMidiOut AS DWORD, lpMidiOutHdr AS MIDIHDR, BYVAL uSize AS DWORD)
midiOutReset(BYVAL hMidiOut AS DWORD)
midiOutSetVolume(BYVAL uDeviceID AS DWORD, BYVAL dwVolume AS DWORD)
midiOutShortMsg(BYVAL hMidiOut AS DWORD, BYVAL dwMsg AS DWORD)
midiOutUnprepareHeader(BYVAL hMidiOut AS DWORD, lpMidiOutHdr AS MIDIHDR, BYVAL uSize AS DWORD)
midiStreamClose(BYVAL hms AS DWORD)
midiStreamOpen(phms AS LONG, puDeviceId AS DWORD, BYVAL cMidi AS LONG, BYVAL dwCallback AS DWORD, BYVAL dwInstance AS DWORD, BYVAL fdwOpen AS DWORD)
midiStreamOut(BYVAL hms AS DWORD, pmh AS MIDIHDR, BYVAL cbMidiHdr AS DWORD)
midiStreamPause(BYVAL hms AS DWORD)
midiStreamPosition(BYVAL hms AS DWORD, lpmmt AS MMTIME, BYVAL cbmmt AS DWORD)
midiStreamProperty(BYVAL hms AS DWORD, lppropdata AS BYTE, BYVAL dwProperty AS DWORD)
midiStreamRestart(BYVAL hms AS DWORD)
midiStreamStop(BYVAL hms AS DWORD)
mixerClose(BYVAL hmx AS DWORD)
mixerGetControlDetails(BYVAL hmxobj AS DWORD, pmxcd AS MIXERCONTROLDETAILS, BYVAL fdwDetails AS DWORD)
mixerGetDevCaps(BYVAL uMxId AS DWORD, pmxcaps AS MIXERCAPS, BYVAL cbmxcaps AS DWORD)
mixerGetID(BYVAL hmxobj AS DWORD, pumxId AS DWORD, BYVAL fdwId AS DWORD)
mixerGetLineControls(BYVAL hmxobj AS DWORD, pmxlc AS MIXERLINECONTROLS, BYVAL fdwControls AS DWORD)
mixerGetLineInfo(BYVAL hmxobj AS DWORD, pmxl AS MIXERLINE, BYVAL fdwInfo AS DWORD)
mixerGetNumDevs()
mixerMessage(BYVAL hmx AS DWORD, BYVAL uMsg AS DWORD, BYVAL dwParam1 AS DWORD, BYVAL dwParam2 AS DWORD)
mixerOpen(phmx AS DWORD, BYVAL uMxId AS DWORD, BYVAL dwCallback AS DWORD, BYVAL dwInstance AS DWORD, BYVAL fdwOpen AS DWORD)
mixerSetControlDetails(BYVAL hmxobj AS DWORD, pmxcd AS MIXERCONTROLDETAILS, BYVAL fdwDetails AS DWORD)
mmioAdvance(BYVAL hmmio AS DWORD, lpmmioinfo AS MMIOINFO, BYVAL uFlags AS DWORD)
mmioAscend(BYVAL hmmio AS DWORD, lpck AS MMCKINFO, BYVAL uFlags AS DWORD)
mmioClose(BYVAL hmmio AS DWORD, BYVAL uFlags AS DWORD)
mmioCreateChunk(BYVAL hmmio AS DWORD, lpck AS MMCKINFO, BYVAL uFlags AS DWORD)
mmioDescend(BYVAL hmmio AS DWORD, lpck AS MMCKINFO, lpckParent AS MMCKINFO, BYVAL uFlags AS DWORD)
mmioFlush(BYVAL hmmio AS DWORD, BYVAL uFlags AS DWORD)
mmioGetInfo(BYVAL hmmio AS DWORD, lpmmioinfo AS MMIOINFO, BYVAL uFlags AS DWORD)
mmioInstallIOProcA(fccIOProc AS ASCIIZ * 4, BYVAL pIOProc AS LONG, BYVAL dwFlags AS DWORD)
mmioOpen(szFileName AS ASCIIZ, lpmmioinfo AS MMIOINFO, BYVAL dwOpenFlags AS DWORD)
mmioRead(BYVAL hmmio AS DWORD, pch AS ANY, BYVAL cch AS LONG)
mmioRename(szFileName AS ASCIIZ, SzNewFileName AS ASCIIZ, lpmmioinfo AS MMIOINFO, BYVAL dwRenameFlags AS DWORD)
mmioSeek(BYVAL hmmio AS DWORD, BYVAL lOffset AS LONG, BYVAL iOrigin AS LONG)
mmioSendMessage(BYVAL hmmio AS DWORD, BYVAL uMsg AS DWORD, BYVAL lParam1 AS LONG, BYVAL lParam2 AS LONG)
mmioSetBuffer(BYVAL hmmio AS DWORD, pchBuffer AS ASCIIZ, BYVAL cchBuffer AS LONG, BYVAL uFlags AS DWORD)
mmioSetInfo(BYVAL hmmio AS DWORD, lpmmioinfo AS MMIOINFO, BYVAL uFlags AS DWORD)
mmioStringToFOURCC(sz AS ASCIIZ, BYVAL uFlags AS DWORD)
mmioWrite(BYVAL hmmio AS DWORD, pch AS ANY, BYVAL cch AS LONG)
mmsystemGetVersion()
sndPlaySound(lpszSoundName AS ASCIIZ, BYVAL uFlags AS DWORD)
timeBeginPeriod(BYVAL uPeriod AS DWORD)
timeEndPeriod(BYVAL uPeriod AS DWORD)
timeGetDevCaps(lpTimeCaps AS TIMECAPS, BYVAL uSize AS DWORD)
timeGetSystemTime(lpTime AS MMTIME, BYVAL uSize AS DWORD)
timeGetTime()
timeKillEvent(BYVAL uId AS DWORD)
timeSetEvent(BYVAL uDelay AS DWORD, BYVAL uResolution AS DWORD, BYVAL lpFunction AS DWORD, BYVAL dwUser AS DWORD, BYVAL uFlags AS DWORD)
waveInAddBuffer(BYVAL hWaveIn AS DWORD, lpWaveInHdr AS WAVEHDR, BYVAL uSize AS DWORD)
waveInClose(BYVAL hWaveIn AS DWORD)
waveInGetDevCaps(BYVAL uDeviceID AS DWORD, lpCaps AS WAVEINCAPS, BYVAL uSize AS DWORD)
waveInGetErrorText(BYVAL xerr AS LONG, lpText AS ASCIIZ, BYVAL uSize AS DWORD)
waveInGetID(BYVAL hWaveIn AS DWORD, lpuDeviceId AS DWORD)
waveInGetNumDevs()
waveInGetPosition(BYVAL hWaveIn AS DWORD, lpInfo AS MMTIME, BYVAL uSize AS DWORD)
waveInMessage(BYVAL hWaveIn AS DWORD, BYVAL uMsg AS LONG, BYVAL dwParam1 AS DWORD, BYVAL dwParam2 AS DWORD)
waveInOpen(lphWaveIn AS DWORD, BYVAL uDeviceID AS DWORD, lpFormat AS WAVEFORMATEX, BYVAL dwCallback AS DWORD, BYVAL dwInstance AS DWORD, BYVAL dwFlags AS DWORD)
waveInPrepareHeader(BYVAL hWaveIn AS DWORD, lpWaveInHdr AS WAVEHDR, BYVAL uSize AS DWORD)
waveInReset(BYVAL hWaveIn AS DWORD)
waveInStart(BYVAL hWaveIn AS DWORD)
waveInStop(BYVAL hWaveIn AS DWORD)
waveInUnprepareHeader(BYVAL hWaveIn AS DWORD, lpWaveInHdr AS WAVEHDR, BYVAL uSize AS DWORD)
waveOutBreakLoop(BYVAL hWaveOut AS DWORD)
waveOutClose(BYVAL hWaveOut AS DWORD)
waveOutGetDevCaps(BYVAL uDeviceID AS DWORD, lpCaps AS WAVEOUTCAPS, BYVAL uSize AS DWORD)
waveOutGetErrorText(BYVAL xerr AS LONG, lpText AS ASCIIZ, BYVAL uSize AS DWORD)
waveOutGetID(BYVAL hWaveOut AS DWORD, lpuDeviceID AS DWORD)
waveOutGetNumDevs()
waveOutGetPitch(BYVAL hWaveOut AS DWORD, lpdwPitch AS DWORD)
waveOutGetPlaybackRate(BYVAL hWaveOut AS DWORD, lpdwRate AS DWORD)
waveOutGetPosition(BYVAL hWaveOut AS DWORD, lpInfo AS MMTIME, BYVAL uSize AS DWORD)
waveOutGetVolume(BYVAL uDeviceID AS DWORD, lpdwVolume AS DWORD)
waveOutMessage(BYVAL hWaveOut AS DWORD, BYVAL uMsg AS DWORD, BYVAL dwParam1 AS DWORD, BYVAL dwParam2 AS DWORD)
waveOutOpen(lphWaveOut AS DWORD, BYVAL uDeviceID AS DWORD, lpFormat AS WAVEFORMATEX, BYVAL dwCallback AS DWORD, BYVAL dwInstance AS DWORD, BYVAL dwFlags AS DWORD)
waveOutPause(BYVAL hWaveOut AS DWORD)
waveOutPrepareHeader(BYVAL hWaveOut AS DWORD, lpWaveOutHdr AS WAVEHDR, BYVAL uSize AS DWORD)
waveOutReset(BYVAL hWaveOut AS DWORD)
waveOutRestart(BYVAL hWaveOut AS DWORD)
waveOutSetPitch(BYVAL hWaveOut AS DWORD, BYVAL dwPitch AS DWORD)
waveOutSetPlaybackRate(BYVAL hWaveOut AS DWORD, BYVAL dwRate AS DWORD)
waveOutSetVolume(BYVAL uDeviceID AS DWORD, BYVAL dwVolume AS DWORD)
waveOutUnprepareHeader(BYVAL hWaveOut AS DWORD, lpWaveOutHdr AS WAVEHDR, BYVAL uSize AS DWORD)
waveOutWrite(BYVAL hWaveOut AS DWORD, lpWaveOutHdr AS WAVEHDR, BYVAL uSize AS DWORD)
OutputDebugStr(lpszOutputString AS ASCIIZ)
AbortPrinter(BYVAL hPrinter AS DWORD)
AddForm(BYVAL hPrinter AS DWORD, BYVAL Level AS DWORD, pForm AS BYTE)
AddJob(BYVAL hPrinter AS DWORD, BYVAL Level AS DWORD, pData AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD)
AddMonitor(pName AS ASCIIZ, BYVAL Level AS DWORD, pMonitors AS BYTE)
AddPort(pName AS ASCIIZ, BYVAL hWnd AS DWORD, pMonitorName AS ASCIIZ)
AddPrintProcessor(pName AS ASCIIZ, pEnvironment AS ASCIIZ, pPathName AS ASCIIZ, pPrintProcessorName AS ASCIIZ)
AddPrintProvidor(pName AS ASCIIZ, BYVAL Level AS DWORD, pProvidorInfo AS ANY)
AddPrinter(pName AS ASCIIZ, BYVAL Level AS DWORD, pPrinter AS ANY)
AddPrinterConnection(pName AS ASCIIZ)
AddPrinterDriver(pName AS ASCIIZ, BYVAL Level AS DWORD, pDriverInfor AS ANY)
AddPrinterDriverEx(pName AS ASCIIZ, BYVAL Level AS DWORD, pDriverInfor AS ANY, BYVAL dwFileCopyFlags AS DWORD)
AdvancedDocumentProperties(BYVAL hWnd AS DWORD, BYVAL hPrinter AS DWORD, pDeviceName AS ASCIIZ, pDevModeOutput AS DEVMODE, pDevModeInput AS DEVMODE)
ClosePrinter(BYVAL hPrinter AS DWORD)
ConfigurePort(pName AS ASCIIZ, BYVAL hWnd AS DWORD, pPortName AS ASCIIZ)
ConnectToPrinterDlg(BYVAL hWnd AS DWORD, BYVAL flags AS DWORD)
DeleteForm(BYVAL hPrinter AS DWORD, pFormName AS ASCIIZ)
DeleteMonitor(pName AS ASCIIZ, pEnvironment AS ASCIIZ, pMonitorName AS ASCIIZ)
DeletePort(pName AS ASCIIZ, BYVAL hWnd AS DWORD, pPortName AS ASCIIZ)
DeletePrintProcessor(pName AS ASCIIZ, pEnvironment AS ASCIIZ, pPrintProcessorName AS ASCIIZ)
DeletePrintProvidor(pName AS ASCIIZ, pEnvironment AS ASCIIZ, pPrintProvidorName AS ASCIIZ)
DeletePrinter(BYVAL hPrinter AS DWORD)
DeletePrinterConnection(pName AS ASCIIZ)
DeletePrinterData(BYVAL hPrinter AS DWORD, pValueName AS ASCIIZ)
DeletePrinterDataEx(BYVAL hPrinter AS DWORD, pKeyName AS ASCIIZ, pValueName AS ASCIIZ)
DeletePrinterDriver(pName AS ASCIIZ, pEnvironment AS ASCIIZ, pDriverName AS ASCIIZ)
DeletePrinterDriverEx(pName AS ASCIIZ, pEnvironment AS ASCIIZ, pDriverName AS ASCIIZ, BYVAL dwDeleteFlag AS DWORD, BYVAL dwVersionFlag AS DWORD)
DeletePrinterKey(BYVAL hPrinter AS DWORD, pKeyName AS ASCIIZ)
DocumentProperties(BYVAL hWnd AS DWORD, BYVAL hPrinter AS DWORD, pDeviceName AS ASCIIZ, pDevModeOutput AS DEVMODE, pDevModeInput AS DEVMODE, BYVAL fMode AS DWORD)
EndDocPrinter(BYVAL hPrinter AS DWORD)
EndPagePrinter(BYVAL hPrinter AS DWORD)
EnumForms(BYVAL hPrinter AS DWORD, BYVAL Level AS DWORD, pForm AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD)
EnumJobs(BYVAL hPrinter AS DWORD, BYVAL FirstJob AS DWORD, BYVAL NoJobs AS DWORD, BYVAL Level AS DWORD, pJob AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD)
EnumMonitors(pName AS ASCIIZ, BYVAL Level AS DWORD, pMonitors AS BYTE, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD)
EnumPorts(pName AS ASCIIZ, BYVAL Level AS DWORD, BYVAL lpbPorts AS LONG, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD)
EnumPrintProcessorDatatypes(pName AS ASCIIZ, pPrintProcessorName AS ASCIIZ, BYVAL Level AS DWORD, pDatatypes AS BYTE, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD)
EnumPrintProcessors(pName AS ASCIIZ, pEnvironment AS ASCIIZ, BYVAL Level AS DWORD, pPrintProcessorInfo AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD)
EnumPrinterData(BYVAL hPrinter AS DWORD, BYVAL dwIndex AS DWORD, pValueName AS ASCIIZ, BYVAL cbValueName AS DWORD, pcbValueName AS DWORD, pType AS DWORD, pData AS BYTE, BYVAL cbData AS DWORD, pcbData AS DWORD)
EnumPrinterDataEx(BYVAL hPrinter AS DWORD, pKeyName AS ASCIIZ, pEnumValues AS BYTE PTR, BYVAL cbEnumValues AS DWORD, pcbEnumValues AS DWORD, pnEnumValues AS DWORD)
EnumPrinterDataEx(BYVAL hPrinter AS DWORD, pKeyName AS ASCIIZ, BYVAL pEnumValues AS BYTE PTR, BYVAL cbEnumValues AS DWORD, pcbEnumValues AS DWORD, pnEnumValues AS DWORD)
EnumPrinterDrivers(pName AS ASCIIZ, pEnvironment AS ASCIIZ, BYVAL Level AS DWORD, pDriverInfo AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD)
EnumPrinterKey(BYVAL hPrinter AS DWORD, pKeyName AS ASCIIZ, pSubkey AS ASCIIZ, BYVAL cbSubkey AS DWORD, pcbSubkey AS DWORD)
EnumPrinterPropertySheets(hPrinter AS DWORD, hWnd AS DWORD, lpfnAdd AS DWORD, BYVAL lParam AS LONG)
EnumPrinters(BYVAL dwFlags AS DWORD, xname AS ASCIIZ, BYVAL Level AS DWORD, pPrinterEnum AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD, pcReturned AS DWORD)
FindClosePrinterChangeNotification(BYVAL hChange AS DWORD)
FindFirstPrinterChangeNotification(BYVAL hPrinter AS DWORD, BYVAL fdwFlags AS DWORD, BYVAL fdwOptions AS DWORD, pPrinterNotifyOptions AS ANY)
FindNextPrinterChangeNotification(BYVAL hChange AS DWORD, pdwChange AS DWORD, pPrinterNotifyOptions AS PRINTER_NOTIFY_OPTIONS PTR, ppPrinterNotifyInfo AS ANY)
FindNextPrinterChangeNotification(BYVAL hChange AS DWORD, pdwChange AS DWORD, BYVAL pPrinterNotifyOptions AS PRINTER_NOTIFY_OPTIONS PTR, ppPrinterNotifyInfo AS ANY)
FlushPrinter(BYVAL hPrinter AS DWORD, pBuf AS ANY, BYVAL cbBuf AS DWORD, pcWritten AS DWORD, BYVAL cSleep AS DWORD)
FreePrinterNotifyInfo(pPrinterNotifyInfo AS PRINTER_NOTIFY_INFO PTR)
FreePrinterNotifyInfo(BYVAL pPrinterNotifyInfo AS PRINTER_NOTIFY_INFO PTR)
GetDefaultPrinter(pszBuffer AS ASCIIZ, pcchBuffer AS DWORD)
GetForm(BYVAL hPrinter AS DWORD, pFormName AS ASCIIZ, BYVAL Level AS DWORD, pForm AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD)
GetJob(BYVAL hPrinter AS DWORD, BYVAL JobId AS DWORD, BYVAL Level AS DWORD, pJob AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD)
GetPrintProcessorDirectory(pName AS ASCIIZ, pEnvironment AS ASCIIZ, BYVAL Level AS DWORD, pPrintProcessorInfo AS ASCIIZ, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD)
GetPrinter(BYVAL hPrinter AS DWORD, BYVAL Level AS DWORD, pPrinter AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD)
GetPrinterData(BYVAL hPrinter AS DWORD, pValueName AS ASCIIZ, pType AS DWORD, pData AS ANY, BYVAL nSize AS DWORD, pcbNeeded AS DWORD)
GetPrinterDataEx(BYVAL hPrinter AS DWORD, pValueName AS ASCIIZ, pType AS DWORD, pData AS ANY, BYVAL nSize AS DWORD, pcbNeeded AS DWORD)
GetPrinterDriver(BYVAL hPrinter AS DWORD, pEnvironment AS ASCIIZ, BYVAL Level AS DWORD, pDriverInfo AS ANY, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD)
GetPrinterDriverDirectory(pName AS ASCIIZ, pEnvironment AS ASCIIZ, BYVAL Level AS DWORD, pDriverDirectory AS BYTE, BYVAL cbBuf AS DWORD, pcbNeeded AS DWORD)
IsValidDevmode(pDevmode AS DEVMODE PTR, BYVAL DevmodeSize AS LONG)
IsValidDevmode(BYVAL pDevmode AS DEVMODE PTR, BYVAL DevmodeSize AS LONG)
OpenPrinter(pPrinterName AS ASCIIZ, phPrinter AS DWORD, pDefault AS PRINTER_DEFAULTS)
PrinterMessageBox(BYVAL hPrinter AS DWORD, BYVAL xerror AS DWORD, BYVAL hWnd AS DWORD, pText AS ASCIIZ, pCaption AS ASCIIZ, BYVAL dwType AS DWORD)
PrinterProperties(BYVAL hWnd AS DWORD, BYVAL hPrinter AS DWORD)
ReadPrinter(BYVAL hPrinter AS DWORD, pBuf AS ANY, BYVAL cbBuf AS DWORD, pNoBytesRead AS LONG)
ResetPrinter(BYVAL hPrinter AS DWORD, pDefault AS PRINTER_DEFAULTS)
ScheduleJob(BYVAL hPrinter AS DWORD, BYVAL JobId AS DWORD)
SetDefaultPrinter(pszPrinter AS ASCIIZ)
SetForm(BYVAL hPrinter AS DWORD, pFormName AS ASCIIZ, BYVAL Level AS DWORD, pForm AS BYTE)
SetJob(BYVAL hPrinter AS DWORD, BYVAL JobId AS DWORD, BYVAL Level AS DWORD, pJob AS ANY, BYVAL Command AS DWORD)
SetPort(pName AS ASCIIZ, pPortName AS ASCIIZ, BYVAL dwLevel AS DWORD, pPortInfo AS ANY)
SetPrinter(BYVAL hPrinter AS DWORD, BYVAL Level AS DWORD, pPrinter AS BYTE, BYVAL Command AS LONG)
SetPrinterData(BYVAL hPrinter AS DWORD, pValueName AS ASCIIZ, BYVAL dwType AS DWORD, pData AS BYTE, BYVAL cbData AS DWORD)
SetPrinterDataEx(BYVAL hPrinter AS DWORD, pKeyName AS ASCIIZ, pValueName AS ASCIIZ, BYVAL dwType AS DWORD, pData AS BYTE, BYVAL cbData AS DWORD)
StartDocPrinter(BYVAL hPrinter AS DWORD, BYVAL Level AS DWORD, pDocInfo AS ANY)
StartPagePrinter(BYVAL hPrinter AS DWORD)
WaitForPrinterChange(BYVAL hPrinter AS DWORD, BYVAL flags AS DWORD)
WritePrinter(BYVAL hPrinter AS DWORD, pBuf AS ANY, BYVAL cbBuf AS DWORD, pcWritten AS LONG)
XcvData(BYVAL hXcv AS DWORD, pszDataName AS WORD PTR, pInputData AS BYTE PTR, BYVAL cbInputData AS DWORD, pOutputData AS BYTE PTR, BYVAL cbOutputData AS DWORD, pcbOutputNeeded AS DWORD, pdwStatus AS DWORD)
XcvData(BYVAL hXcv AS DWORD, BYVAL pszDataName AS WORD PTR, BYVAL pInputData AS BYTE PTR, BYVAL cbInputData AS DWORD, BYVAL pOutputData AS BYTE PTR, BYVAL cbOutputData AS DWORD, pcbOutputNeeded AS DWORD, pdwStatus AS DWORD)
WNetAddConnection(lpszRemoteName AS ASCIIZ, lpszPassword AS ASCIIZ, lpszLocalName AS ASCIIZ)
WNetAddConnection2(lpszNetResource AS NETRESOURCE, lpszPassword AS ASCIIZ, lpszUserName AS ASCIIZ, BYVAL dwFlags AS DWORD)
WNetAddConnection3(BYVAL hwndOwner AS DWORD, lpszNetResource AS NETRESOURCE, lpszPassword AS ASCIIZ, lpszUserName AS ASCIIZ, BYVAL dwFlags AS DWORD)
WNetCancelConnection(lpszName AS ASCIIZ, BYVAL fForce AS LONG)
WNetCancelConnection2(lpName AS ASCIIZ, BYVAL dwFlags AS DWORD, BYVAL fForce AS LONG)
WNetGetConnection(lpszLocalName AS ASCIIZ, lpszRemoteName AS ASCIIZ, lpnLength AS DWORD)
WNetUseConnection(BYVAL hwndOwner AS DWORD, lpNetResource AS NETRESOURCE, lpszUserID AS ASCIIZ, lpszPassword AS ASCIIZ, BYVAL dwFlags AS DWORD, lpszAccessName AS ASCIIZ, lpBufferSize AS DWORD, lpResult AS DWORD)
WNetConnectionDialog(BYVAL hwnd AS DWORD, BYVAL dwType AS DWORD)
WNetDisconnectDialog(BYVAL hwnd AS DWORD, BYVAL dwType AS DWORD)
WNetConnectionDialog1(lpConnDlgStruct AS CONNECTDLGSTRUCT)
WNetDisconnectDialog1(lpConnDlgStruct AS DISCDLGSTRUCT)
WNetOpenEnum(BYVAL dwScope AS DWORD, BYVAL dwType AS DWORD, BYVAL dwUsage AS DWORD, lpNetResource AS NETRESOURCE, lphEnum AS DWORD)
WNetEnumResource(BYVAL hEnum AS DWORD, lpcCount AS DWORD, lpBuffer AS ANY, lpBufferSize AS DWORD)
WNetCloseEnum(BYVAL hEnum AS DWORD)
WNetGetUniversalName(lpLocalPath AS ASCIIZ, BYVAL dwInfoLevel AS DWORD, lpBuffer AS ANY, lpBufferSize AS DWORD)
WNetGetUser(lpName AS ASCIIZ, lpUserName AS ASCIIZ, lpnLength AS DWORD)
WNetGetProviderName(BYVAL dwNetType AS DWORD, lpProviderName AS ASCIIZ, lpBufferSize AS DWORD)
WNetGetResourceParent(lpNetResource AS NETRESOURCE, lpBuffer AS NETRESOURCE, lpcbBuffer AS DWORD)
WNetGetResourceInformation(lpNetResource AS NETRESOURCE, lpBuffer AS ANY , lpcbBuffer AS DWORD, lplpSystem AS DWORD)
WNetGetNetworkInformation(lpszProvider AS ASCIIZ, lpNetInfoStruct AS NETINFOSTRUCT)
WNetGetLastError(lpError AS DWORD, lpErrorBuf AS ASCIIZ, BYVAL nErrorBufSize AS DWORD, lpNameBuf AS ASCIIZ, BYVAL nNameBufSize AS DWORD)
MultinetGetConnectionPerformance(lpNetResource AS NETRESOURCE, lpNetConnectInfoStruct AS NETCONNECTINFOSTRUCT)
Netbios(pncb AS NCB)
NetUseAdd(UncServerName AS DWORD, BYVAL Level AS DWORD, Buf AS DWORD, ParmError AS DWORD)
NetUseDel(UncServerName AS DWORD, UseName AS DWORD, BYVAL ForceCond AS DWORD)
NetUseEnum(UncServerName AS DWORD, BYVAL Level AS DWORD, BufPtr AS DWORD, BYVAL PreferedMaximumSize AS DWORD, EntriesRead AS DWORD, TotalEntries AS DWORD, ResumeHandle AS DWORD)
NetUseGetInfo(UncServerName AS DWORD, UseName AS DWORD, BYVAL Level AS DWORD, BufPtr AS DWORD)
NetRemoteTOD(UncServerName AS ANY, pBuffer AS DWORD)
NetApiBufferAllocate(BYVAL ByteCount AS DWORD, pBuffer AS ANY)
NetApiBufferFree(BYVAL pBuffer AS DWORD)
NetApiBufferReallocate(BYVAL pOldBuffer AS DWORD, BYVAL NewByteCount AS DWORD, pNewBuffer AS ANY)
NetApiBufferSize(BYVAL pBuffer AS DWORD, ByteCount AS DWORD)
LZStart()
LZDone()
CopyLZFile(BYVAL n1 AS LONG, BYVAL n2 AS LONG)
LZCopy(BYVAL hfSource AS DWORD, BYVAL hfDest AS DWORD)
LZInit(BYVAL hfSrc AS DWORD)
GetExpandedName(lpszSource AS ASCIIZ, lpszBuffer AS ASCIIZ)
LZOpenFile(lpszFile AS ASCIIZ, lpOf AS OFSTRUCT, BYVAL style AS WORD)
LZSeek(BYVAL hfFile AS DWORD, BYVAL lOffset AS LONG, BYVAL nOrigin AS LONG)
LZRead(BYVAL hfFile AS DWORD, lpvBuf AS ASCIIZ, BYVAL cbread AS LONG)
LZClose(BYVAL hfFile AS DWORD)
CommandLineToArgvW(lpCmdLine AS ANY, pNumArgs AS LONG)
DoEnvironmentSubst(szString AS ASCIIZ, BYVAL cbString AS DWORD)
DragAcceptFiles(BYVAL hwnd AS DWORD, BYVAL fAccept AS LONG)
DragFinish(BYVAL hDrop AS DWORD)
DragQueryFile(BYVAL hDrop AS DWORD, BYVAL uiFile AS DWORD, lpStr AS ASCIIZ, BYVAL cch AS DWORD)
DragQueryPoint(BYVAL hDrop AS DWORD, lpPoint AS POINTAPI)
DuplicateIcon(BYVAL hInst AS DWORD, BYVAL hIcon AS DWORD)
FindExecutable(lpFile AS ASCIIZ, lpDirectory AS ASCIIZ, lpResult AS ASCIIZ)
ExtractAssociatedIcon(BYVAL hInst AS DWORD, lpIconPath AS ASCIIZ, lpwIcon AS WORD)
ExtractIcon(BYVAL hInst AS DWORD, lpszExeFileName AS ASCIIZ, BYVAL nIconIndex AS DWORD)
ExtractIconEx(lpszFile AS ASCIIZ, BYVAL nIconIndex AS LONG, phiconLarge AS DWORD, phiconSmall AS DWORD, BYVAL nIcons AS DWORD)
SHAppBarMessage(BYVAL dwMessage AS DWORD, pData AS APPBARDATA)
SHEmptyRecycleBin(BYVAL hwnd AS DWORD, pszRootPath AS ASCIIZ, BYVAL dwFlags AS DWORD)
ShellAbout(BYVAL hWnd AS DWORD, szApp AS ASCIIZ, szOtherStuff AS ASCIIZ, BYVAL hIcon AS DWORD)
ShellExecute(BYVAL hwnd AS DWORD, lpOperation AS ASCIIZ, lpFile AS ASCIIZ, lpParameters AS ASCIIZ, lpDirectory AS ASCIIZ, BYVAL nShowCmd AS LONG)
ShellExecuteEx(lpShellInfo AS SHELLEXECUTEINFO)
Shell_NotifyIcon(BYVAL dwMessage AS DWORD, lpData AS NOTIFYICONDATA)
SHCreateProcessAsUserW(pscpi AS SHCREATEPROCESSINFOW)
SHEnumerateUnreadMailAccounts(BYVAL hKeyUser AS DWORD, BYVAL dwIndex AS DWORD, pszMailAddress AS ASCIIZ, BYVAL cchMailAddress AS LONG)
SHFileOperation(lpFileOp AS SHFILEOPSTRUCT)
SHFreeNameMappings(BYVAL hNameMappings AS DWORD)
SHGetDiskFreeSpace(pszVolume AS ASCIIZ, pqwFreeCaller AS QUAD, pqwTot AS QUAD, pqwFree AS QUAD)
SHGetDiskFreeSpaceEx(pszVolume AS ASCIIZ, pqwFreeCaller AS QUAD, pqwTot AS QUAD, pqwFree AS QUAD)
SHGetFileInfo(pszPath AS ASCIIZ, BYVAL dwFileAttributes AS DWORD, psfi AS SHFILEINFO, BYVAL cbFileInfo AS DWORD, BYVAL uFlags AS DWORD)
SHGetImageList(BYVAL iImageList AS LONG, riid AS GUIDAPI, ppvObj AS ANY)
SHGetNewLinkInfo(pszLinkto AS ASCIIZ, pszDir AS ASCIIZ, pszName AS ASCIIZ, pfMustCopy AS LONG, BYVAL uFlags AS DWORD)
SHGetUnreadMailCount(BYVAL hKeyUser AS DWORD, pszMailAddress AS ASCIIZ, pdwCount AS DWORD, pFileTime AS FILETIME, pszShellExecuteCommand AS ASCIIZ, BYVAL cchShellExecuteCommand AS LONG)
SHInvokePrinterCommand(BYVAL hwnd AS DWORD, BYVAL uAction AS DWORD, lpBuf1 AS ASCIIZ, lpBuf2 AS ASCIIZ, BYVAL fModal AS LONG)
SHQueryRecycleBin(pszRootPath AS ASCIIZ, pSHQueryRBInfo AS SHQUERYRBINFO)
SHSetUnreadMailCount(pszMailAddress AS ASCIIZ, BYVAL dwCount AS DWORD, pszShellExecuteCommand AS ASCIIZ)
WinExecError(BYVAL hwnd AS DWORD, BYVAL xerror AS LONG, lpstrFileName AS ASCIIZ, lpstrTitle AS ASCIIZ)
SHAddToRecentDocs(BYVAL uFlags AS DWORD, pv AS ANY)
SHBindToParent(pidl AS ANY, riid AS GUIDAPI, ppv AS ANY, ppidlLast AS ANY)
SHBrowseForFolder(lpbi AS BROWSEINFO)
SHChangeNotify(BYVAL nEventId AS LONG, BYVAL uFlags AS DWORD, dwItem1 AS ANY, dwItem2 AS ANY)
SHCreateDirectoryEx(BYVAL hwnd AS DWORD, pszPath AS ASCIIZ, psa AS SECURITY_ATTRIBUTES)
SHEnableServiceObject(rclsid AS GUIDAPI, BYVAL fEnable AS LONG)
SHGetDesktopFolder(ppshf AS ANY)
SHGetFolderPath(BYVAL hwndOwnder AS DWORD, BYVAL nFolder AS LONG, BYVAL hToken AS DWORD, BYVAL dwFlags AS DWORD, pszPath AS ASCIIZ)
SHGetFolderPathAndSubDir(BYVAL hwndOwnder AS DWORD, BYVAL csidl AS LONG, BYVAL hToken AS DWORD, BYVAL dwFlags AS DWORD, pszSubDir AS ASCIIZ, pszPath AS ASCIIZ)
SHGetIconOverlayIndex(pszIconPath AS ASCIIZ, BYVAL iIconIndex AS LONG)
SHGetInstanceExplorer(ppunk AS ANY)
SHGetPathFromIDList(pidList AS ANY, lpBuffer AS ASCIIZ)
SHGetSettings(lpss AS WORD, BYVAL dwMask AS DWORD)
SHGetSpecialFolderLocation(BYVAL hwndOwner AS DWORD, BYVAL nFolder AS LONG, pidl AS ANY)
SHGetSpecialFolderPath(BYVAL hwndowner AS DWORD, lpszPath AS ASCIIZ, BYVAL nFolder AS LONG, BYVAL fCreate AS LONG)
SHIsFileAvailableOffline(pwszPath AS ANY, pdwStatus AS DWORD)
SHLoadInProc(rclsid AS GUIDAPI)
SHLoadNonloadedIconOverlayIdentifiers()
SHParseDisplayName(pszName AS ANY, pbc AS ANY, ppidl AS ANY, sfgaoIn AS ANY, psfgaoOut AS ANY)
SHOpenFolderAndSelectItems(pdilFolder AS ANY, BYVAL cidl AS DWORD, apidl AS ANY, BYVAL dwFlags AS DWORD)
SHUpdateImage(pszHashItem AS ASCIIZ, BYVAL iIndex AS LONG, BYVAL uFlags AS DWORD, BYVAL iImageIndex AS LONG)
SHFormatDrive(BYVAL hWnd AS DWORD, BYVAL drive AS DWORD, BYVAL fmtID AS DWORD, BYVAL options AS DWORD)
SysAllocString(sz AS ANY)
SysReAllocString(pbstr AS ANY, psz AS ANY)
SysAllocStringLen(pch AS ANY, BYVAL cch AS DWORD)
SysReAllocStringLen(pbstr AS ANY, psz AS ANY, BYVAL cch AS DWORD)
SysFreeString(bstr AS ANY)
SysStringLen(bstr AS ANY)
SysStringByteLen(bstr AS ANY)
SysAllocStringByteLen(psz AS ASCIIZ, BYVAL ulen AS DWORD)
DosDateTimeToVariantTime(BYVAL wDosDate AS WORD, BYVAL wDosTime AS WORD, vbTime AS DOUBLE)
VarBstrFromDec(pdecIn AS ANY, BYVAL lcid AS DWORD, BYVAL dwFlags AS DWORD, pbstrOut AS STRING)
VarDateFromStr(BYVAL OleString AS DWORD, BYVAL lcid AS DWORD, BYVAL dwFlags AS DWORD, pDate AS DOUBLE)
VarDecFromStr(strIn AS STRING, BYVAL lcid AS DWORD, BYVAL dwFlags AS DWORD, pdecOut AS ANY)
VariantTimeToDosDateTime(BYVAL vbTime AS DOUBLE, pwDosDate AS WORD, pwDosTime AS WORD)
VariantTimeToSystemTime(BYVAL vbtime AS DOUBLE, lpSystemTime AS SYSTEMTIME)
SystemTimeToVariantTime(lpSystemTime AS SYSTEMTIME, vbtime AS DOUBLE)
VerFindFile(BYVAL uFlags AS DWORD, szFileName AS ASCIIZ, szWinDir AS ASCIIZ, szAppDir AS ASCIIZ, szCurDir AS ASCIIZ, lpuCurDirLen AS DWORD, szDestDir AS ASCIIZ, lpuDestDirLen AS DWORD)
VerInstallFile(BYVAL uFlags AS DWORD, szSrcFileName AS ASCIIZ, szDestFileName AS ASCIIZ, szSrcDir AS ASCIIZ, szDestDir AS ASCIIZ, szCurDir AS ASCIIZ, szTmpFile AS ASCIIZ, lpuTmpFileLen AS DWORD)
GetFileVersionInfoSize(lptstrFilename AS ASCIIZ, lpdwHandle AS DWORD)
GetFileVersionInfo(lptstrFilename AS ASCIIZ, BYVAL dwHandle AS DWORD, BYVAL dwLen AS DWORD, lpData AS ANY)
VerQueryValue(BYVAL pBlock AS DWORD, lpSubBlock AS ASCIIZ, lplpBuffer AS DWORD, puLen AS DWORD)
MoveMemory(pDestination AS ANY, pSource AS ANY, BYVAL cbLength AS LONG)
CopyMemory(BYVAL pDestination AS DWORD, BYVAL pSource AS DWORD, BYVAL cbLength AS LONG)
FillMemory(BYVAL pDestination AS DWORD, BYVAL cbLength AS LONG, BYVAL bFill AS BYTE)
ZeroMemory(BYVAL pDestination AS DWORD, BYVAL cbLength AS LONG)
MAKELANGID(BYVAL p AS WORD, BYVAL s AS WORD)
CoBuildVersion()
CoCreateGuid(pGuid AS GUIDAPI)
CoCreateInstance(rclsid AS GUIDAPI, pUnkOuter AS ANY, BYVAL dwClsContext AS DWORD, riid AS GUIDAPI, ppv AS DWORD)
CoGetCurrentProcess()
CoGetMalloc(BYVAL dwMemContext AS DWORD, BYVAL ppMalloc AS DWORD)
CoInitialize(pvReserved AS ANY)
CoInitializeEx(pvReserved AS ANY, BYVAL dwCoInit AS DWORD)
CoTaskMemAlloc(BYVAL cbSize AS DWORD)
CoTaskMemFree(BYVAL pMem AS DWORD)
CoTaskMemRealloc(BYVAL pMem AS DWORD, BYVAL cbSize AS DWORD)
CoUninitialize()
URLDownloadToFile(pCaller AS ANY, szURL AS ASCIIZ, szFileName AS ASCIIZ, BYVAL dwReserved AS DWORD, BYVAL lpfnCB AS DWORD)
InitCommonControls()
InitCommonControlsEx(icc AS INIT_COMMON_CONTROLSEX)
ImageList_Create(BYVAL cx AS LONG, BYVAL cy AS LONG, BYVAL flags AS DWORD, BYVAL cInitial AS LONG, BYVAL cGrow AS LONG)
ImageList_Destroy(BYVAL himl AS DWORD)
ImageList_GetImageCount(BYVAL himl AS DWORD)
ImageList_SetImageCount(BYVAL himl AS DWORD, BYVAL uNewCount AS DWORD)
ImageList_Add(BYVAL himl AS DWORD, BYVAL hbmImage AS DWORD, BYVAL hbmMask AS DWORD)
ImageList_ReplaceIcon(BYVAL himl AS DWORD, BYVAL i AS LONG, BYVAL hIcon AS DWORD)
ImageList_SetBkColor(BYVAL himl AS DWORD, BYVAL clrBk AS DWORD)
ImageList_GetBkColor(BYVAL himl AS DWORD)
ImageList_SetOverlayImage(BYVAL himl AS DWORD, BYVAL iImage AS LONG, BYVAL iOverlay AS LONG)
ImageList_AddIcon(BYVAL hIml AS DWORD, hIcon AS DWORD)
IndexToOverlayMask(BYVAL i AS LONG)
ImageList_Draw(BYVAL himl AS DWORD, BYVAL i AS LONG, BYVAL hdcDst AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL fStyle AS DWORD)
ImageList_Replace(BYVAL himl AS DWORD, BYVAL i AS LONG, BYVAL hbmImage AS DWORD, BYVAL hbmMask AS DWORD)
ImageList_AddMasked(BYVAL himl AS DWORD, BYVAL hbmImage AS DWORD, BYVAL crMask AS DWORD)
ImageList_DrawEx(BYVAL himl AS DWORD, BYVAL i AS LONG, BYVAL hdcDst AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL dx AS LONG, BYVAL dy AS LONG, BYVAL rgbBk AS DWORD, BYVAL rgbFg AS DWORD, BYVAL fStyle AS DWORD)
ImageList_DrawIndirect(pimldp AS IMAGELISTDRAWPARAMS)
ImageList_Remove(BYVAL himl AS DWORD, BYVAL i AS LONG)
ImageList_GetIcon(BYVAL himl AS DWORD, BYVAL i AS LONG, BYVAL flags AS DWORD)
ImageList_LoadImage(BYVAL dhi AS DWORD, lpBmp AS ASCIIZ, BYVAL cx AS LONG, BYVAL cGrow AS LONG, BYVAL crMask AS DWORD, BYVAL uTypw AS DWORD, BYVAL uFlags AS DWORD)
ImageList_Copy(BYVAL himlDst AS DWORD, BYVAL iDst AS LONG, BYVAL himlSrc AS DWORD, BYVAL iSrc AS LONG, BYVAL uFlags AS DWORD)
ImageList_BeginDrag(BYVAL himlTrack AS DWORD, BYVAL iTrack AS LONG, BYVAL dxHotSpot AS LONG, BYVAL dyHotSpot AS LONG)
ImageList_EndDrag()
ImageList_DragEnter(BYVAL hWndLock AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG)
ImageList_DragLeave(BYVAL hWndLock AS DWORD)
ImageList_DragMove(BYVAL x AS LONG, BYVAL y AS LONG)
ImageList_SetDragCursorImage(BYVAL himlDrag AS DWORD, BYVAL iDrag AS LONG, BYVAL dxHotSpot AS LONG, BYVAL dyHotSpot AS LONG)
ImageList_DragShowNolock(BYVAL fShow AS LONG)
ImageList_GetDragImage(ppt AS POINTAPI, pptHotSpot AS POINTAPI)
ImageList_RemoveAll(BYVAL hIml AS DWORD)
ImageList_ExtractIcon(BYVAL dhI AS DWORD, BYVAL hIml AS DWORD,BYVAL i AS LONG)
ImageList_LoadBitmap(BYVAL dhI AS DWORD, lpBmp AS ASCIIZ,BYVAL cx AS LONG, BYVAL cGrow AS LONG,crMask AS LONG)
ImageList_Read(pstm AS ANY)
ImageList_Write(BYVAL himl AS DWORD, pstm AS ANY)
ImageList_ReadEx(BYVAL dwFlags AS DWORD, pstm AS ANY, riid AS GUIDAPI, ppv AS ANY)
ImageList_WriteEx(BYVAL himl AS DWORD, BYVAL dwFlags AS DWORD, pstm AS ANY)
ImageList_GetIconSize(BYVAL himl AS DWORD, cx AS LONG, cy AS LONG)
ImageList_SetIconSize(BYVAL himl AS DWORD, BYVAL cx AS LONG, BYVAL cy AS LONG)
ImageList_GetImageInfo(BYVAL himl AS DWORD, BYVAL i AS LONG, pImageInfo AS IMAGEINFO)
ImageList_Merge(BYVAL himl1 AS DWORD, BYVAL i1 AS LONG, BYVAL himl2 AS DWORD, BYVAL i2 AS LONG, BYVAL dx AS LONG, BYVAL dy AS LONG)
ImageList_Duplicate(BYVAL himl AS DWORD)
Header_GetItemCount(BYVAL hWndHD AS DWORD)
Header_InsertItem(BYVAL hWndHD AS DWORD, BYVAL i AS DWORD, BYVAL phdi AS DWORD)
Header_DeleteItem(BYVAL hWndHD AS DWORD, BYVAL i AS DWORD)
Header_GetItem(BYVAL hWndHD AS DWORD, BYVAL i AS DWORD,phdi AS HD_ITEM)
Header_SetItem(BYVAL hWndHD AS DWORD, BYVAL i AS DWORD,phdi AS HD_ITEM)
Header_Layout(BYVAL hWndHD AS DWORD, playout AS HD_LAYOUT)
Header_GetItemRect(BYVAL hwnd AS DWORD, BYVAL iItem AS LONG,BYVAL lprc AS DWORD)
Header_SetImageList(BYVAL hwnd AS DWORD, BYVAL himl AS DWORD)
Header_GetImageList(BYVAL hwnd AS DWORD)
Header_OrderToIndex(BYVAL hwnd AS DWORD, BYVAL i AS LONG)
Header_CreateDragImage(BYVAL hwnd AS DWORD, BYVAL i AS DWORD)
Header_GetOrderArray(BYVAL hwnd AS DWORD, BYVAL iCount AS DWORD, BYVAL lpi AS LONG)
Header_SetOrderArray(BYVAL hwnd AS DWORD, BYVAL iCount AS DWORD, BYVAL lpi AS LONG)
Header_SetHotDivider(BYVAL hwnd AS DWORD, BYVAL fPos AS DWORD, BYVAL dw AS LONG)
Header_SetBitmapMargin(BYVAL hwnd AS DWORD, BYVAL iWidth AS DWORD)
Header_GetBitmapMargin(BYVAL hwnd AS DWORD)
Header_SetUnicodeFormat(BYVAL hwnd AS DWORD, BYVAL fUnicode AS DWORD)
Header_GetUnicodeFormat(BYVAL hwnd AS DWORD)
Header_SetFilterChangeTimeout(BYVAL hwnd AS DWORD, BYVAL i AS LONG)
Header_EditFilter(BYVAL hwnd AS DWORD, BYVAL i AS DWORD, BYVAL fDiscardChanges AS INTEGER)
Header_ClearFilter(BYVAL hwnd AS DWORD, BYVAL i AS DWORD)
Header_ClearAllFilters(BYVAL hwnd AS DWORD)
CreateToolbarEx(BYVAL hWnd AS DWORD, BYVAL ws AS DWORD, BYVAL wID AS WORD, BYVAL nBitmaps AS LONG, BYVAL hBMInst AS DWORD, BYVAL wBMID AS DWORD, lpButtons AS TBBUTTON, BYVAL iNumButtons AS LONG, BYVAL dxButton AS LONG, BYVAL dyButton AS LONG, BYVAL dxBitmap AS LONG, BYVAL dyBitmap AS LONG, BYVAL uStructSize AS DWORD)
CreateMappedBitmap(BYVAL hInstance AS DWORD, BYVAL idBitmap AS LONG, BYVAL wFlags AS DWORD, lpColorMap AS COLORMAP, BYVAL iNumMaps AS LONG)
DrawStatusText(BYVAL hDc AS DWORD, lprec AS RECT, sztext AS ASCIIZ, BYVAL uFlags AS DWORD)
CreateStatusWindow(BYVAL Style AS LONG, lpszText AS ASCIIZ, BYVAL hWndParent AS DWORD, BYVAL wId AS DWORD)
MenuHelp(BYVAL uMsg AS DWORD, BYVAL wParam AS DWORD, BYVAL lParam AS LONG, BYVAL hMainMenu AS DWORD, BYVAL hInst AS DWORD, BYVAL hWndStatus AS DWORD, lpwIds AS DWORD)
ShowHideMenuCtl(BYVAL hWnd AS DWORD, BYVAL uFlags AS DWORD, lpInfo AS LONG)
GetEffectiveClientRect(BYVAL hWnd AS DWORD, lprc AS RECT, lpInfo AS LONG)
MakeDragList(BYVAL hLB AS DWORD)
DrawInsert(BYVAL handParent AS DWORD, BYVAL hLB AS DWORD, BYVAL nItem AS LONG)
LBItemFromPt(BYVAL hLB AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL bAutoScroll AS LONG)
CreateUpDownControl(BYVAL dwStyle AS DWORD, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL cx AS LONG, BYVAL cy AS LONG, BYVAL hParent AS DWORD, BYVAL nID AS LONG, BYVAL hInst AS DWORD, BYVAL hBuddy AS DWORD, BYVAL nUpper AS LONG, BYVAL nLower AS LONG, BYVAL nPos AS LONG)
ListView_SetUnicodeFormat(BYVAL hwnd AS DWORD, BYVAL fUnicode AS LONG)
ListView_GetUnicodeFormat(BYVAL hwnd AS DWORD)
ListView_GetBkColor(BYVAL hWnd AS DWORD)
ListView_SetBkColor(BYVAL hWnd AS DWORD, BYVAL clrBk AS DWORD)
ListView_GetImageList(BYVAL hWnd AS DWORD, BYVAL iImageList AS LONG)
ListView_SetImageList(BYVAL hWnd AS DWORD, BYVAL himl AS DWORD, BYVAL iImageList AS LONG)
ListView_GetItemCount(BYVAL hWnd AS DWORD)
IndexToStateImageMask(BYVAL i AS LONG)
ListView_GetItem(BYVAL hWnd AS DWORD, pitem AS LV_ITEM)
ListView_SetItem(BYVAL hWnd AS DWORD, pitem AS LV_ITEM)
ListView_InsertItem(BYVAL hWnd AS DWORD, pitem AS LV_ITEM)
ListView_DeleteItem(BYVAL hWnd AS DWORD, BYVAL i AS LONG)
ListView_DeleteAllItems(BYVAL hWnd AS DWORD)
ListView_GetCallbackMask(BYVAL hWnd AS DWORD)
ListView_SetCallbackMask(BYVAL hWnd AS DWORD, BYVAL mask AS DWORD)
ListView_GetNextItem(BYVAL hWnd AS DWORD, BYVAL i AS LONG, BYVAL flags AS LONG)
ListView_FindItem(BYVAL hWnd AS DWORD, BYVAL iStart AS LONG, plvfi AS LV_FINDINFO)
ListView_GetItemRect(BYVAL hWnd AS DWORD, BYVAL i AS LONG, prc AS RECT, BYVAL code AS LONG)
ListView_SetItemPosition(BYVAL hWndLV AS DWORD, BYVAL i AS LONG, BYVAL x AS INTEGER, BYVAL y AS INTEGER)
ListView_GetItemPosition(BYVAL hWndLV AS DWORD, BYVAL i AS LONG, pt AS POINTAPI)
ListView_GetStringWidth(BYVAL hWndLV AS DWORD, psz AS ASCIIZ)
ListView_HitTest(BYVAL hWndLV AS DWORD, pinfo AS LV_HITTESTINFO)
ListView_EnsureVisible(BYVAL hWndLV AS DWORD, BYVAL i AS LONG, BYVAL fPartialOK AS INTEGER)
ListView_Scroll(BYVAL hWndLV AS DWORD, dx AS LONG, BYVAL dy AS LONG)
ListView_RedrawItems(BYVAL hWndLV AS DWORD, BYVAL iFirst AS LONG, BYVAL iLast AS LONG)
ListView_Arrange(BYVAL hWndLV AS DWORD, BYVAL code AS LONG)
ListView_EditLabel(BYVAL hWndLV AS DWORD, BYVAL i AS LONG)
ListView_GetEditControl(BYVAL hWndLV AS DWORD)
ListView_GetColumn(BYVAL hWnd AS DWORD, BYVAL iCol AS LONG, pcol AS LV_COLUMN)
ListView_SetColumn(BYVAL hWnd AS DWORD, BYVAL iCol AS LONG, pcol AS LV_COLUMN)
ListView_InsertColumn(BYVAL hWnd AS DWORD, BYVAL iCol AS LONG, pcol AS LV_COLUMN)
ListView_DeleteColumn(BYVAL hWnd AS DWORD, BYVAL iCol AS LONG)
ListView_GetColumnWidth(BYVAL hWnd AS DWORD, iCol AS LONG)
ListView_SetColumnWidth(BYVAL hWnd AS DWORD, BYVAL iCol AS LONG, BYVAL cx AS INTEGER)
ListView_GetHeader(BYVAL hwnd AS DWORD)
ListView_CreateDragImage(BYVAL hWnd AS DWORD, BYVAL i AS LONG, lpptUpLeft AS POINTAPI)
ListView_GetViewRect(BYVAL hWnd AS DWORD, prc AS RECT)
ListView_GetTextColor(BYVAL hWnd AS DWORD)
ListView_SetTextColor(BYVAL hWnd AS DWORD, BYVAL clrText AS LONG)
ListView_GetTextBkColor(BYVAL hWnd AS DWORD)
ListView_SetTextBkColor(BYVAL hWnd AS DWORD, BYVAL clrTextBk AS LONG)
ListView_GetTopIndex(BYVAL hWndLV AS DWORD)
ListView_GetCountPerPage(BYVAL hWndLV AS DWORD)
ListView_GetOrigin(BYVAL hWndLV AS DWORD, pt AS POINTAPI)
ListView_Update(BYVAL hWndLV AS DWORD, BYVAL i AS LONG)
ListView_SetItemState(BYVAL hWndLV AS DWORD, BYVAL i AS LONG,BYVAL nData AS DWORD, BYVAL mask AS DWORD)
ListView_SetCheckState(BYVAL hWndLV AS DWORD, BYVAL i AS LONG,BYVAL fCheck AS LONG)
ListView_GetItemState(BYVAL hWndLV AS DWORD, BYVAL i AS LONG, BYVAL mask AS LONG)
ListView_GetCheckState(BYVAL hwndLV AS DWORD, BYVAL i AS LONG)
ListView_GetItemText(BYVAL hWndLV AS DWORD, BYVAL i AS LONG,BYVAL iSubItem AS LONG, pszText AS ASCIIZ, BYVAL cchTextMax AS LONG)
ListView_SetItemText(BYVAL hWndLV AS DWORD, BYVAL i AS LONG,BYVAL iSubItem AS LONG, pszText AS ASCIIZ)
ListView_SetItemCount(BYVAL hwndLV AS DWORD, BYVAL cItems AS DWORD)
ListView_SetItemCountEx(BYVAL hwndLV AS DWORD, BYVAL cItems AS DWORD,BYVAL dwFlags AS LONG)
ListView_SortItems(BYVAL hWndLV AS DWORD,BYVAL pfnCompare AS DWORD, BYVAL lPrm AS LONG)
ListView_SetItemPosition32(BYVAL hWndLV AS DWORD, BYVAL i AS LONG,BYVAL x AS LONG, BYVAL y AS LONG)
ListView_GetSelectedCount(BYVAL hWndLV AS DWORD)
ListView_GetItemSpacing(BYVAL hWndLV AS DWORD,BYVAL fSmall AS LONG)
ListView_GetISearchString(BYVAL hWndLV AS DWORD, lpsz AS ASCIIZ)
ListView_SetIconSpacing(BYVAL hwndLV AS DWORD, BYVAL cx AS INTEGER,BYVAL cy AS INTEGER)
ListView_SetExtendedListViewStyle(BYVAL hwndLV AS DWORD,BYVAL dw AS DWORD)
ListView_SetExtendedListViewStyleEx(BYVAL hwndLV AS DWORD,BYVAL dwMask AS DWORD, BYVAL dw AS DWORD)
ListView_GetExtendedListViewStyle(BYVAL hwndLV AS DWORD)
ListView_GetSubItemRect(BYVAL hwnd AS DWORD, BYVAL iItem AS LONG,BYVAL iSubItem AS LONG, BYVAL code AS LONG, prc AS RECT PTR)
ListView_GetSubItemRect(BYVAL hwnd AS DWORD, BYVAL iItem AS LONG,BYVAL iSubItem AS LONG, BYVAL code AS LONG, BYVAL prc AS RECT PTR)
ListView_SubItemHitTest(BYVAL hwnd AS DWORD, plvhti AS LVHITTESTINFO)
ListView_SetColumnOrderArray(BYVAL hwnd AS DWORD,BYVAL iCount AS LONG, BYVAL pii AS DWORD)
ListView_GetColumnOrderArray(BYVAL hwnd AS DWORD,BYVAL iCount AS LONG, BYVAL pii AS DWORD)
ListView_SetHotItem(BYVAL hwnd AS DWORD, i AS DWORD)
ListView_GetHotItem(BYVAL hwnd AS DWORD)
ListView_SetHotCursor(BYVAL hwnd AS DWORD, BYVAL hcur AS DWORD)
ListView_GetHotCursor(BYVAL hwnd AS DWORD)
ListView_ApproximateViewRect(BYVAL hwnd AS DWORD,BYVAL iWidth AS INTEGER, BYVAL iHeight AS INTEGER, BYVAL iCount AS LONG)
ListView_SetWorkAreas(BYVAL hwnd AS DWORD,BYVAL nWorkAreas AS LONG, prc AS RECT)
ListView_GetWorkAreas(BYVAL hwnd AS DWORD,BYVAL nWorkAreas AS LONG, prc AS RECT)
ListView_GetNumberOfWorkAreas(BYVAL hwnd AS DWORD,pnWorkAreas AS DWORD)
ListView_GetSelectionMark(BYVAL hwnd AS DWORD)
ListView_SetSelectionMark(BYVAL hwnd AS DWORD, i AS LONG)
ListView_SetHoverTime(BYVAL hwndLV AS DWORD,BYVAL dwHoverTimeMs AS DWORD)
ListView_GetHoverTime(BYVAL hwndLV AS DWORD)
ListView_SetToolTips(BYVAL hwndLV AS DWORD,BYVAL hwndNewHwnd AS DWORD)
ListView_GetToolTips(BYVAL hwndLV AS DWORD)
ListView_SortItemsEx(BYVAL hwndLV AS DWORD,BYVAL pfnCompare AS DWORD, BYVAL lParamSort AS LONG)
ListView_SetSelectedColumn(BYVAL hwnd AS DWORD, BYVAL iCol AS LONG)
ListView_SetTileWidth(BYVAL hwnd AS DWORD, BYVAL cpWidth AS DWORD)
ListView_SetView(BYVAL hwnd AS DWORD, BYVAL dView AS DWORD)
ListView_GetView(BYVAL hwnd AS DWORD)
ListView_InsertGroup(BYVAL hwnd AS DWORD, BYVAL index AS LONG,pgrp AS LVGROUP)
ListView_SetGroupInfo(BYVAL hwnd AS DWORD, BYVAL iGroupId AS LONG,pgrp AS LVGROUP)
ListView_GetGroupInfo(BYVAL hwnd AS DWORD, BYVAL iGroupId AS LONG,pgrp AS LVGROUP)
ListView_RemoveGroup(BYVAL hwnd AS DWORD, BYVAL iGroupId AS LONG)
ListView_MoveGroup(BYVAL hwnd AS DWORD, BYVAL iGroupId AS LONG,BYVAL toIndex AS LONG)
ListView_MoveItemToGroup(BYVAL hwnd AS DWORD, BYVAL idItemFrom AS LONG,BYVAL idGroupTo AS LONG)
ListView_SetGroupMetrics(BYVAL hwnd AS DWORD,pGroupMetrics AS LVGROUPMETRICS)
ListView_GetGroupMetrics(BYVAL hwnd AS DWORD,pGroupMetrics AS LVGROUPMETRICS)
ListView_EnableGroupView(BYVAL hwnd AS DWORD,BYVAL fEnable AS LONG)
ListView_SortGroups(BYVAL hwnd AS DWORD,BYVAL pfnGroupCompate AS DWORD, BYVAL plv AS DWORD)
ListView_InsertGroupSorted(BYVAL hwnd AS DWORD,structInsert AS LVINSERTGROUPSORTED)
ListView_RemoveAllGroups(BYVAL hwnd AS DWORD)
ListView_HasGroup(BYVAL hwnd AS DWORD, BYVAL iGroupId AS LONG)
ListView_SetTileViewInfo(BYVAL hwnd AS DWORD,ptvi AS LVTILEVIEWINFO)
ListView_GetTileViewInfo(BYVAL hwnd AS DWORD, ptvi AS LVTILEVIEWINFO)
ListView_SetTileInfo(BYVAL hwnd AS DWORD, pti AS LVTILEINFO)
ListView_GetTileInfo(BYVAL hwnd AS DWORD, pti AS LVTILEINFO)
ListView_SetInsertMark(BYVAL hwnd AS DWORD, lvim AS LVINSERTMARK)
ListView_GetInsertMark(BYVAL hwnd AS DWORD, lvim AS LVINSERTMARK)
ListView_InsertMarkHitTest(BYVAL hwnd AS DWORD,ppoint AS POINTAPI, lvim AS LVINSERTMARK)
ListView_GetInsertMarkRect(BYVAL hwnd AS DWORD, rc AS RECT)
ListView_SetInsertMarkColor(BYVAL hwnd AS DWORD, BYVAL colr AS DWORD)
ListView_GetInsertMarkColor(BYVAL hwnd AS DWORD)
ListView_SetInfoTip(BYVAL hwndLV AS DWORD,plvInfoTip AS LVSETINFOTIP)
ListView_GetSelectedColumn(BYVAL hwnd AS DWORD)
ListView_IsGroupViewEnabled(BYVAL hwnd AS DWORD)
ListView_GetOutlineColor(BYVAL hwnd AS DWORD)
ListView_SetOutlineColor(BYVAL hwnd AS DWORD, BYVAL colr AS DWORD)
ListView_CancelEditLabel(BYVAL hwnd AS DWORD)
ListView_MapIndexToID(BYVAL hwnd AS DWORD, BYVAL index AS DWORD)
ListView_MapIDToIndex(BYVAL hwnd AS DWORD, BYVAL id AS DWORD)
ListView_SetBkImage(BYVAL hwnd AS DWORD, BYVAL plvbki AS DWORD)
ListView_GetBkImage(BYVAL hwnd AS DWORD, BYVAL plvbki AS DWORD)
TreeView_InsertItem(BYVAL hWnd AS DWORD, lpis AS TV_INSERTSTRUCT)
TreeView_DeleteItem(BYVAL hWnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_DeleteAllItems(BYVAL hWnd AS DWORD)
TreeView_Expand(BYVAL hWnd AS DWORD, BYVAL hitem AS LONG,BYVAL code AS DWORD)
TreeView_GetItemRect(BYVAL hWnd AS DWORD, BYVAL hItem AS DWORD,prc AS RECT, BYVAL code AS LONG)
TreeView_GetCount(BYVAL hWnd AS DWORD)
TreeView_GetIndent(BYVAL hWnd AS DWORD)
TreeView_SetIndent(BYVAL hWnd AS DWORD, BYVAL indent AS DWORD)
TreeView_GetImageList(BYVAL hWnd AS DWORD, BYVAL iImage AS LONG)
TreeView_SetImageList(BYVAL hWnd AS DWORD, BYVAL himl AS DWORD,BYVAL iImage AS LONG)
TreeView_GetNextItem(BYVAL hWnd AS DWORD, BYVAL hitem AS DWORD,BYVAL code AS DWORD)
TreeView_GetChild(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_GetNextSibling(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_GetPrevSibling(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_GetParent(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_GetFirstVisible(BYVAL hwnd AS DWORD)
TreeView_GetNextVisible(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_GetPrevVisible(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_GetSelection(BYVAL hwnd AS DWORD)
TreeView_GetDropHilight(BYVAL hwnd AS DWORD)
TreeView_GetRoot(BYVAL hwnd AS DWORD)
TreeView_GetLastVisible(BYVAL hwnd AS DWORD)
TreeView_Select(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD,BYVAL code AS LONG)
TreeView_SelectItem(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_SelectDropTarget(BYVAL hwnd AS DWORD,BYVAL hitem AS DWORD)
TreeView_SelectSetFirstVisible(BYVAL hwnd AS DWORD,BYVAL hitem AS DWORD)
TreeView_GetItem(BYVAL hwnd AS DWORD, pitem AS TV_ITEM)
TreeView_SetItem(BYVAL hwnd AS DWORD, pitem AS TV_ITEM)
TreeView_EditLabel(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_GetEditControl(BYVAL hwnd AS DWORD)
TreeView_GetVisibleCount(BYVAL hWnd AS DWORD)
TreeView_HitTest(BYVAL hwnd AS DWORD, lpht AS TV_HITTESTINFO)
TreeView_CreateDragImage(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_SortChildren(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD,BYVAL recurse AS DWORD)
TreeView_EnsureVisible(BYVAL hwnd AS DWORD, BYVAL hitem AS DWORD)
TreeView_SortChildrenCB(BYVAL hwnd AS DWORD, psort AS TV_SORTCB,recurse AS DWORD)
TreeView_EndEditLabelNow(BYVAL hwnd AS DWORD,BYVAL fCancel AS DWORD)
TreeView_GetISearchString(BYVAL hwndTV AS DWORD, lpsz AS ASCIIZ)
TreeView_SetToolTips(BYVAL hwnd AS DWORD, BYVAL hwndTT AS DWORD)
TreeView_GetToolTips(BYVAL hwnd AS DWORD)
TreeView_SetInsertMark(BYVAL hwnd AS DWORD, BYVAL hItem AS DWORD,BYVAL fAfter AS DWORD)
TreeView_SetUnicodeFormat(BYVAL hwnd AS DWORD,BYVAL fUnicode AS DWORD)
TreeView_GetUnicodeFormat(BYVAL hwnd AS DWORD)
TreeView_SetItemHeight(BYVAL hwnd AS DWORD, iHeight AS DWORD)
TreeView_GetItemHeight(BYVAL hwnd AS DWORD)
TreeView_SetBkColor(BYVAL hwnd AS DWORD, BYVAL clr AS DWORD)
TreeView_SetTextColor(BYVAL hwnd AS DWORD, BYVAL clr AS DWORD)
TreeView_GetBkColor(BYVAL hwnd AS DWORD)
TreeView_GetTextColor(BYVAL hwnd AS DWORD)
TreeView_SetScrollTime(BYVAL hwnd AS DWORD, BYVAL uTime AS DWORD)
TreeView_GetScrollTime(BYVAL hwnd AS DWORD)
TreeView_SetInsertMarkColor(BYVAL hwnd AS DWORD,BYVAL clr AS DWORD)
TreeView_GetInsertMarkColor(BYVAL hwnd AS DWORD)
TreeView_SetItemState(BYVAL hwndTV AS DWORD, BYVAL hti AS DWORD,BYVAL STATE AS DWORD, BYVAL statemask AS DWORD)
IndexToStateImageMask(BYVAL i AS LONG)
TreeView_SetCheckState(BYVAL hwndTV AS DWORD, BYVAL hti AS DWORD,BYVAL fCheck AS LONG)
TreeView_GetItemState(BYVAL hwndTV AS DWORD, BYVAL hti AS DWORD,BYVAL mask AS DWORD)
TreeView_GetCheckState(BYVAL hwndTV AS DWORD, BYVAL hti AS DWORD)
TreeView_SetLineColor(BYVAL hwnd AS DWORD, BYVAL clr AS DWORD)
TreeView_GetLineColor(BYVAL hwnd AS DWORD)
TabCtrl_GetImageList(BYVAL hWnd AS DWORD)
TabCtrl_SetImageList(BYVAL hWnd AS DWORD, BYVAL himl AS DWORD)
TabCtrl_GetItemCount(BYVAL hWnd AS DWORD)
TabCtrl_GetItem(BYVAL hwnd AS DWORD, BYVAL iItem AS DWORD,pItem AS TC_ITEM)
TabCtrl_SetItem(BYVAL hwnd AS DWORD, BYVAL iItem AS DWORD,pItem AS TC_ITEM)
TabCtrl_InsertItem(BYVAL hwnd AS DWORD, BYVAL iItem AS DWORD,pItem AS TC_ITEM)
TabCtrl_DeleteItem(BYVAL hwnd AS DWORD, BYVAL iItem AS DWORD)
TabCtrl_DeleteAllItems(BYVAL hwnd AS DWORD)
TabCtrl_GetItemRect(BYVAL hwnd AS DWORD, BYVAL i AS DWORD,prc AS RECT)
TabCtrl_GetCurSel(BYVAL hwnd AS DWORD)
TabCtrl_SetCurSel(BYVAL hwnd AS DWORD, BYVAL i AS DWORD)
TabCtrl_HitTest(BYVAL hwndTC AS DWORD, pinfo AS TC_HITTESTINFO)
TabCtrl_SetItemExtra(BYVAL hwndTC AS DWORD, BYVAL cb AS DWORD)
TabCtrl_AdjustRect(BYVAL hwnd AS DWORD, BYVAL bLarger AS DWORD,prc AS RECT)
TabCtrl_SetItemSize(BYVAL hwnd AS DWORD, BYVAL x AS INTEGER,BYVAL y AS INTEGER)
TabCtrl_RemoveImage(BYVAL hwnd AS DWORD, BYVAL i AS DWORD)
TabCtrl_SetPadding(BYVAL hwnd AS DWORD, BYVAL cx AS INTEGER, BYVAL cy AS INTEGER)
TabCtrl_GetRowCount(BYVAL hwnd AS DWORD)
TabCtrl_GetToolTips(BYVAL hwnd AS DWORD)
TabCtrl_SetToolTips(BYVAL hwnd AS DWORD, BYVAL hwndTT AS DWORD)
TabCtrl_GetCurFocus(BYVAL hwnd AS DWORD)
TabCtrl_SetCurFocus(BYVAL hwnd AS DWORD, BYVAL i AS DWORD)
TabCtrl_SetMinTabWidth(BYVAL hwnd AS DWORD, BYVAL x AS LONG)
TabCtrl_DeselectAll(BYVAL hwnd AS DWORD, BYVAL fExcludeFocus AS DWORD)
TabCtrl_HighlightItem(BYVAL hwnd AS DWORD, BYVAL i AS DWORD,BYVAL fHighlight AS INTEGER)
TabCtrl_SetExtendedStyle(BYVAL hwnd AS DWORD, BYVAL dw AS LONG)
TabCtrl_GetExtendedStyle(BYVAL hwnd AS DWORD)
TabCtrl_SetUnicodeFormat(BYVAL hwnd AS DWORD,BYVAL fUnicode AS DWORD)
TabCtrl_GetUnicodeFormat(BYVAL hwnd AS DWORD)
Animate_Create(BYVAL hWndP AS DWORD, BYVAL id AS DWORD,BYVAL dwStyle AS DWORD, BYVAL hInstance AS DWORD)
Animate_Open(BYVAL hwnd AS DWORD, szName AS ASCIIZ)
Animate_OpenEx(BYVAL hwnd AS DWORD, BYVAL hInst AS DWORD,szName AS ASCIIZ)
Animate_Play(BYVAL hwnd AS DWORD, BYVAL nFrom AS INTEGER,BYVAL nTo AS INTEGER, BYVAL rep AS DWORD)
Animate_Stop(BYVAL hwnd AS DWORD)
Animate_Close(BYVAL hwnd AS DWORD)
Animate_Seek(BYVAL hwnd AS DWORD, BYVAL FRAME AS LONG)
MonthCal_GetCurSel(BYVAL hmc AS DWORD, pst AS SYSTEMTIME)
MonthCal_SetCurSel(BYVAL hmc AS DWORD, pst AS SYSTEMTIME)
MonthCal_GetMaxSelCount(BYVAL hmc AS DWORD)
MonthCal_SetMaxSelCount(BYVAL hmc AS DWORD, BYVAL n AS DWORD)
MonthCal_GetSelRange(BYVAL hmc AS DWORD, rgst AS SYSTEMTIME)
MonthCal_SetSelRange(BYVAL hmc AS DWORD, rgst AS SYSTEMTIME)
MonthCal_GetMonthRange(BYVAL hmc AS DWORD, BYVAL gmr AS DWORD,rgst AS SYSTEMTIME)
MonthCal_SetDayState(BYVAL hmc AS DWORD, BYVAL cbds AS LONG,rgds AS DWORD)
MonthCal_GetMinReqRect(BYVAL hmc AS DWORD, prc AS RECT)
MonthCal_SetColor(BYVAL hmc AS DWORD, BYVAL iColor AS DWORD,BYVAL clr AS DWORD)
MonthCal_GetColor(BYVAL hmc AS DWORD, BYVAL iColor AS DWORD)
MonthCal_SetToday(BYVAL hmc AS DWORD, pst AS SYSTEMTIME)
MonthCal_GetToday(BYVAL hmc AS DWORD, pst AS SYSTEMTIME)
MonthCal_HitTest(BYVAL hmc AS DWORD, pinfo AS MCHITTESTINFO)
MonthCal_SetFirstDayOfWeek(BYVAL hmc AS DWORD, BYVAL iDay AS LONG)
MonthCal_GetFirstDayOfWeek(BYVAL hmc AS DWORD)
MonthCal_GetRange(BYVAL hmc AS DWORD, rgst AS SYSTEMTIME)
MonthCal_SetRange(BYVAL hmc AS DWORD, BYVAL gd AS DWORD,rgst AS SYSTEMTIME)
MonthCal_GetMonthDelta(BYVAL hmc AS DWORD)
MonthCal_SetMonthDelta(BYVAL hmc AS DWORD, BYVAL n AS LONG)
MonthCal_GetMaxTodayWidth(BYVAL hmc AS DWORD)
MonthCal_SetUnicodeFormat(BYVAL hwnd AS DWORD,BYVAL fUnicode AS DWORD)
MonthCal_GetUnicodeFormat(BYVAL hwnd AS DWORD)
DateTime_GetSystemtime(BYVAL hdp AS DWORD, pst AS SYSTEMTIME)
DateTime_SetSystemtime(BYVAL hdp AS DWORD, BYVAL gd AS DWORD,pst AS SYSTEMTIME)
DateTime_GetRange(BYVAL hdp AS DWORD, rgst AS SYSTEMTIME)
DateTime_SetRange(BYVAL hdp AS DWORD, BYVAL gd AS DWORD,rgst AS SYSTEMTIME)
DateTime_SetFormat(BYVAL hdp AS DWORD, sz AS ASCIIZ)
DateTime_SetMonthCalColor(BYVAL hdp AS DWORD,BYVAL iColor AS DWORD, BYVAL clr AS DWORD)
DateTime_GetMonthCalColor(BYVAL hdp AS DWORD, iColor AS DWORD)
DateTime_GetMonthCal(BYVAL hdp AS DWORD)
DateTime_SetMonthCalFont(BYVAL hdp AS DWORD, BYVAL hfont AS DWORD,BYVAL fRedraw AS LONG)
DateTime_GetMonthCalFont(BYVAL hdp AS DWORD)
MAKEIPRANGE(BYVAL low AS BYTE, BYVAL high AS BYTE)
MAKEIPADDRESS(BYVAL b1 AS DWORD, BYVAL b2 AS DWORD,BYVAL b3 AS DWORD, BYVAL b4 AS DWORD)
FIRST_IPADDRESS(BYVAL x AS DWORD)
SECOND_IPADDRESS(BYVAL x AS DWORD)
THIRD_IPADDRESS(BYVAL x AS DWORD)
FOURTH_IPADDRESS(BYVAL x AS DWORD)
Pager_SetChild(BYVAL hwnd AS DWORD, BYVAL hwndChild AS DWORD)
Pager_RecalcSize(BYVAL hwnd AS DWORD)
Pager_ForwardMouse(BYVAL hwnd AS DWORD, BYVAL bForward AS BYTE)
Pager_SetBkColor(BYVAL hwnd AS DWORD, BYVAL clr AS DWORD)
Pager_GetBkColor(BYVAL hwnd AS DWORD)
Pager_SetBorder(BYVAL hwnd AS DWORD, BYVAL iBorder AS LONG)
Pager_GetBorder(BYVAL hwnd AS DWORD)
Pager_SetPos(BYVAL hwnd AS DWORD, BYVAL iPos AS LONG)
Pager_GetPos(BYVAL hwnd AS DWORD)
Pager_SetButtonSize(BYVAL hwnd AS DWORD, BYVAL iSize AS LONG)
Pager_GetButtonSize(BYVAL hwnd AS DWORD)
Pager_GetButtonState(BYVAL hwnd AS DWORD, BYVAL iButton AS LONG)
Pager_GetDropTarget(BYVAL hwnd AS DWORD, ppdt AS DWORD)
InitMUILanguage(BYVAL uiLang AS DWORD)
GetMUILanguage()
TrackMouseEvent(lpEventTrack AS EVENTTRACK)
Button_Click(BYVAL hButton AS DWORD)
Button_GetCheck(BYVAL hButton AS DWORD)
Button_GetImage(BYVAL hButton AS DWORD)
Button_GetState(BYVAL hButton AS DWORD)
Button_SetCheck(BYVAL hButton AS DWORD, BYVAL STATE AS DWORD)
Button_SetImage(BYVAL hButton AS DWORD, BYVAL hImage AS DWORD)
Button_SetState(BYVAL hButton AS DWORD, BYVAL STATE AS DWORD)
Button_SetStyle(BYVAL hButton AS DWORD, BYVAL style AS DWORD,BYVAL fRedraw AS LONG)
Button_SetText(BYVAL hButton AS DWORD, TEXT AS STRING)
Edit_SetCueBannerText(BYVAL hwnd AS DWORD, BYVAL lpcwText AS DWORD)
Edit_GetCueBannerText(BYVAL hwnd AS DWORD, BYVAL lpwText AS DWORD,BYVAL cchText AS LONG)
Edit_ShowBalloonTip(BYVAL hwnd AS DWORD,peditballoontip AS EDITBALLOONTIP)
Edit_HideBalloonTip(BYVAL hwnd AS DWORD)
Edit_CanUndo(BYVAL hEdit AS DWORD)
Edit_CharFromPos(BYVAL hEdit AS DWORD, BYVAL x AS INTEGER,BYVAL y AS INTEGER)
Edit_EmptyUndoBuffer(BYVAL hEdit AS DWORD)
Edit_FmtLines(BYVAL hEdit AS LONG, BYVAL AddEolFlag AS LONG)
Edit_GetFirstVisibleLine(BYVAL hEdit AS DWORD)
Edit_GetHandle(BYVAL hEdit AS DWORD)
Edit_GetLimitText(BYVAL hEdit AS DWORD)
Edit_GetLine(BYVAL hEdit AS DWORD, BYVAL which AS DWORD)
Edit_GetLineCount(BYVAL hEdit AS DWORD)
Edit_GetMargins(BYVAL hEdit AS DWORD)
Edit_GetModify(BYVAL hEdit AS DWORD)
Edit_GetPasswordChar(BYVAL hEdit AS DWORD)
Edit_GetRect(BYVAL hEdit AS DWORD, r AS RECT)
Edit_GetSel(BYVAL hEdit AS DWORD)
Edit_GetTextLength(BYVAL hEdit AS DWORD)
Edit_GetText(BYVAL hEdit AS LONG)
Edit_GetThumb(BYVAL hEdit AS DWORD)
Edit_LimitText(BYVAL hEdit AS DWORD, BYVAL chMax AS DWORD)
Edit_LineFromChar(BYVAL hEdit AS DWORD, BYVAL index AS DWORD)
Edit_LineIndex(BYVAL hEdit AS DWORD, BYVAL nLine AS LONG)
Edit_LineLength(BYVAL hEdit AS DWORD, BYVAL index AS DWORD)
Edit_LineScroll(BYVAL hEdit AS DWORD, BYVAL x AS LONG,BYVAL y AS LONG)
Edit_PosFromChar(BYVAL hEdit AS DWORD, BYVAL index AS DWORD)
Edit_SetText(BYVAL hEdit AS DWORD, BYVAL TEXT AS STRING)
Listbox_AddFile(BYVAL hListBox AS DWORD, BYVAL FILENAME AS STRING)
Listbox_AddString(BYVAL hListBox AS DWORD, BYVAL TEXT AS STRING)
Listbox_DeleteString(BYVAL hListBox AS DWORD, BYVAL Index AS DWORD)
Listbox_Dir(BYVAL hListBox AS DWORD, BYVAL Attr AS DWORD,BYVAL FileSpec AS STRING)
Listbox_FindString(BYVAL hListBox AS DWORD,BYVAL indexStart AS DWORD, BYVAL szCtStr AS STRING)
Listbox_FindStringExact(BYVAL hListBox AS DWORD,BYVAL indexStart AS DWORD, BYVAL szCtStr AS STRING)
Listbox_GetAnchorIndex(BYVAL hListBox AS DWORD)
Listbox_GetCaretIndex(BYVAL hListBox AS DWORD)
Listbox_GetCount(BYVAL hListBox AS DWORD)
Listbox_GetCurSel(BYVAL hListBox AS DWORD)
Listbox_GetHorizontalExtent(BYVAL hListBox AS DWORD)
Listbox_GetItemData(BYVAL hListBox AS DWORD, BYVAL index AS LONG)
Listbox_GetLocale(BYVAL hListBox AS DWORD)
Listbox_GetSel(BYVAL hListBox AS DWORD, BYVAL Index AS DWORD)
Listbox_GetSelCount(BYVAL hListBox AS DWORD)
Listbox_GetSelItems(BYVAL hListBox AS DWORD, BYVAL items AS DWORD,FirstItem AS LONG)
Listbox_GetText(BYVAL hListBox AS DWORD, BYVAL Index AS DWORD)
Listbox_GetTopIndex(BYVAL hListBox AS DWORD)
Listbox_InsertString(BYVAL hListBox AS DWORD, BYVAL Index AS DWORD,BYVAL TEXT AS STRING)
Listbox_ResetContent(BYVAL hListBox AS DWORD)
Listbox_SelectString(BYVAL hListBox AS DWORD, BYVAL Start AS DWORD,BYVAL TEXT AS STRING)
Listbox_SetAnchorIndex(BYVAL hListBox AS DWORD,BYVAL index AS DWORD)
Listbox_SetCurSel(BYVAL hListBox AS DWORD, BYVAL Index AS DWORD)
Listbox_SetHorizontalExtent(BYVAL hListBox AS DWORD,BYVAL cxExtent AS LONG)
Listbox_SetLocale(BYVAL hListBox AS DWORD,BYVAL wLocaleID AS DWORD)
Listbox_SetSel(BYVAL hListBox AS DWORD, BYVAL fSelect AS LONG,BYVAL index AS LONG)
Listbox_SetTabStops(BYVAL hListBox AS DWORD, TabStops AS LONG,BYVAL TabStopsCnt AS LONG)
Listbox_SetTopIndex(BYVAL hListBox AS DWORD, BYVAL index AS DWORD)
ComboBox_SetMinVisible(BYVAL hwnd AS DWORD,BYVAL iMinVisible AS LONG)
ComboBox_GetMinVisible(BYVAL hwnd AS DWORD)
Combo_AddString(BYVAL hComboBox AS DWORD, BYVAL TEXT AS STRING)
Combo_DeleteString(BYVAL hComboBox AS DWORD, BYVAL Index AS DWORD)
Combo_Dir(BYVAL hComboBox AS DWORD, BYVAL Attr AS DWORD,BYVAL FileSpec AS STRING)
Combo_FindString(BYVAL hComboBox AS DWORD, BYVAL Start AS LONG,BYVAL TEXT AS STRING)
Combo_FindStringExact(BYVAL hComboBox AS DWORD,BYVAL Start AS LONG, BYVAL TEXT AS STRING)
Combo_GetCount(BYVAL hComboBox AS DWORD)
Combo_GetCurSel(BYVAL hComboBox AS DWORD)
Combo_GetDroppedState(BYVAL hComboBox AS DWORD)
Combo_GetDroppedWidth(BYVAL hComboBox AS DWORD)
Combo_GetEditSel(BYVAL hComboBox AS DWORD, lpStart AS LONG, lpEnd AS LONG)
Combo_GetExtendUi(BYVAL hComboBox AS DWORD)
Combo_GetItemData(BYVAL hComboBox AS DWORD, BYVAL index AS LONG)
Combo_GetLbText(BYVAL hComboBox AS DWORD, BYVAL Index AS LONG)
Combo_GetTopIndex(BYVAL hComboBox AS DWORD)
Combo_InitStorage(BYVAL hComboBox AS DWORD, BYVAL items AS LONG,BYVAL cb AS LONG)
Combo_InsertString(BYVAL hComboBox AS DWORD, BYVAL TEXT AS STRING)
Combo_LimitText(BYVAL hComboBox AS DWORD, BYVAL chLimit AS DWORD)
Combo_ResetContent(BYVAL hComboBox AS DWORD)
Combo_SelectString(BYVAL hComboBox AS DWORD, BYVAL Index AS DWORD,BYVAL TEXT AS STRING)
Combo_SetCurSel(BYVAL hComboBox AS DWORD, BYVAL Index AS DWORD)
Combo_SetEditSel(BYVAL hComboBox AS DWORD, BYVAL nStart AS INTEGER,BYVAL nEnd AS INTEGER)
Combo_SetItemData(BYVAL hComboBox AS DWORD, BYVAL index AS DWORD,BYVAL nData AS LONG)
Combo_SetTopIndex(BYVAL hComboBox AS DWORD, BYVAL index AS DWORD)
Combo_ShowDropDown(BYVAL hComboBox AS DWORD, BYVAL nShow AS LONG)
FlatSB_EnableScrollBar(BYVAL hWnd AS DWORD, BYVAL wSBflags AS LONG, BYVAL dArrows AS DWORD)
FlatSB_ShowScrollBar(BYVAL hWnd AS DWORD, BYVAL typecode AS LONG, BYVAL fShow AS LONG)
FlatSB_GetScrollRange(BYVAL hWnd AS DWORD, BYVAL typecode AS LONG, MinPos AS LONG, MaxPos AS LONG)
FlatSB_GetScrollInfo(BYVAL hWnd AS DWORD, BYVAL typecode AS LONG, si AS SCROLLINFO)
FlatSB_GetScrollPos(BYVAL hWnd AS DWORD, BYVAL typecode AS LONG)
FlatSB_GetScrollProp(BYVAL hWnd AS DWORD, BYVAL propIndex AS DWORD, BYVAL nValue AS LONG)
FlatSB_SetScrollPos(BYVAL hWnd AS DWORD, BYVAL typecode AS LONG, BYVAL nPos AS LONG, BYVAL fRedraw AS LONG)
FlatSB_SetScrollInfo(BYVAL hWnd AS DWORD, BYVAL typecode AS LONG, si AS SCROLLINFO, BYVAL fRedraw AS LONG)
FlatSB_SetScrollRange(BYVAL hWnd AS DWORD, BYVAL typecode AS LONG, BYVAL nMinPos AS LONG, BYVAL nMaxPos AS LONG, BYVAL fRedraw AS LONG)
FlatSB_SetScrollProp(BYVAL hWnd AS DWORD, BYVAL propIndex AS DWORD, BYVAL newValue AS DWORD, BYVAL fRedraw AS LONG)
InitializeFlatSB(BYVAL hWnd AS DWORD)
UninitializeFlatSB(BYVAL hWnd AS DWORD)
CommDlgExtendedError()
ChooseColor(lpcc AS CHOOSECOLORAPI)
FindText(lpfr AS FINDREPLACE)
ReplaceText(lpfr AS FINDREPLACE)
ChooseFont(lpcf AS CHOOSEFONTAPI)
PrintDlg(lpPd AS PRINTDLGAPI)
PrintDlgEx(lpPde AS PRINTDLGEXAPI)
PrinterDialog(BYVAL hWnd AS DWORD, Flags AS DWORD, hDC AS DWORD, nCopies AS WORD, nFromPage AS WORD, nToPage AS WORD, BYVAL nMinPage AS WORD, BYVAL nMaxPage AS WORD)
PrinterSetup(BYVAL hWnd AS DWORD)
GetOpenFileName(lpofn AS OPENFILENAME)
GetSaveFileName(lpofn AS OPENFILENAME)
GetFileTitle(lpszFile AS ASCIIZ, lpszTitle AS ASCIIZ, BYVAL cbBuf AS WORD)
OpenFileDialog(BYVAL hWnd AS DWORD, BYVAL sCaption AS STRING, sFileSpec AS STRING, BYVAL sInitialDir AS STRING, BYVAL sFilter AS STRING, BYVAL sDefExtension AS STRING, dFlags AS DWORD)
SaveFileDialog(BYVAL hWnd AS DWORD, BYVAL sCaption AS STRING, sFileSpec AS STRING, BYVAL sInitialDir AS STRING, BYVAL sFilter AS STRING, BYVAL sDefExtension AS STRING, dFlags AS DWORD)
PageSetupDlg(lpPageSetupDlg AS PAGESETUPDLGA)
